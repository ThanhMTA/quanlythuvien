[{"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\index.js":"1","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\reportWebVitals.js":"2","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\App.js":"3","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Context\\AuthContext.js":"4","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\AdminDashboard.js":"5","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\MemberDashboard.js":"6","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Signin.js":"7","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Signup.js":"8","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Home.js":"9","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Upload.js":"10","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Context\\AuthReducer.js":"11","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookList\\BookList.js":"12","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Search\\Search.js":"13","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Header\\Header.js":"14","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookDetails\\BookDetails.js":"15","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookList\\ListCate.js":"16","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Cart\\Cart.jsx":"17","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddTransaction.js":"18","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\ManagerBook.js":"19","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddBook.js":"20","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddMember.js":"21","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\GetMember.js":"22","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\Return.js":"23","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\ImageSlider\\ImageSlider.js":"24","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\firebase.js":"25","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\About\\About.js":"26","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\WelcomeBox\\WelcomeBox.js":"27","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Footer\\Footer.js":"28","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Stats\\Stats.js":"29","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\PopularBooks\\PopularBooks.js":"30","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\getURLimage.js":"31","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Loader\\Loader.js":"32","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Breadcrumb\\Breadcrumb.js":"33","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Navbar\\Navbar.js":"34","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\TransactionController.js":"35","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\trans.js":"36","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\BookApi.js":"37","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\user.js":"38","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\UserController.js":"39","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\bookController.js":"40","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\transactions.js":"41","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\CateController.js":"42","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\cateAPI.js":"43","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\info.js":"44","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\info.js":"45","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\index.js":"46","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\App.js":"47","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\reportWebVitals.js":"48","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Context\\AuthContext.js":"49","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\AdminDashboard.js":"50","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\MemberDashboard.js":"51","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Home.js":"52","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Signin.js":"53","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Signup.js":"54","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Upload.js":"55","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Context\\AuthReducer.js":"56","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Header\\Header.js":"57","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookDetails\\BookDetails.js":"58","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookList\\BookList.js":"59","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookList\\ListCate.js":"60","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Search\\Search.js":"61","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Cart\\Cart.jsx":"62","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddTransaction.js":"63","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddBook.js":"64","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddMember.js":"65","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\ManagerBook.js":"66","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\GetMember.js":"67","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\info.js":"68","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\Return.js":"69","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\ImageSlider\\ImageSlider.js":"70","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\transactions.js":"71","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\info.js":"72","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\firebase.js":"73","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\WelcomeBox\\WelcomeBox.js":"74","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Footer\\Footer.js":"75","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\PopularBooks\\PopularBooks.js":"76","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Stats\\Stats.js":"77","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\About\\About.js":"78","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\getURLimage.js":"79","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Loader\\Loader.js":"80","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Navbar\\Navbar.js":"81","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Breadcrumb\\Breadcrumb.js":"82","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\CateController.js":"83","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\TransactionController.js":"84","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\UserController.js":"85","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\BookApi.js":"86","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\bookController.js":"87","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\user.js":"88","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\trans.js":"89","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\cateAPI.js":"90","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\services\\authentication.service.js":"91"},{"size":453,"mtime":1701708641000,"results":"92","hashOfConfig":"93"},{"size":362,"mtime":1701708641000,"results":"94","hashOfConfig":"93"},{"size":2585,"mtime":1710140481205,"results":"95","hashOfConfig":"93"},{"size":1146,"mtime":1709720120006,"results":"96","hashOfConfig":"93"},{"size":4971,"mtime":1711974307522,"results":"97","hashOfConfig":"93"},{"size":2983,"mtime":1713841799210,"results":"98","hashOfConfig":"93"},{"size":3446,"mtime":1710139729471,"results":"99","hashOfConfig":"93"},{"size":6087,"mtime":1701708641000,"results":"100","hashOfConfig":"93"},{"size":617,"mtime":1709805641558,"results":"101","hashOfConfig":"93"},{"size":2696,"mtime":1709889004547,"results":"102","hashOfConfig":"93"},{"size":644,"mtime":1701708641000,"results":"103","hashOfConfig":"93"},{"size":11721,"mtime":1713604691529,"results":"104","hashOfConfig":"93"},{"size":3211,"mtime":1701708641000,"results":"105","hashOfConfig":"93"},{"size":15121,"mtime":1713846213907,"results":"106","hashOfConfig":"93"},{"size":2860,"mtime":1701708641000,"results":"107","hashOfConfig":"93"},{"size":1817,"mtime":1711330571883,"results":"108","hashOfConfig":"93"},{"size":1160,"mtime":1701708641000,"results":"109","hashOfConfig":"93"},{"size":12724,"mtime":1713845335533,"results":"110","hashOfConfig":"93"},{"size":25754,"mtime":1713835750725,"results":"111","hashOfConfig":"93"},{"size":14828,"mtime":1713804675779,"results":"112","hashOfConfig":"93"},{"size":6076,"mtime":1711447130569,"results":"113","hashOfConfig":"93"},{"size":30245,"mtime":1711975242244,"results":"114","hashOfConfig":"93"},{"size":14448,"mtime":1713831421740,"results":"115","hashOfConfig":"93"},{"size":2502,"mtime":1701708641000,"results":"116","hashOfConfig":"93"},{"size":587,"mtime":1701708641000,"results":"117","hashOfConfig":"93"},{"size":2190,"mtime":1701708641000,"results":"118","hashOfConfig":"93"},{"size":529,"mtime":1701708641000,"results":"119","hashOfConfig":"93"},{"size":2399,"mtime":1701708641000,"results":"120","hashOfConfig":"93"},{"size":1910,"mtime":1701708641000,"results":"121","hashOfConfig":"93"},{"size":1472,"mtime":1709819687880,"results":"122","hashOfConfig":"93"},{"size":230,"mtime":1701708641000,"results":"123","hashOfConfig":"93"},{"size":291,"mtime":1701708641000,"results":"124","hashOfConfig":"93"},{"size":993,"mtime":1701708641000,"results":"125","hashOfConfig":"93"},{"size":1466,"mtime":1701708641000,"results":"126","hashOfConfig":"93"},{"size":7213,"mtime":1711435218672,"results":"127","hashOfConfig":"93"},{"size":1246,"mtime":1711973299415,"results":"128","hashOfConfig":"93"},{"size":1121,"mtime":1713807158798,"results":"129","hashOfConfig":"93"},{"size":846,"mtime":1711431632168,"results":"130","hashOfConfig":"93"},{"size":1632,"mtime":1711973498654,"results":"131","hashOfConfig":"93"},{"size":1954,"mtime":1711353018888,"results":"132","hashOfConfig":"93"},{"size":11208,"mtime":1711302152170,"results":"133","hashOfConfig":"93"},{"size":722,"mtime":1710141413499,"results":"134","hashOfConfig":"93"},{"size":1173,"mtime":1711431556473,"results":"135","hashOfConfig":"93"},{"size":11200,"mtime":1711291874308,"results":"136","hashOfConfig":"93"},{"size":12291,"mtime":1711447220759,"results":"137","hashOfConfig":"93"},{"size":453,"mtime":1701708641000,"results":"138","hashOfConfig":"139"},{"size":2585,"mtime":1710140481205,"results":"140","hashOfConfig":"139"},{"size":362,"mtime":1701708641000,"results":"141","hashOfConfig":"139"},{"size":1146,"mtime":1709720120006,"results":"142","hashOfConfig":"139"},{"size":4979,"mtime":1714973644502,"results":"143","hashOfConfig":"139"},{"size":2826,"mtime":1714973756082,"results":"144","hashOfConfig":"139"},{"size":617,"mtime":1709805641558,"results":"145","hashOfConfig":"139"},{"size":3674,"mtime":1714922872821,"results":"146","hashOfConfig":"139"},{"size":6087,"mtime":1701708641000,"results":"147","hashOfConfig":"139"},{"size":2696,"mtime":1709889004547,"results":"148","hashOfConfig":"139"},{"size":644,"mtime":1701708641000,"results":"149","hashOfConfig":"139"},{"size":21821,"mtime":1714929952421,"results":"150","hashOfConfig":"139"},{"size":2860,"mtime":1701708641000,"results":"151","hashOfConfig":"139"},{"size":11939,"mtime":1714974958534,"results":"152","hashOfConfig":"139"},{"size":1817,"mtime":1711330571883,"results":"153","hashOfConfig":"139"},{"size":3211,"mtime":1701708641000,"results":"154","hashOfConfig":"139"},{"size":1160,"mtime":1701708641000,"results":"155","hashOfConfig":"139"},{"size":12871,"mtime":1714921728225,"results":"156","hashOfConfig":"139"},{"size":15558,"mtime":1714973870724,"results":"157","hashOfConfig":"139"},{"size":13918,"mtime":1714875482332,"results":"158","hashOfConfig":"139"},{"size":26562,"mtime":1714931095624,"results":"159","hashOfConfig":"139"},{"size":41643,"mtime":1714922610340,"results":"160","hashOfConfig":"139"},{"size":12271,"mtime":1714921728180,"results":"161","hashOfConfig":"139"},{"size":14566,"mtime":1714921727360,"results":"162","hashOfConfig":"139"},{"size":2502,"mtime":1701708641000,"results":"163","hashOfConfig":"139"},{"size":11203,"mtime":1714921728231,"results":"164","hashOfConfig":"139"},{"size":11185,"mtime":1714921728277,"results":"165","hashOfConfig":"139"},{"size":587,"mtime":1701708641000,"results":"166","hashOfConfig":"139"},{"size":529,"mtime":1701708641000,"results":"167","hashOfConfig":"139"},{"size":2399,"mtime":1701708641000,"results":"168","hashOfConfig":"139"},{"size":1472,"mtime":1709819687880,"results":"169","hashOfConfig":"139"},{"size":1910,"mtime":1701708641000,"results":"170","hashOfConfig":"139"},{"size":2190,"mtime":1701708641000,"results":"171","hashOfConfig":"139"},{"size":230,"mtime":1701708641000,"results":"172","hashOfConfig":"139"},{"size":291,"mtime":1701708641000,"results":"173","hashOfConfig":"139"},{"size":1466,"mtime":1701708641000,"results":"174","hashOfConfig":"139"},{"size":993,"mtime":1701708641000,"results":"175","hashOfConfig":"139"},{"size":722,"mtime":1710141413499,"results":"176","hashOfConfig":"139"},{"size":7213,"mtime":1714921805423,"results":"177","hashOfConfig":"139"},{"size":1632,"mtime":1711973498654,"results":"178","hashOfConfig":"139"},{"size":1764,"mtime":1714930260356,"results":"179","hashOfConfig":"139"},{"size":1954,"mtime":1711353018888,"results":"180","hashOfConfig":"139"},{"size":1002,"mtime":1714927752420,"results":"181","hashOfConfig":"139"},{"size":1805,"mtime":1714931259123,"results":"182","hashOfConfig":"139"},{"size":1173,"mtime":1711431556473,"results":"183","hashOfConfig":"139"},{"size":965,"mtime":1714918586796,"results":"184","hashOfConfig":"139"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},"1o55784",{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"187"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"187"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"187"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"187"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"187"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"187"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"187"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"187"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"187"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"187"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"187"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"187"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"187"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"187"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"187"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"187"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"187"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"187"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"187"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"187"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"187"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"187"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"187"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"187"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"187"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"187"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"187"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"187"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},"1oeh5qz",{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"308"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"308"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"308"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"308"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"308"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"308"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"308"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"308"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"308"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"308"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"308"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"308"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"308"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"308"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"308"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"308"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"308"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"308"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"308"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"308"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"308"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"308"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"308"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"308"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"308"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"308"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"308"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"308"},"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\index.js",[],["409","410"],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\reportWebVitals.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\App.js",["411","412"],"import Header from './Components/Header/Header'\nimport Home from './Pages/Home'\nimport BookList from './Components/BookList/BookList';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n  Route,\n} from 'react-router-dom'\nimport { AuthContext } from './Context/AuthContext.js'\nimport { useContext } from 'react'\nimport Signin from './Pages/Signin'\nimport Signup from './Pages/Signup'\nimport Upload from './Pages/Upload'\n\nimport MemberDashboard from './Pages/Dashboard/Member/MemberDashboard.js';\nimport AdminDashboard from './Pages/Dashboard/Admin/AdminDashboard.js';\nimport BookDetails from \"./Components/BookDetails/BookDetails\";\nimport Search from \"./Components/Search/Search\";\n\n\nimport Cart from './Components/Cart/Cart';\nimport ListCate from './Components/BookList/ListCate';\n\nfunction App() {\n  const { user } = useContext(AuthContext)\n  return (\n    <Router>\n\n\n      <Header />\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n\n          <Route exact path='/upload'>\n            <Upload />\n          </Route>\n          <Route exact path='/signup'>\n            <Signup />\n          </Route>\n\n          <Route exact path='/book/:id'>\n            <BookDetails />\n          </Route>\n\n          <Route exact path='/category/:category'>\n            <BookList />\n          </Route>\n\n          <Route exact path='/search/:keyword'>\n            <Search />\n          </Route>\n\n          <Route exact path=\"/books\">\n            <ListCate />\n          </Route>\n\n          <Route exact path=\"/cart\">\n            <Cart />\n          </Route>\n        </Switch>\n\n\n        {/* <Route exact path=\"/signin\">\n          {user ? (\n            user.isAdmin ? (\n              <Redirect to=\"/dashboard@admin\" />\n            ) : (\n              <Redirect to=\"/dashboard@member\" />\n            )\n          ) : (\n            <Signin />\n          )}\n        </Route>\n        <Route exact path='/dashboard@member'>\n          {user ? (user.isAdmin === false ? <MemberDashboard /> : <Redirect to='/' />) : <Redirect to='/' />}\n        </Route>\n        <Route exact path='/dashboard@admin'>\n          {user ? (user.isAdmin === true ? <AdminDashboard /> : <Redirect to='/' />) : <Redirect to='/' />}\n        </Route> */}\n\n        <Route exact path=\"/signin\">\n          <Signin />\n        </Route>\n        <Route exact path='/dashboard@member'>\n          <MemberDashboard />\n        </Route>\n        <Route exact path='/dashboard@admin'>\n          <AdminDashboard />\n        </Route>\n\n\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Context\\AuthContext.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\AdminDashboard.js",["413","414","415","416"],"\nimport React, { useState } from 'react';\nimport { Breadcrumb, Layout, Menu, theme } from 'antd';\nimport {\n    UserOutlined, BookOutlined, ReadOutlined, TeamOutlined, UserAddOutlined, LogoutOutlined,\n    NotificationOutlined\n} from '@ant-design/icons';\nimport AddTransaction from './Components/AddTransaction.js'\nimport AddMember from './Components/AddMember.js'\nimport AddBook from './Components/AddBook.js';\nimport ManagerBook from './Components/ManagerBook.js';\nimport Return from './Components/Return.js';\nimport GetMember from './Components/GetMember.js';\nimport Info from './Components/info.js';\nconst { Header, Content, Sider } = Layout;\n\n\n\nconst { SubMenu } = Menu;\n\nfunction AdminDashboard() {\n    const {\n        token: { colorBgContainer, borderRadiusLG },\n    } = theme.useToken();\n    const [active, setActive] = useState(\"manabook\");\n    const [collapsed, setCollapsed] = useState(false);\n\n    const handleClick = (e) => {\n        setActive(e.key);\n    };\n\n    const handleCollapse = () => {\n        setCollapsed(!collapsed);\n    };\n\n    const logout = () => {\n        localStorage.removeItem(\"user\");\n        // Redirect to SignIn page\n        window.location.href = '/signin';\n    };\n\n    return (\n        <Layout style={{ minHeight: '100vh' }}>\n            <Sider\n                collapsible\n                collapsed={collapsed}\n                onCollapse={handleCollapse}\n                width={250} // Adjust sidebar width here\n            >\n                <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\" onClick={handleClick} selectedKeys={[active]}>\n\n                    <SubMenu key=\"book\" icon={<BookOutlined />} title=\"Quản lý sách\" style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                        <Menu.Item key=\"manabook\" style={{ fontSize: '16px', fontWeight: 'bold' }}>Quản lý sách</Menu.Item>\n                        <Menu.Item key=\"addbook\" style={{ fontSize: '16px', fontWeight: 'bold' }}>Thêm sách</Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"transaction\" icon={<ReadOutlined />} title=\"Quản lý mượn trả\" style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                        <Menu.Item key=\"addtransaction\" style={{ fontSize: '16px', fontWeight: 'bold' }}>Mượn sách</Menu.Item>\n                        <Menu.Item key=\"returntransaction\" style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                            Trả sách\n                        </Menu.Item>\n                    </SubMenu>\n\n                    <Menu.Item key=\"getmember\" icon={< TeamOutlined />} style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                        Quản lý độc giả\n                    </Menu.Item>\n                    <Menu.Item key=\"profile\" icon={<UserOutlined />} style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                        Thông tin cá nhân\n                    </Menu.Item>\n                    <Menu.Item key=\"logout\" icon={<LogoutOutlined />} onClick={logout} style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                        Đăng xuất\n                    </Menu.Item>\n                </Menu>\n            </Sider>\n            <Content\n                style={{\n                    padding: 24,\n                    margin: 20,\n                    minHeight: 280,\n                    width: 300,\n                    background: colorBgContainer,\n                    borderRadius: borderRadiusLG,\n                }}\n            >\n                <div className=\"dashboard-option-content\">\n                    <div className=\"dashboard-addbooks-content\" style={active !== \"addbook\" ? { display: 'none' } : {}}>\n                        <AddBook />\n                    </div>\n                    <div className=\"dashboard-addbooks-content\" style={active !== \"manabook\" ? { display: 'none' } : {}}>\n                        < ManagerBook />\n                    </div>\n                    <div className=\"dashboard-transactions-content\" style={active !== \"addtransaction\" ? { display: 'none' } : {}}>\n                        <AddTransaction />\n                    </div>\n                    <div className=\"dashboard-addmember-content\" style={active !== \"addmember\" ? { display: 'none' } : {}}>\n                        <AddMember />\n                    </div>\n                    <div className=\"dashboard-addmember-content\" style={active !== \"getmember\" ? { display: 'none' } : {}}>\n                        <GetMember />\n                    </div>\n                    <div className=\"dashboard-addmember-content\" style={active !== \"returntransaction\" ? { display: 'none' } : {}}>\n                        <Return />\n                    </div>\n\n                    <div className=\"dashboard-profile-content\" style={active !== \"profile\" ? { display: 'none' } : {}}>\n                        < Info />\n                    </div>\n\n                </div>\n            </Content>\n\n        </Layout>\n    );\n}\n\nexport default AdminDashboard;\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\MemberDashboard.js",["417","418","419","420","421","422"],"import React, { useState } from 'react';\nimport { Menu, Layout, theme } from 'antd';\nimport { UserOutlined, BookOutlined, ReadOutlined, TeamOutlined, UserAddOutlined, LogoutOutlined } from '@ant-design/icons';\nimport Transaction from './transactions';\nimport Profile from './info';\nimport { Link } from 'react-router-dom'\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\n\nfunction MemberDashboard() {\n  const [active, setActive] = useState(\"profile\");\n  const [collapsed, setCollapsed] = useState(false);\n\n  const handleClick = (e) => {\n    setActive(e.key);\n  };\n  const {\n    token: { colorBgContainer, borderRadiusLG },\n  } = theme.useToken();\n\n  const handleCollapse = () => {\n    setCollapsed(!collapsed);\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"user\");\n    // Redirect to SignIn page\n    window.location.href = '/signin';\n  };\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Sider\n        collapsible\n        collapsed={collapsed}\n        onCollapse={handleCollapse}\n        width={250} // Adjust sidebar width here\n      >\n        <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\" onClick={handleClick} selectedKeys={[active]}>\n          <Menu.Item key=\"profile\" icon={<UserOutlined />} style={{ fontSize: '16px', fontWeight: 'bold' }}>\n            Thông tin cá nhân\n          </Menu.Item>\n          <Menu.Item key=\"transaction\" icon={<ReadOutlined />} style={{ fontSize: '16px', fontWeight: 'bold' }}>\n            {/* <Link to=\"/borrow-return\">Mượn trả sách</Link> */}\n            Mượn trả sách\n          </Menu.Item>\n          <Menu.Item key=\"logout\" icon={<LogoutOutlined />} onClick={logout} style={{ fontSize: '16px', fontWeight: 'bold' }}>\n            Đăng xuất\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <Content\n        style={{\n\n          padding: 24,\n          margin: 20,\n          minHeight: 280,\n          width: 300,\n          background: colorBgContainer,\n          borderRadius: borderRadiusLG,\n\n        }}\n      >\n        <div className=\"dashboard-option-content\">\n          <div className=\"dashboard-addbooks-content\" style={active !== \"transaction\" ? { display: 'none' } : {}}>\n            <Transaction />\n          </div>\n          <div className=\"dashboard-transactions-content\" style={active !== \"addtransaction\" ? { display: 'none' } : {}}>\n            <Transaction />\n          </div>\n          <div className=\"dashboard-profile-content\" style={active !== \"profile\" ? { display: 'none' } : {}}>\n            < Profile />\n          </div>\n\n          {/*  <div className=\"dashboard-addmember-content\" style={active !== \"addmember\" ? { display: 'none' } : {}}>\n            <AddMember />\n          </div>\n          <div className=\"dashboard-addmember-content\" style={active !== \"getmember\" ? { display: 'none' } : {}}>\n            <GetMember />\n          </div> */}\n\n        </div>\n      </Content>\n\n    </Layout>\n  );\n}\n\nexport default MemberDashboard;\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Signin.js",["423"],"import React, { useContext, useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { AuthContext } from '../Context/AuthContext.js'\nimport './Signin.css'\n\nimport { useHistory } from 'react-router-dom';\n\nfunction Signin() {\n    const [email, setEmail] = useState(\"\")\n\n    const [error, setError] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const { dispatch } = useContext(AuthContext)\n\n    const API_URL = process.env.REACT_APP_API_URL\n\n    const loginCall = async (userCredential, dispatch) => {\n        dispatch({ type: \"LOGIN_START\" });\n        try {\n            const res = await axios.post(API_URL + \"api/auth/signin\", userCredential);\n            dispatch({ type: \"LOGIN_SUCCESS\", payload: res.data });\n            alert(\"Đăng nhập thành công!!\")\n\n        }\n        catch (err) {\n            dispatch({ type: \"LOGIN_FAILURE\", payload: err });\n            setError(\"Sai mật khẩu hoặc tên đăng nhập\");\n        }\n    }\n\n    const handleForm = (e) => {\n        e.preventDefault();\n        loginCall({ email, password }, dispatch);\n\n    }\n    const { user } = useContext(AuthContext);\n    const history = useHistory();\n   \n    useEffect(() => {\n        // console.log(\"nguoi dung\", user._id)\n        if (user) {\n            if (user.user.isAdmin) {\n                history.push('/dashboard@admin');\n            }\n            else {\n                history.push('/dashboard@member');\n            }\n        }\n    }, [user, history]);\n\n    return (\n        <div className='signin-container'>\n            <div className=\"signin-card\">\n                <form onSubmit={handleForm}>\n                    <h2 className=\"signin-title\">Đăng nhập</h2>\n                    <p className=\"line\"></p>\n\n\n                    <div className=\"error-message\">\n                        <p>\n                            {error}\n                        </p>\n                    </div>\n\n                    <div className=\"signin-fields\">\n                        <label > <b>Email</b></label>\n                        <input\n                            type=\"email\"\n                            placeholder=\"Nhập Email\"\n                            name=\"email\"\n                            className=\"signin-textbox\"\n                            required\n                            onChange={e => { setEmail(e.target.value); setError(\"\") }}\n                        />\n\n                        <label htmlFor=\"password\"><b>Mật khẩu</b></label>\n                        <input\n                            type=\"password\"\n                            className=\"signin-textbox\"\n                            minLength='6'\n                            placeholder='Nhập mật khẩu'\n                            name='psw'\n                            required\n                            onChange={e => setPassword(e.target.value)}\n                        />\n\n                    </div>\n\n                    <button className=\"signin-button\">\n                        Đăng nhập\n                    </button>\n\n                    <a href=\"#\" className=\"forget-pass\">Bạn quên mật khẩu?</a>\n\n\n                </form>\n                <div className='signup-option'>\n                    <p className=\"signup-question\">Bạn chưa có tài khoản? <a href=\"/signup\" className=\"forget-pass\">Đăng ký ngay</a></p>\n                </div>\n            </div>\n        </div>\n\n\n    )\n\n\n\n\n\n\n}\n\n\nexport default Signin;","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Signup.js",["424","425","426"],"import React, { useContext, useState } from 'react'\nimport './Signin.css'\nimport axios from 'axios'\nimport { AuthContext } from '../Context/AuthContext.js'\nimport Switch from '@material-ui/core/Switch';\nimport { Dropdown } from 'semantic-ui-react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport moment from 'moment'\nimport {useHistory} from \"react-router-dom\"\n\nfunction Signup() {\n    const history  = useHistory();\n \n    const [DateOfBirthString, setDateOfBirthString] = useState(null)\n    const [address, setAddress] = useState()\n    const [mobileNumber, setMobileNumber] = useState()\n    const [email, setEmail] = useState()\n    const [userFullName, setuserFullName] = useState()\n    const [password, setPassword] = useState()\n    const [error, setError] = useState(\"\")\n\n    const [gender, setGender] = useState(null)\n\n    const [DateOfBirth, setDateOfBirth] = useState(null)\n\n\n    const API_URL = process.env.REACT_APP_API_URL\n\n\n    \n    const genderTypes = [\n        { value: \"Nam\", text: \"Nam\" },\n        { value: \"Nu\", text: \"Nữ\" }\n    ]\n\n\n    const handleForm = async (e) => {\n        e.preventDefault()\n        if (\n            userFullName !== \"\" &&\n            DateOfBirthString !== \"\" &&\n            gender !== \"\" &&\n            address !== \"\" &&\n            mobileNumber !== \"\" &&\n            email !== \"\" &&\n            password!== \"\")\n            {\n                const userData = {\n                    userFullName: userFullName,\n                    userType:\"student\",\n                    isAdmin:false,\n                    dob: DateOfBirthString,\n                    gender: gender,\n                    address: address,\n                    mobileNumber: mobileNumber,\n                    email: email,\n                    password: password\n                };\n\n                try{\n                    const response = await axios.post(API_URL+\"api/auth/register\",userData);\n                    setuserFullName(null)\n                    setAddress(null)\n                    setMobileNumber(null)\n                    setEmail(null)\n                    setPassword(null)\n                    setGender(null)\n                    setDateOfBirth(null)\n                    setDateOfBirthString(null)\n                    alert(\"Đăng ký thành công!\");\n                    history.push(\"/signin\")\n                    \n                }catch(e){\n                    console.log(e);\n                    setError(\"Đã xảy ra lỗi\");\n                }\n\n\n            }\n        \n    }\n\n    return (\n        <div className='signin-container'>\n            <div className=\"signin-card\">\n                <form onSubmit={handleForm}>\n                    <h2 className=\"signin-title\"> Đăng ký tài khoản</h2>\n                    <p className=\"line\"></p>\n\n                    <div className=\"error-message\"><p>{error}</p></div>\n                    <div className=\"signin-fields\">\n\n                        <label htmlFor=\"userFullName\"><b>Họ và tên</b><span className=\"required-field\">*</span></label>\n                        <input className=\"signin-textbox\" type=\"text\" name=\"userFullName\" required onChange={(e) => setuserFullName(e.target.value)}></input>\n\n                        <label htmlFor=\"userFullName\"><b>Email</b><span className=\"required-field\">*</span></label>\n                        <input className=\"signin-textbox\" type=\"text\" name=\"email\" required  onChange={(e) => setEmail(e.target.value)}></input>\n                        <label htmlFor=\"password\"><b>Mật khẩu</b><span className=\"required-field\">*</span></label>\n\n                        <input className='signin-textbox' type=\"password\" minLength='6' placeholder=\"Nhập mật khẩu\" name=\"psw\" required onChange={(e) => { setPassword(e.target.value) }} />\n\n                        <label htmlFor=\"mobileNumber\"><b>Số điện thoại</b><span className=\"required-field\">*</span></label>\n                        <input className=\"signin-textbox\" type=\"phone\" required onChange={(e) => setMobileNumber(e.target.value)} ></input>\n\n                        <label chtmlFor=\"dob\">\n                            <b>Ngày sinh</b><span className=\"required-field\">*</span>\n                        </label>\n\n                        <DatePicker\n                            className=\"date-picker\"\n                            placeholderText=\"dd/MM/yyyy\"\n                            selected={DateOfBirth}\n                            onChange={(date) => {\n                                setDateOfBirth(date);\n                                setDateOfBirthString(moment(date).format('MM/DD/YYYY'))\n                            }}\n                            dateFormat=\"dd/MM/yyyy\"\n                            maxDate={new Date()}\n                        />\n\n\n                        <label htmlFor=\"gender\"><b>Giới tính</b><span className=\"required-field\">*</span></label>\n                        <div className='semanticdropdown'>\n                            <Dropdown\n                                className=\"date-picker\"\n                                placeholder='Chọn giới tính'\n                                fluid\n                                selection\n                                value={gender}\n                                options={genderTypes}\n                                onChange={(event, data) => setGender(data.value)}\n                            />\n\n                        </div>\n                        <div className=\"ready-question\">\n                            <p>Chấp hành nghiêm quy định thư viện?</p>\n                            <Switch color=\"primary\" />\n                        </div>\n                        <button className=\"signin-button\">Đăng ký</button>\n\n                    </div>\n\n                </form>\n                <div className='signup-option'>\n                    <p className=\"signup-question\">Đã có tài khoản?<a className=\"forget-pass\" href=\"/signin\"> Đăng nhập</a></p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Signup","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Home.js",["427"],"import React from \"react\";\n\nimport About from \"../Components/About/About\"\nimport WelcomeBox from '../Components/WelcomeBox/WelcomeBox'\nimport ImageSlider from '../Components/ImageSlider/ImageSlider.js'\nimport Footer from '../Components/Footer/Footer'\nimport Stats from '../Components/Stats/Stats'\nimport PopularBooks from '../Components/PopularBooks/PopularBooks'\nfunction Home(){\n    return (\n        <div id=\"home\" >\n            <ImageSlider/>\n            <WelcomeBox/>\n            <About/>\n            {/* <Stats/> */}\n\n            <PopularBooks/>\n\n            <Footer/>\n        </div>\n    )\n}\n\nexport default Home","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Upload.js",["428"],"import { useState, useEffect } from \"react\";\nimport \"./Upload.css\"\nimport {\n    ref,\n    uploadBytes,\n    getDownloadURL,\n    listAll\n} from \"firebase/storage\";\nimport { storage } from \"../firebase\";\nimport { v4 } from \"uuid\";\nimport React from 'react';\nimport * as XLSX from 'xlsx';\nfunction Upload() {\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageURL, setImageURL] = useState([]);\n    const [FileExcel, setFileExcel] = useState(null);\n    const imageListRef = ref(storage, \"image/\")\n\n    const uploadFile = () => {\n        if (imageUpload == null) return;\n        const imageRef = ref(storage, `image/${imageUpload.name + v4()}`);\n        uploadBytes(imageRef, imageUpload).then((snapshot) => {\n            getDownloadURL(snapshot.ref).then((url) => {\n                setImageURL((prev) => [...prev, url]);\n            });\n        });\n\n    };\n\n\n    useEffect(() => {\n        listAll(imageListRef).then((response) => {\n            response.items.forEach((item) => {\n                getDownloadURL(item).then((url) => {\n                    setImageURL((prev) => [...prev, url]);\n                    console.log(item);\n                });\n            });\n        });\n\n    }, []);\n\n\n    const handleExcel = () => {\n        const file = FileExcel;\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const data = new Uint8Array(e.target.result);\n            const workbook = XLSX.read(data, { type: 'array' });\n            const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n\n            console.log(jsonData);\n            // Xử lý dữ liệu Excel ở đây\n        };\n        reader.readAsArrayBuffer(file);\n    }\n\n\n\n    return (\n        \n\n        <div className=\"Upload\">\n            <div>\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n           \n                <input type=\"file\" onChange={(e) => {\n                    setImageUpload(e.target.files[0]);\n                    console.log(e);\n                }\n                } />\n\n\n            </div>\n\n\n            <button onClick={uploadFile}> Upload images</button>\n\n            {imageURL.map((url) => {\n                return <img src={url} alt=\"\" srcset=\"\" />\n            })}\n\n\n            <div>\n                <label htmlFor=\"\">upload excel</label>\n                <input type=\"file\" onChange={(e) => {\n                    setFileExcel(e.target.files[0])\n                }}/>\n                <button onClick={handleExcel}> excel</button>\n            </div>\n\n\n\n\n\n        </div>\n    )\n\n\n\n\n\n\n}\n\nexport default Upload;","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Context\\AuthReducer.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookList\\BookList.js",["429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447"],"import React, { useContext, useEffect, useState } from 'react'\nimport './BookList.css'\nimport axios from 'axios'\nimport Loading from \"../Loader/Loader\";\nimport { Link } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport { useHistory } from \"react-router-dom\"\nimport Footer from '../Footer/Footer'\nimport {\n    Button, Modal,\n    Cascader,\n    DatePicker,\n    Form,\n    Input,\n    InputNumber,\n    Mentions,\n    Select,\n    TreeSelect,\n    Breadcrumb,\n    Layout,\n    Card,\n    theme,\n    Image,\n    Row,\n    Col,\n    Typography,\n    Switch\n\n\n} from 'antd';\nimport getUrlImage from \"../../Pages/getURLimage\"\nimport TransController from '../../Controller/TransactionController';\nimport { AuthContext } from '../../Context/AuthContext.js';\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph } = Typography;\nconst { Meta } = Card;\nfunction BookList() {\n    const [fromDate, setFromDate] = useState(null)\n    const [toDate, setToDate] = useState(null);\n    const [book, setBook] = useState(null);\n    const { category } = useParams();\n    const [listBook, setListbook] = useState([])\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isBookOpen, setIsBookOpen] = useState(false);\n    const [ellipsis, setEllipsis] = useState(true);\n    const { user } = useContext(AuthContext)\n    \n    const {\n        token: { colorBgContainer, borderRadiusLG },\n    } = theme.useToken();\n    const handleOk = () => {\n        setIsModalOpen(false);\n    };\n    const handleCancel = () => {\n        setIsModalOpen(false);\n    };\n    const handleBookOk = () => {\n        setIsBookOpen(false);\n    };\n    const handleBookCancel = () => {\n        setIsBookOpen(false);\n    };\n    const API_URL = process.env.REACT_APP_API_URL\n\n    useEffect(() => {\n        setLoading(true)\n        const getListBook = async () => {\n            try {\n                if (category !== \"\") {\n                    const response = await axios.get(API_URL + 'api/books/getbycate/' + category)\n                    setListbook(response.data);\n\n                } else {\n                    const response = await axios.get(API_URL + 'api/books/allbooks')\n                    setListbook(response.data);\n                }\n\n                setLoading(false);\n\n            } catch (err) {\n                setLoading(false);\n                console.log('Error when get list book =>', err)\n            }\n        }\n        getListBook()\n    }, [API_URL])\n    const handleBorrowClick = (book) => {\n        setBook(book);\n        setIsModalOpen(true);\n    };\n    const handleBookOpen = (book) => {\n        setBook(book);\n        setIsBookOpen(true);\n    };\n\n\n    const addTransaction = async (values) => {\n        try {\n            setLoading(true);\n\n            const { borrowerId, bookIds, transactionType, fromDate, toDate } = values;\n            const transactionData = {\n                books: bookIds,\n                borrowerId: borrowerId,\n                transactionType: transactionType,\n                fromDate: fromDate,\n                toDate: toDate,\n                returnDate: null\n            };\n\n            await TransController.addTransaction(transactionData);\n\n            alert('Tạo phiếu mượn thành công 🎉');\n\n        } catch (err) {\n            console.log(err);\n            alert('Đã xảy ra lỗi khi tạo phiếu mượn');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleUpdateTransaction = async (transactionId) => {\n        try {\n            const data = {\n                transactionStatus: \"True\"\n            };\n\n            const updatedTransaction = await TransController.updateTransaction(transactionId, data);\n            const Transactions = await TransController.getAllTrans();\n\n            console.log('Transaction updated:', updatedTransaction);\n            alert('cập nhật thành công 🎉');\n            const activeTransactions = Transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n            console.log(\"thanh\", Transactions)\n\n        } catch (error) {\n            console.error('Error updating transaction:', error);\n        }\n    };\n\n    const handleOkModal = () => {\n        const formData = {\n            borrowerId: user.user._id,\n            bookIds: book._id,\n            transactionType: 'Muon',\n            fromDate: fromDate,\n            toDate: toDate\n        };\n\n        addTransaction(formData);\n        setIsModalOpen(false);\n    };\n    if (loading) return <Loading />;\n\n    return (\n        <>\n\n            <Content\n                style={{\n                    background: colorBgContainer,\n                    borderRadius: borderRadiusLG,\n                }}\n            >\n                <div style={{\n                    marginLeft: 20,\n                    marginRight: 20,\n                }}>\n                    <Breadcrumb\n                        style={{ borderWidth: '10px' }}\n                        items={[\n                            {\n                                title: 'Home',\n                            },\n                            {\n                                title: <a href=\"\">Application Center</a>,\n                            },\n                            {\n                                title: <a href=\"\">Application List</a>,\n                            },\n                            {\n                                title: 'An Application',\n                            },\n                        ]}\n                    />\n                </div>\n                <div className=\"block-page\">\n\n                    <div className=\"books-page\">\n                        <div className=\"title\">\n                            <label htmlFor=\"language\">Sách theo thể loại \"{category}\"</label><br />\n                        </div>\n                        <div className=\"books\">\n                            {listBook.map((item, index) => (\n                                <>\n                                    {/* <div key={index} className=\"book-card\"> */}\n\n                                    <Card\n                                        hoverable\n                                        style={{\n                                            width: 300,\n                                            height: 320\n                                            //  margin: '10px'\n                                        }}\n                                    // cover={<img alt=\"example\"\n                                    //     src={item.image_url}\n                                    //     style={{\n                                    //         Height: '200px',\n                                    //         width: 240,\n                                    //         objectFit: 'cover'\n                                    //     }} />}\n                                    >\n                                        <Image\n                                            width={250}\n                                            height={180}\n                                            src={item.image_url}\n                                        />\n                                        <Meta\n                                            title={item.bookName}\n                                            onClick={() => handleBookOpen(item)}\n                                            description={item.author}\n                                        />\n\n\n                                        <Button onClick={() => handleBorrowClick(item)}>Mượn</Button>\n                                    </Card>\n\n\n\n                                    {/* </div> */}\n\n                                </>\n\n\n                            ))}\n                        </div>\n                    </div>\n                    <Modal title=\"Mượn sách\" open={isModalOpen} onOk={handleOkModal} onCancel={handleCancel}>\n                        <Form layout=\"vertical\" style={{ margin: 33 }}>\n                            <Form.Item label=\"Mượn sách\" name=\"book\" rules={[{ required: true, message: 'Vui lòng chọn từ ngày' }]}>\n                                <Input style={{ width: 400 }} placeholder={book ? book.bookName : ''} value={book ? book._id : ''} readOnly />\n                            </Form.Item>\n                            <Form.Item label=\"Từ ngày\" name=\"fromDate\" rules={[{ required: true, message: 'Vui lòng chọn từ ngày' }]}>\n                                <DatePicker style={{ width: 400 }} placeholder=\"Chọn từ ngày\" onChange={date => setFromDate(date)} />\n                            </Form.Item>\n                            <Form.Item label=\"Đến ngày\" name=\"toDate\" rules={[{ required: true, message: 'Vui lòng chọn đến ngày' }]}>\n                                <DatePicker style={{ width: 400 }} placeholder=\"Chọn đến ngày\" onChange={date => setToDate(date)} />\n                            </Form.Item>\n                        </Form>\n                    </Modal>\n                    <Modal\n                        title=\"Mượn sách\"\n                        open={isBookOpen}\n                        onOk={handleBookOk}\n                        onCancel={handleBookCancel}\n                        width={800}\n                    >\n                        {book && (\n                            <>\n                                <Row gutter={16}\n                                    style={{ padding: 10 }}\n                                >\n                                    <Col span={12}\n\n                                    >\n                                        <Image\n                                            width={330}\n                                            height={240}\n                                            src={book.image_url}\n                                        />\n                                        <Title level={4}>{book.bookName} </Title>\n                                        <Title level={5} type=\"secondary\">{book.author}</Title>\n                                        <Title level={5} italic>{book.publisher}</Title>\n                                        <Title level={5} strong>Số lượng sách còn:{book.bookCountAvailable}</Title>\n\n                                    </Col>\n                                    <Col span={12} style={{\n                                        paddingTop: 24,\n                                    }}>\n                                        <Title level={4}>Mô tả </Title>\n                                        <Paragraph\n                                            ellipsis={\n                                                ellipsis\n                                                    ? {\n                                                        rows: 5,\n                                                        expandable: true,\n                                                        symbol: 'more',\n                                                    }\n                                                    : false\n                                            }\n                                        >\n                                            {book.description}\n                                        </Paragraph>\n                                    </Col>\n                                </Row>\n\n\n                            </>\n\n\n\n\n                        )}\n                    </Modal>\n                    <Footer />\n                </div>\n            </Content>\n        </>\n    )\n}\n\nexport default BookList\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Search\\Search.js",["448","449"],"import React, { useEffect, useState } from 'react'\nimport './BookList.css'\nimport axios from 'axios'\nimport Loading from \"../Loader/Loader\";\nimport { Link } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport { useHistory } from \"react-router-dom\"\nimport Footer from '../Footer/Footer'\n\nimport getUrlImage from \"../../Pages/getURLimage\"\n\n\nfunction Search() {\n    const { keyword } = useParams();\n    const [listBook, setListbook] = useState([])\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n\n    const API_URL = process.env.REACT_APP_API_URL\n\n    useEffect(() => {\n        setLoading(true)\n        console.log(\"this keyword \", keyword);\n        const getListBook = async () => {\n            try {\n                if (keyword !== \"\") {\n                    const response = await axios.get(API_URL + 'api/books/search/' + keyword)\n                    setListbook(response.data);\n                    keyword = \"\";\n\n                } \n\n                setLoading(false);\n\n            } catch (err) {\n                setLoading(false);\n                console.log('Error when get list book =>', err)\n            }\n        }\n        getListBook()\n    }, [keyword])\n\n    if (loading) return <Loading />;\n\n    return (\n        <div className=\"block-page\">\n\n            <div className=\"books-page\">\n                <button type='button' className='addbook-submit' onClick={() => history.push(\"/books\")}>\n                    <FaArrowLeft size={22} />\n                    <span className='fs-18 fw-6'>Trở lại</span>\n                </button>\n                {/* <Breadcrumb /> */}\n                <div className=\"title\">\n                    <label htmlFor=\"language\">Kết quả tìm kiếm cho \"{keyword}\"</label><br />\n                </div>\n                <div className=\"books\">\n\n\n                    {listBook.map((item) => {\n                        return (\n\n                            <div className=\"book-card\">\n                                <img src={getUrlImage(item.image_url)} alt=\"\" href={`/book/${item._id}`} ></img>\n                                <Link to={`/book/${item._id}`}>\n\n                                    <p className=\"bookcard-title\"><b>{item.bookName}</b></p>\n\n                                </Link>\n                                <p className=\"bookcard-author\"> {item.author}</p>\n                                <p className=\"bookcard-author\">{item.publisher}</p>\n\n                                <div>\n                                    <div className=\"bookcard-category\">\n                                        <p>{item.categories}</p>\n                                    </div>\n                                    <div className=\"bookcard-select\">\n                                        <button>Mượn</button>\n                                    </div>\n                                </div>\n                                <div className=\"bookcard-emptybox\"></div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n\n            <Footer />\n        </div>\n    )\n}\n\nexport default Search\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Header\\Header.js",["450","451","452","453","454","455","456","457","458","459","460","461","462"],"import { React, useState, useRef, useEffect, useContext } from 'react'\nimport { Link } from 'react-router-dom'\nimport './Header.css';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { FaSearch } from \"react-icons/fa\";\nimport { AuthContext } from \"../../Context/AuthContext.js\"\nimport { useHistory } from \"react-router-dom\";\nimport Navbar from \"../Navbar/Navbar\";\nimport {\n    Avatar,\n    Badge,\n    Drawer,\n    Button,\n    List,\n    Skeleton,\n    Collapse,\n    Typography\n\n} from 'antd';\nimport { BellOutlined } from '@ant-design/icons';\nconst { Panel } = Collapse;\nconst { Text } = Typography;\n\nconst count = 10;\nconst fakeDataUrl = `https://randomuser.me/api/?results=${count}&inc=name,gender,email,nat,picture&noinfo`;\nfunction Header() {\n    const [menutoggle, setMenutoggle] = useState(false)\n    const history = useHistory();\n    const [initLoading, setInitLoading] = useState(true);\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const [list, setList] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [countNotify, setCountNotify] = useState(0);\n    const [notifyStaff, setNotifyStaff] = useState(false);\n    const [notifyUser, setNotifyUser] = useState(false);\n\n    // lay count  Notify\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (user.user.isAdmin) {\n                    const response = await fetch(`http://localhost:5000/api/notify/countSaft/${user.user._id}`); // Thay đổi URL tùy thuộc vào đường dẫn của API\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch books');\n                    }\n                    const data = await response.json();\n                    setCountNotify(data); // Cập nhật state allBooks với dữ liệu từ API\n                }\n                else {\n                    const response = await fetch(`http://localhost:5000/api/notify/countUesr/${user.user._id}`); // Thay đổi URL tùy thuộc vào đường dẫn của API\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch books');\n                    }\n                    const data = await response.json();\n                    setCountNotify(data); // Cập nhật state allBooks với dữ liệu từ API\n                } // Cập nhật state allBooks với dữ liệu từ API\n            } catch (error) {\n                console.error('Error fetching books:', error);\n            }\n        };\n\n        fetchData(); // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n    //  lấy thông tin Notify\n    console.log(countNotify)\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (user.user.isAdmin) {\n                    const response = await fetch(`http://localhost:5000/api/notify/staff-notify/${user.user._id}`); // Thay đổi URL tùy thuộc vào đường dẫn của API\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch books');\n                    }\n                    const data = await response.json();\n                    setNotifyStaff(data); // Cập nhật state allBooks với dữ liệu từ API\n                }\n                else {\n                    const response = await fetch(`http://localhost:5000/api/notify/user-notify/${user.user._id}`); // Thay đổi URL tùy thuộc vào đường dẫn của API\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch books');\n                    }\n                    const data = await response.json();\n                    setNotifyUser(data); // Cập nhật state allBooks với dữ liệu từ API\n                }\n\n\n            } catch (error) {\n                console.error('Error fetching books:', error);\n            }\n        };\n\n        fetchData(); // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n    const handleNotifyClick = async (notify) => {\n        try {\n            // Gọi API để cập nhật NotifyStatus của thông báo\n            await fetch(`http://localhost:5000/api/notify/update/${notify._id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ NotifyStatus: 0 }),\n            });\n\n            // Cập nhật lại danh sách thông báo trên giao diện\n            if (user.user.isAdmin) {\n                const response = await fetch(`http://localhost:5000/api/notify/countSaft/${user.user._id}`); // Thay đổi URL tùy thuộc vào đường dẫn của API\n                if (!response.ok) {\n                    throw new Error('Failed to fetch books');\n                }\n                const data = await response.json();\n                setCountNotify(data); // Cập nhật state allBooks với dữ liệu từ API\n            }\n            else {\n                const response = await fetch(`http://localhost:5000/api/notify/countUesr/${user.user._id}`); // Thay đổi URL tùy thuộc vào đường dẫn của API\n                if (!response.ok) {\n                    throw new Error('Failed to fetch books');\n                }\n                const data = await response.json();\n                setCountNotify(data); // Cập nhật state allBooks với dữ liệu từ API\n            } // Cập nhật state allBooks với dữ liệu từ API\n        } catch (error) {\n            console.error('Error updating notify:', error);\n        }\n    };\n\n    console.log(\"dem\", countNotify)\n    // console.log(\"dem\", notifyUser)\n\n    const onChange = (key) => {\n        console.log(key);\n    };\n    const showDrawer = () => {\n        setOpen(true);\n    };\n    const onClose = () => {\n        setOpen(false);\n    };\n    const Toggle = () => {\n        setMenutoggle(!menutoggle)\n    }\n\n    const closeMenu = () => {\n        setMenutoggle(false)\n    }\n\n    const { user } = useContext(AuthContext);\n\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n\n    const handleSearch = (event) => {\n        event.preventDefault();\n        // Gửi yêu cầu tìm kiếm\n        console.log(\"Từ khóa tìm kiếm:\", searchTerm);\n\n        history.push(`/search/${searchTerm}`);\n\n    };\n\n    const handleKeyPress = (event) => {\n        if (event.key === \"Enter\") {\n            handleSearch(event);\n        }\n    };\n    // thong bao \n    useEffect(() => {\n        fetch(fakeDataUrl)\n            .then((res) => res.json())\n            .then((res) => {\n                setInitLoading(false);\n                setData(res.results);\n                setList(res.results);\n            });\n    }, []);\n    const onLoadMore = () => {\n        setLoading(true);\n        setList(\n            data.concat(\n                [...new Array(count)].map(() => ({\n                    loading: true,\n                    name: {},\n                    picture: {},\n                })),\n            ),\n        );\n        fetch(fakeDataUrl)\n            .then((res) => res.json())\n            .then((res) => {\n                const newData = data.concat(res.results);\n                setData(newData);\n                setList(newData);\n                setLoading(false);\n                // Resetting window's offsetTop so as to display react-virtualized demo underfloor.\n                // In real scene, you can using public method of react-virtualized:\n                // https://stackoverflow.com/questions/46700726/how-to-use-public-method-updateposition-of-react-virtualized\n                window.dispatchEvent(new Event('resize'));\n            });\n    };\n    const loadMore =\n        !initLoading && !loading ? (\n            <div\n                style={{\n                    textAlign: 'center',\n                    marginTop: 12,\n                    height: 32,\n                    lineHeight: '32px',\n                }}\n            >\n                <Button onClick={onLoadMore}>loading more</Button>\n            </div>\n        ) : null;\n\n    return (\n        <div className=\"header\">\n            <div className=\"logo-nav\">\n                <Link to=\"/\">\n                    <a href=\"#home\">THƯ VIỆN MTA </a>\n                </Link>\n            </div>\n            <div className=\"nav-right\">\n\n                <div className=\"search-container\">\n                    <input className=\"search-input\" type=\"text\" placeholder=\"Tìm kiếm...\"\n                        value={searchTerm}\n                        onChange={(event) => setSearchTerm(event.target.value)}\n                        onKeyUp={handleKeyPress}\n\n                    />\n\n                </div>\n\n\n                <ul className={menutoggle ? \"nav-options active\" : \"nav-options\"}>\n                    <li className=\"option\" onClick={() => { closeMenu() }}>\n                        <Link to=\"/\">\n                            <a href=\"#home\">Trang chủ</a>\n                        </Link>\n                    </li>\n                    <li className=\"option\" onClick={() => { closeMenu() }}>\n                        <Link to=\"/books\">\n                            <a href=\"#books\">Kho sách</a>\n                        </Link>\n                    </li>\n\n                    {!user ? (\n                        <>\n                            <li className=\"option\" onClick={() => { closeMenu() }}>\n                                <Link to=\"/signin\">\n                                    <a href=\"signin\">Đăng nhập</a>\n                                </Link>\n                            </li>\n\n                            <li className=\"option\" onClick={() => { closeMenu() }}>\n                                <Link to=\"/signup\">\n                                    <a href=\"signup\">Đăng ký</a>\n                                </Link>\n                            </li>\n\n\n                        </>\n                    ) : (\n                        <>\n                            <li className=\"option\" onClick={() => { closeMenu() }}>\n                                <Link to=\"/signin\">\n                                    <a href=\"signin\">Admin</a>\n                                </Link>\n                            </li>\n                            <li className=\"option\" onClick={() => { closeMenu() }}>\n                                <a href=\"#\">\n                                    <Badge count={countNotify}>\n                                        {/* <Avatar shape=\"square\" size=\"large\" /> */}\n                                        <div className=\"bell-icon\">\n                                            <BellOutlined\n                                                style={{\n                                                    fontSize: '25px',\n                                                    color: '#fff',\n                                                    padding: '4px'\n                                                }}\n                                                onClick={showDrawer}\n                                            />\n                                        </div>\n                                    </Badge>\n                                </a>\n                            </li>\n                        </>\n                    )}\n\n                </ul>\n            </div>\n            <div className=\"mobile-menu\" onClick={() => { Toggle() }}>\n                {menutoggle ? (\n                    <ClearIcon className=\"menu-icon\" style={{ fontSize: 40 }} />\n                ) : (\n                    <MenuIcon className=\"menu-icon\" style={{ fontSize: 40 }} />\n                )}\n            </div>\n            {/* <Drawer title=\"Thông báo \" onClose={onClose} open={open}>\n                <List\n                    className=\"demo-loadmore-list\"\n                    loading={initLoading}\n                    itemLayout=\"horizontal\"\n                    loadMore={loadMore}\n                    dataSource={list}\n                    renderItem={(item) => (\n\n                        <List.Item\n                        // actions={[<a key=\"list-loadmore-edit\">edit</a>, <a key=\"list-loadmore-more\">more</a>]}\n                        >\n                            {/* <Skeleton avatar title={false} loading={item.loading} active> */}\n            {/* <List.Item.Meta\n                                // avatar={<Text type=\"success\" >[Get]</Text>}\n                                title={<Collapse\n                                    // accordion\n                                    onChange={onChange}\n                                    className=\"custom-collapse\"\n                                    bordered={false} // Bỏ viền cho Collapse\n                                    style={{ backgroundColor: 'transparent' }}\n                                >\n                                    <Panel\n                                        header={item.name?.last}\n                                        key=\"1\"\n                                    // style={{\n                                    //     fontSize: '18px', // Tăng kích thước của header\n                                    //     fontWeight: 'bold' // Làm đậm cho header\n                                    // }}\n                                    >\n                                        <p\n                                            style={{\n                                                fontSize: '16px', // Tăng kích thước của header\n                                                fontWeight: 'normal' // Làm đậm cho header\n                                            }}>\n                                            con mèo con lallalalalallal hehehe </p>\n\n                                    </Panel>\n                                </Collapse>}\n                            />\n\n                            {/* </Skeleton> */}\n            {/* </List.Item> */}\n\n            {/* )} */}\n            {/* /> */}\n            {/* </Drawer> */}\n            <Drawer title=\"Thông báo\" onClose={onClose} open={open}>\n                <List\n                    className=\"demo-loadmore-list\"\n                    loading={initLoading}\n                    itemLayout=\"horizontal\"\n                    loadMore={loadMore}\n                    // dataSource={notifyStaff} // Sử dụng user.isAdmin để xác định người dùng có phải là admin không\n\n                    dataSource={user && user.user.isAdmin ? notifyStaff : notifyUser} // Sử dụng user.isAdmin để xác định người dùng có phải là admin không\n                    renderItem={(item) => (\n                        <List.Item>\n                            <List.Item.Meta\n                                title={<a onClick={() => handleNotifyClick(item)}>{item.NotifyName}</a>}\n                                description={item.description} // Hiển thị mô tả của thông báo\n                            />\n                        </List.Item>\n                    )}\n                />\n            </Drawer>\n\n        </div >\n\n\n\n\n    )\n}\n\nexport default Header\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookDetails\\BookDetails.js",["463","464"],"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loading from \"../Loader/Loader\";\nimport coverImg from \"../../images/cover_not_found.jpg\";\nimport \"./BookDetails.css\";\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport axios from 'axios'\nimport {useHistory} from \"react-router-dom\"\nimport getUrlImage from \"../../Pages/getURLimage\"\n\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\n\nconst BookDetails = () => {\n  const { id } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [book, setBook] = useState(null);\n  const history  = useHistory();\n  const API_URL = process.env.REACT_APP_API_URL;\n\n\n  useEffect(() => {\n    setLoading(true);\n    const getBookDetails = async () => {\n      try {\n        const response = await axios.get(API_URL + 'api/books/getbook/' + id);\n        const data = response.data;\n        console.log(data);\n\n        if (data) {\n          const { description, bookName, image_url, bookCountAvailable, publisher, author, categories } = data;\n          \n\n          const newBook = {\n            description: description ? description : \"Chưa có mô tả\",\n            bookName: bookName,\n            cover_img: image_url ? image_url : coverImg,\n            publisher: publisher ? publisher : \"\",\n            author: author ? author : \"\",\n            categories: categories,\n            bookCountAvailable: bookCountAvailable\n          };\n          console.log(\"newbook =>\"+newBook);\n          setBook(newBook);\n        } else {\n          setBook(null);\n        }\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    }\n    getBookDetails();\n  }, [id]);\n\n  if (loading) return <Loading />;\n\n  return (\n    <div className=\"books-page\">\n        \n\n        <button type='button' className='addbook-submit' onClick={() => history.push(\"/books\")}>\n          <FaArrowLeft size={22} />\n          <span className='fs-18 fw-6'>Trở lại</span>\n        </button>\n\n        <div className=\"book-card\">\n          <img src={getUrlImage(book?.cover_img)} alt=\"\" ></img>\n\n          <p className=\"bookcard-title\"><b>{book?.bookName}</b></p>\n\n          <p className=\"bookcard-author\"> {book?.author} </p>\n          <p className=\"bookcard-author\">{book?.publisher}</p>\n          <p className=\"bookcard-author\"><b>Sẵn có:</b> {book?.bookCountAvailable}</p>\n          <p className=\"bookcard-description\"><b>Mô tả:</b> <i>{book?.description}</i> </p>\n\n          <div>\n            <div className=\"bookcard-category\">\n              <p>{book?.categories}</p>\n            </div>\n            <div className=\"bookcard-select\">\n              <button>Chọn</button>\n            </div>\n          </div>\n          <div className=\"bookcard-emptybox\"></div>\n        </div>\n      </div>\n  )\n}\n\nexport default BookDetails","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookList\\ListCate.js",["465","466","467"],"import React, { useEffect, useState } from 'react'\nimport './BookList.css'\nimport axios from 'axios'\nimport Loading from \"../Loader/Loader\";\nimport { Link } from 'react-router-dom';\nimport Footer from '../Footer/Footer'\nimport BookApi from \"../../callAPI/BookApi\"\nimport CateController from '../../Controller/CateController';\n\nfunction ListCate() {\n    const API_URL = process.env.REACT_APP_API_URL\n\n    const [listCate, setListCate] = useState([])\n    const [loading, setLoading] = useState(false);\n\n\n    useEffect(() => {\n        setLoading(true)\n        const fetchData = async () => {\n            try {\n                const cates = await CateController.getAllCates();\n                console.log(\"user trans\", cates)\n                setLoading(false)\n                setListCate(cates);\n\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n        fetchData();     // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n\n    if (loading) return <Loading />;\n\n    return (\n        <div className=\"block-page\">\n            <div className=\"books-page\">\n                <div className=\"title\">\n                    <label htmlFor=\"category\">Danh sách thể loại</label><br />\n                </div>\n\n                <div className=\"books\">\n                    {listCate && listCate.map((item) => (\n                        <div className=\"book-card\" key={item._id}>\n                            <Link to={`/category/${item.categoryName}`}>\n                                <p className=\"bookcard-title\"><b>{item.categoryName}</b></p>\n                            </Link>\n                        </div>\n                    ))}\n\n                </div>\n\n            </div>\n\n            <Footer />\n        </div>\n\n\n    )\n}\n\n\nexport default ListCate","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Cart\\Cart.jsx",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddTransaction.js",["468","469","470","471","472","473","474","475","476","477"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Select, DatePicker, Table, Typography, Button, Form, Row, Col, message } from 'antd';\nimport axios from 'axios';\nimport { AuthContext } from '../../../../Context/AuthContext';\nimport moment from 'moment';\nimport Loading from '../../../../Components/Loader/Loader';\nimport TransController from '../../../../Controller/TransactionController';\nimport UserController from '../../../../Controller/UserController';\nimport BookController from '../../../../Controller/bookController';\nimport {\n  Paper,\n  TableContainer,\n  TablePagination\n} from \"@mui/material\"\n// import \"./adtransaction.css\"\n\nconst { Option } = Select;\nconst { Title } = Typography;\n\nfunction AddTransaction() {\n  const API_URL = process.env.REACT_APP_API_URL;\n  const { user } = useContext(AuthContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const [borrowerId, setBorrowerId] = useState('');\n  const [bookIds, setBookIds] = useState([]);\n\n  const [transactionType, setTransactionType] = useState('');\n  const [toDate, setToDate] = useState(null);\n  const [allMembers, setAllMembers] = useState([]);\n  const [allBooks, setAllBooks] = useState([]);\n  const [allTransactions, setAllTransactions] = useState([]);\n  const [fromDate, setFromDate] = useState(null)\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n\n\n\n\n  const transactionTypes = [\n    { value: 'Reserved', text: 'Đặt trước' },\n    { value: 'Issued', text: 'Mượn luôn' },\n  ];\n  // lay danh sach transaction chua xu ly\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let transactions;\n        // if (borrowerId === null) {\n        transactions = await TransController.getAllTrans();\n        // } else {\n        //   transactions = await TransController.getTransByUser(borrowerId);\n        // }\n\n        const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n        setAllTransactions(activeTransactions);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      }\n    };\n    fetchData();     // Gọi fetchData để lấy dữ liệu\n\n  }, []); // useEffect sẽ chỉ chạy một lần sau khi render lần đầu tiên\n  const fetchUserTransactions = async (userId) => {\n    try {\n      const transactions = await TransController.getTransByUser(userId);\n      console.log(\"user trans\", transactions)\n      const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n      setAllTransactions(activeTransactions);\n    } catch (error) {\n      console.error('Error fetching user transactions:', error);\n    }\n  };\n  // lay danh sach nguoi dung khong phai la admin\n  useEffect(() => {\n    const fetchData = async () => {\n\n      try {\n        const allUser = await UserController.getAllUsers();\n        // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n        const Users = allUser.filter(user => user && user.isAdmin !== true);\n        setAllMembers(Users); // Đặt danh sách các giao dịch \"Active\" vào state\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      }\n    };\n\n    fetchData(); // Gọi fetchData để lấy dữ liệu\n\n  }, []);\n  // lấy tất cả cuốn sách \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const allBooks = await BookController.getAllBooks();\n        setAllBooks(allBooks);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      }\n    };\n\n    fetchData(); // Gọi fetchData để lấy dữ liệu\n\n  }, []);\n  const handleBookSelection = selectedBooks => {\n    setBookIds(selectedBooks);\n  };\n  const handleSelectUser = (userId) => {\n    setBorrowerId(userId)\n    fetchUserTransactions(userId);\n  };\n\n\n\n\n  const addTransaction = async (values) => {\n    try {\n      setIsLoading(true);\n\n      // Extracting form values\n      const { borrowerId, bookIds, transactionType, fromDate, toDate } = values;\n\n\n      const transactionData = {\n        books: bookIds,\n        borrowerId: borrowerId,\n        transactionType: transactionType,\n        fromDate: fromDate,\n        toDate: toDate,\n        returnDate: null\n        // isAdmin: user.isAdmin,\n      };\n\n      // Adding transaction\n      await TransController.addTransaction(transactionData);\n      const Transactions = await TransController.getAllTrans();\n\n      // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n      // const activeTransactions = allTransactions.filter(transaction => transaction && transaction.transactionStatus === \"Active\");\n      const activeTransactions = Transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n      console.log(\"Transactions\", Transactions)\n\n      setAllTransactions(activeTransactions);\n      // Alerting success message\n      alert('Tạo phiếu mượn thành công 🎉');\n      //   } else {\n      //     alert('Cuốn sách này đã hết hoặc không phù hợp loại giao dịch');\n      //   }\n      // } else {\n      //   alert('Vui lòng điền đầy đủ thông tin');\n      // }\n    } catch (err) {\n      console.log(err);\n      alert('Đã xảy ra lỗi khi tạo phiếu mượn');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleUpdateTransaction = async (transactionId) => {\n    try {\n      const data = {\n        staff_creat: user.user._id,\n        transactionStatus: \"True\"\n      };\n      // Gọi hàm updateTransaction từ TransController để cập nhật giao dịch\n      const updatedTransaction = await TransController.updateTransaction(transactionId, data);\n      const Transactions = await TransController.getAllTrans();\n\n      // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n      // const activeTransactions = allTransactions.filter(transaction => transaction && transaction.transactionStatus === \"Active\");\n\n      console.log('Transaction updated:', updatedTransaction);\n      alert('cập nhật thành công 🎉');\n      const activeTransactions = Transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n      console.log(\"thanh\", Transactions)\n\n      setAllTransactions(activeTransactions);\n\n      const allBooks = await BookController.getAllBooks();\n      setAllBooks(allBooks);\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n    }\n  };\n\n\n  if (isLoading) return <Loading />;\n\n  return (\n    <div>\n      <Title level={2}>Tạo phiếu mượn sách</Title>\n      {/* Form for adding transaction */}\n      <Form\n        // form={form}\n        onFinish={addTransaction}\n        layout=\"vertical\"\n        style={{ margin: 33, }}\n\n      >\n        <Row gutter={14}>\n          <Col span={11}>\n            <Form.Item\n              label=\"Độc giả\"\n              name=\"borrowerId\"\n              rules={[{ required: true, message: 'Vui lòng chọn độc giả' }]}\n              labelStyle={{ fontSize: '20px' }} // Thêm style cho nhãn\n            >\n              <Select\n                placeholder=\"Chọn độc giả\"\n                onChange={handleSelectUser}\n                style={{ fontSize: '16px' }} // Thêm style cho Select component\n                showSearch  // Thêm tính năng tìm kiếm\n                optionFilterProp=\"children\" // Chỉ định thuộc tính cần tìm kiếm trong các option\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                } // Hàm tìm kiếm tùy chỉnh\n              >\n                {allMembers.map(member => (\n                  <Option key={member._id} value={member._id}>{member.userFullName}</Option>\n                ))}\n              </Select>\n\n\n            </Form.Item>\n            <Form.Item label=\"Tên sách\" name=\"bookIds\" rules={[{ required: true, message: 'Vui lòng chọn sách' }]}>\n              <Select placeholder=\"Chọn sách\" onChange={handleBookSelection}\n                showSearch  // Thêm tính năng tìm kiếm\n                optionFilterProp=\"children\" // Chỉ định thuộc tính cần tìm kiếm trong các option\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }\n              >\n                {allBooks.map(book => (\n                  <Option key={book._id} value={book._id}>{book.bookName} : {book.bookCountAvailable}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item label=\"Loại mượn\" name=\"transactionType\" rules={[{ required: true, message: 'Vui lòng chọn loại mượn' }]}>\n              <Select placeholder=\"Chọn loại mượn\" onChange={setTransactionType}\n                showSearch  // Thêm tính năng tìm kiếm\n                optionFilterProp=\"children\" // Chỉ định thuộc tính cần tìm kiếm trong các option\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }\n              >\n                {transactionTypes.map(type => (\n                  <Option key={type.value} value={type.value}>{type.text}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n\n            <Form.Item label=\"Từ ngày\" name=\"fromDate\" rules={[{ required: true, message: 'Vui lòng chọn từ ngày' }]}>\n              <DatePicker style={{ width: 520 }} placeholder=\"Chọn từ ngày\" onChange={date => setFromDate(date)} />\n            </Form.Item>\n            <Form.Item label=\"Đến ngày\" name=\"toDate\" rules={[{ required: true, message: 'Vui lòng chọn đến ngày' }]}>\n              <DatePicker style={{ width: 520 }} placeholder=\"Chọn đến ngày\" onChange={date => setToDate(date)} />\n            </Form.Item>\n          </Col>\n\n        </Row>\n\n        <Form.Item\n          style={{\n            paddingTop: 24,\n          }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>Tạo</Button>\n        </Form.Item>\n      </Form>\n\n      {/* Table showing recent transactions */}\n\n      <p className=\"dashboard-option-title\">Chờ xử lý</p>\n\n      {allTransactions.length > 0 ? (\n        <>\n          <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n            <table className=\"admindashboard-table\">\n              <thead>\n                <tr>\n                  <th>Tên sách</th>\n                  <th>Người mượn</th>\n                  <th>Từ ngày</th>\n                  <th>Đến ngày</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {allTransactions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((transaction, index) => (\n                  <tr key={index}>\n                    <td>{transaction.books || \"N/A\"}</td>\n                    <td>{transaction.userName || \"N/A\"}</td>\n                    <td>{transaction.fromDate || \"N/A\"}</td>\n                    <td>{transaction.toDate || \"N/A\"}</td>\n                    <td>\n                      <Button type=\"primary\" onClick={() => handleUpdateTransaction(transaction._id)}>\n                        Cho mượn\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </TableContainer>\n\n          <TablePagination\n            onRowsPerPageChange={(e) => {\n              setRowsPerPage(parseInt(e.target.value, 10))\n              setPage(0)\n            }}\n            component=\"div\"\n            count={allTransactions.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={(e, newPage) => setPage(newPage)}\n            style={{ maxWidth: '1160px' }}\n          />\n        </>\n      ) : (\n        <table className=\"admindashboard-table\">\n          <thead>\n\n            <tr>\n              <th>Tên sách</th>\n              <th>Người mượn</th>\n              <th>Từ ngày</th>\n              <th>Đến ngày</th>\n            </tr>\n\n          </thead>\n          <tbody>\n            <tr>\n              <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n            </tr>\n          </tbody>\n        </table>\n      )}\n\n    </div>\n\n  );\n}\n\nexport default AddTransaction;\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\ManagerBook.js",["478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502"],"import React, { useEffect, useContext, useState } from 'react';\n\nimport \"../AdminDashboard.css\";\nimport axios from 'axios';\nimport { AuthContext } from '../../../../Context/AuthContext';\n\nimport {\n\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Card,\n    CardContent,\n    CardActions,\n    Typography,\n    TablePagination\n} from \"@mui/material\"\nimport { tableCellClasses } from '@mui/material/TableCell';\n\nimport getUrlImage from \"../../../../Pages/getURLimage\"\nimport Loading from \"../../../../Components/Loader/Loader\";\nimport bookController from '../../../../Controller/bookController';\nimport CateController from '../../../../Controller/CateController';\n\nimport { styled } from '@mui/material/styles';\nimport {\n    Modal,\n    Cascader,\n    DatePicker,\n    Form,\n    Input,\n    InputNumber,\n    Mentions,\n    Select,\n    TreeSelect,\n    Row,\n    Col, Button,\n    Popconfirm,\n    Image\n} from 'antd';\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 20,\n\n    },\n}));\n\n\nfunction AddBook() {\n    const { user } = useContext(AuthContext);\n    const API_URL = process.env.REACT_APP_API_URL\n    const [loading, setLoading] = useState(false);\n    const [form] = Form.useForm();\n    const [books, setBooks] = useState([]);\n    const [page, setPage] = useState(0)\n    const [rowsPerPage, setRowsPerPage] = useState(10)\n    const [openModal, setOpenModal] = useState(false)\n    const [activeBookID, setActiveBookID] = useState(null)\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalOpenDelete, setIsModalOpenDelete] = useState(false);\n    const [bookName, setBookName] = useState(\"\");\n    const [author, setAuthor] = useState(\"\");\n    const [bookCount, setBookCount] = useState(null);\n    const [language, setLanguage] = useState(\"vi\");\n    const [publisher, setPublisher] = useState(\"\");\n    const [allCategories, setAllCatagories] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [categoryName, setCategoryName] = useState('');\n    const [description, setDescription] = useState(\"\");\n    const [book, setBook] = useState(null);\n    const [imageURL, setImageURL] = useState(\"\");\n\n    const [file, setFile] = useState();\n    // function handleChange(e) {\n    //     console.log(e.target.files);\n    //     setFile(URL.createObjectURL(e.target.files[0]));\n    // }\n    function handleChange(e) {\n        const selectedFile = e.target.files[0];\n        if (selectedFile) {\n            const imageUrl = URL.createObjectURL(selectedFile);\n            setFile(selectedFile);\n            setImageURL(imageUrl);\n        }\n    }\n\n    const handlePublisherChange = (e) => {\n        setPublisher(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handledescriptionChange = (e) => {\n        setDescription(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handlebookNameChange = (e) => {\n        setBookName(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handleAuthorChange = (e) => {\n        setAuthor(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handleBookCountChange = (e) => {\n        setBookCount(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handleOk = () => {\n        setIsModalOpen(false);\n        setIsModalOpenDelete(false)\n    };\n    const handleCancel = () => {\n        setIsModalOpen(false);\n        setIsModalOpenDelete(false)\n\n    };\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const allCates = await CateController.getAllCates();\n                setAllCatagories(allCates);\n                console.log(\"tanh\", allCates);\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n\n        fetchData(); // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n    // const updateBook = async (book) => {\n    //     try {\n    //         setIsLoading(true);\n    //         // Gọi hàm updateTransaction từ TransController để cập nhật giao dịch\n    // const updatedTransaction = await bookController.updateBook(book._id, book);\n    // const books = await bookController.getAllBooks();\n\n    //         // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n    //         // const activeTransactions = allTransactions.filter(transaction => transaction && transaction.transactionStatus === \"Active\");\n    //         setBooks(books)\n    //         console.log('Transaction updated:', updatedTransaction);\n    //         alert('cập nhật thành công 🎉');\n\n    //     } catch (error) {\n    //         console.error('Error updating transaction:', error);\n    //     } finally {\n    //         setIsLoading(false);\n    //     }\n    // };\n    // const updateBook = async (book) => {\n    //     try {\n    //         setIsLoading(true);\n    //         console.log(\"book update 123\", book)\n    //         console.log(\"book update 123\", file)\n\n    //         const formData = new FormData();\n    //         formData.append('image', file);\n    //         formData.append('language', book.language);\n    //         formData.append('publisher', book.publisher);\n    //         formData.append('description', book.description);\n    //         formData.append('bookStatus', book.bookStatus);\n    //         formData.append('categories', book.categories);\n    //         formData.append('bookName', book.bookName);\n    //         formData.append('author', book.author);\n    //         formData.append('bookCountAvailable', book.bookCountAvailable);\n    //         formData.append('bookCount', book.bookCount);\n    //         formData.append('staff_edit', user.user._id);\n    //         alert('Cập nhật thành công 🎉');\n    //         const updatedTransaction = await bookController.updateBook(book._id,formData);\n    //         const updatedBooks = await bookController.getAllBooks();\n    //         setBooks(updatedBooks);\n    //     } catch (error) {\n    //         console.error('Error updating book:', error);\n    //     } finally {\n    //         setIsLoading(false);\n    //     }\n    // };\n    const updateBook = async (book) => {\n        try {\n            setIsLoading(true);\n            const formData = new FormData();\n            formData.append('image', file);\n            formData.append('language', book.language);\n            formData.append('publisher', book.publisher);\n            formData.append('description', book.description);\n            formData.append('bookStatus', book.bookStatus);\n            formData.append('categories', book.categories);\n            formData.append('bookName', book.bookName);\n            formData.append('author', book.author);\n            formData.append('bookCountAvailable', book.bookCountAvailable);\n            formData.append('bookCount', book.bookCount);\n            formData.append('staff_edit', user.user._id);\n            // const response = await bookController.updateBook(book._id,formData);\n            // Use fetch to send a PUT request\n            const response = await fetch(`http://localhost:5000/api/books/updatebook/${book._id}`, {\n                method: 'PUT',\n                body: formData\n            });\n\n\n            // Assuming the update is successful, notify the user\n            alert('Cập nhật thành công 🎉');\n            const books = await bookController.getAllBooks();\n            //         const updatedBooks = await bookController.getAllBooks();\n            setBooks(books)\n            // Assuming the server returns the updated book data, you might not need these lines\n            // const updatedTransaction = await response.json();\n            // const updatedBooks = await bookController.getAllBooks();\n            // setBooks(updatedBooks);\n        } catch (error) {\n            console.error('Error updating book:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n\n    const handleOkModal = () => {\n        const formData = form.getFieldsValue();\n        console.log(\"book update\", formData)\n        updateBook(formData)\n        setIsModalOpen(false);\n    };\n    const confirm = async (id) => {\n        try {\n            const deletebook = await bookController.deleteBook(id);\n            const books = await bookController.getAllBooks();\n            setBooks(books)\n            alert('xóa thành côngcông thành công 🎉');\n        }\n        catch (error) {\n            console.error('Error updating transaction:', error);\n        } finally {\n            setIsLoading(false);\n        }\n        // console.log(e);\n        // message.success('Click on Yes');\n    };\n    const cancel = (e) => {\n        console.log(e);\n        // message.error('Click on No');\n    };\n    const handledeleteBook = async (id) => {\n        try {\n\n            // Gọi hàm updateTransaction từ TransController để cập nhật giao dịch\n            alert(' Bạn có thực sự muốn xóa ');\n            var xoa = confirm('Bạn có thực sự muốn xóa?');\n            const deletebook = await bookController.deleteBook(id);\n            const books = await bookController.getAllBooks();\n\n            // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n            // const activeTransactions = allTransactions.filter(transaction => transaction && transaction.transactionStatus === \"Active\");\n            setBooks(books)\n            alert('xóa thành côngcông thành công 🎉');\n\n        } catch (error) {\n            console.error('Error updating transaction:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleBorrowClick = (book) => {\n        setBook(book);\n        setIsModalOpen(true);\n    };\n\n    const showEditModal = (record) => {\n\n        form.setFieldsValue({\n            _id: record._id,\n            language: record.language,\n            image_url: record.image_url,\n            publisher: record.publisher,\n            description: record.description,\n            categories: record.categories, // Kiểm tra xem tên trường có đúng không\n            bookName: record.bookName,\n            author: record.author,\n            bookCountAvailable: record.bookCountAvailable,\n            bookCount: record.bookCount\n        });\n        if (record.image_url) {\n            setImageURL(record.image_url);\n        }\n        setIsModalOpen(true); // Hiển thị Modal\n    };\n    const fetchBooks = async () => {\n        const response = await axios.get(API_URL + \"api/books/allbooks\")\n        setBooks(response.data);\n        setLoading(false);\n        console.log(\"book\", response.data)\n\n    }\n    useEffect(() => {\n        setLoading(true)\n        fetchBooks();\n\n    }, [])\n\n    if (loading) return <Loading />;\n\n    return (\n        <div>\n            <div>\n                <p className=\"dashboard-option-title\">Tất cả đầu sách</p>\n                <div className=\"dashboard-title-line\"></div>\n            </div>\n            <>\n                {books.length > 0 ? (\n                    <>\n                        <div className=\"tableContainer\">\n                            <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n                                <Table stickyHeader>\n                                    <TableHead>\n                                        <TableRow>\n                                            <StyledTableCell>Ảnh bìa</StyledTableCell>\n                                            <StyledTableCell>Tên sách</StyledTableCell>\n                                            <StyledTableCell>Thể loại</StyledTableCell>\n                                            <StyledTableCell>Số lượng</StyledTableCell>\n                                            <StyledTableCell>Hành động</StyledTableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {(rowsPerPage > 0\n                                            ? books.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            : books\n                                        )\n                                            .map((book) => (\n                                                <TableRow key={book.isbn}>\n                                                    <TableCell >\n                                                        <Image width={50} className=\"image-table\" src={book.image_url} alt=\"\" />\n\n                                                    </TableCell>\n                                                    <TableCell align=\"right\" >{book.bookName}</TableCell>\n                                                    <TableCell>{book.categories}</TableCell>\n                                                    <TableCell align=\"right\">{book.bookCountAvailable}</TableCell>\n                                                    <TableCell align=\"right\" >\n                                                        <div className=\"actionsContainer\">\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                // component={RouterLink}\n                                                                size=\"small\"\n                                                                onClick={() => showEditModal(book)}\n                                                            >\n                                                                Xem\n                                                            </Button>\n                                                            {user.user.isAdmin && (\n                                                                <>\n                                                                    <Button\n                                                                        variant=\"contained\"\n                                                                        type=\"primary\"\n                                                                        // component={RouterLink}\n                                                                        size=\"small\"\n                                                                        to={`/admin/books/${book._id}/edit`}\n                                                                        onClick={() => handleBorrowClick(book)}\n                                                                    >\n                                                                        Sửa\n                                                                    </Button>\n                                                                    <Popconfirm\n                                                                        title=\"Xóa sách\"\n                                                                        description=\"Bạn thực sự muốn xóa!!!\"\n                                                                        onConfirm={() => confirm(book._id)}\n                                                                        onCancel={cancel}\n                                                                        okText=\"Yes\"\n                                                                        cancelText=\"No\"\n                                                                    >\n                                                                        <Button variant=\"contained\"\n                                                                            type=\"primary\"\n                                                                            // component={RouterLink}\n                                                                            size=\"small\" danger>Xóa</Button>\n                                                                    </Popconfirm>\n                                                                </>\n                                                            )}\n                                                        </div>\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                                onRowsPerPageChange={(e) => {\n                                    setRowsPerPage(parseInt(e.target.value, 10))\n                                    setPage(0)\n                                }}\n                                component=\"div\"\n                                count={books.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onPageChange={(e, newPage) => setPage(newPage)}\n                                style={{ maxWidth: '1160px' }}\n                            />\n\n                        </div>\n                    </>\n                ) : (\n                    <Typography variant=\"h5\">No books found!</Typography>\n                )}\n\n\n            </>\n            <Modal title=\"Mượn sách\"\n                open={isModalOpen}\n                onOk={handleOkModal}\n                onCancel={handleCancel}\n                width={1100}\n                footer={[\n                    <Button key=\"huy\" onClick={handleCancel}>\n                        Hủy\n                    </Button>,\n                    <Button key=\"sửa\" type=\"primary\" onClick={handleOkModal}>\n                        Sửa\n                    </Button>,\n\n\n                ]}\n            >\n                <Form\n                    form={form}\n                    name=\"addbook-form\"\n                    // onFinish={addBook}\n                    // labelCol={{ span: 8 }}\n                    // wrapperCol={{ span: 16 }}\n                    // onFinish={addTransaction}\n                    layout=\"vertical\"\n                    style={{ margin: 33, }}\n                >\n                    <Row gutter={16}>\n                        <Col span={8}>\n                            <Form.Item\n                                label=\"id\"\n                                name=\"_id\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên sách!' }]}\n                            >\n                                <Input onChange={handlebookNameChange} readOnly />\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Tên sách\"\n                                name=\"bookName\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên sách!' }]}\n                            >\n                                <Input.TextArea onChange={handlebookNameChange} rows={2} />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Tên tác giả\"\n                                name=\"author\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}\n\n                            >\n                                <Input value={author} onChange={handleAuthorChange} />\n                            </Form.Item>\n                            <Form.Item label=\"Ngôn ngữ\" name=\"language\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n\n                                <Select\n                                    placeholder=\"Chọn ngôn ngữ\"\n                                    onChange={setLanguage}\n                                    style={{ fontSize: '16px' }}\n                                    showSearch\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                >\n                                    <Select.Option value=\"Vi\">Tiếng Việt</Select.Option>\n                                    <Select.Option value=\"En\">Tiếng Anh</Select.Option>\n                                </Select>\n                            </Form.Item>\n                            <Form.Item label=\"Nhà xuất bản\" name=\"publisher\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n                                <Input value={publisher} onChange={handlePublisherChange} />\n                            </Form.Item>\n\n\n                        </Col>\n\n                        <Col span={8}>\n                            <Form.Item\n                                name=\"categories\"\n                                label=\"Chọn thể loại\"\n                                rules={[{ required: true, message: 'Vui lòng chọn độc giả!' }]}\n                            >\n                                <Select\n                                    placeholder=\"Chọn thể loại\"\n                                    onChange={setCategoryName}\n                                    style={{ fontSize: '16px' }}\n                                    showSearch\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                >\n                                    {allCategories.map(category => (\n                                        <Select.Option key={category.categoryName} value={category.categoryName}>\n                                            {category.categoryName}\n                                        </Select.Option>\n                                    ))}\n                                </Select>\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Tổng sách sẵn có\"\n                                name=\"bookCount\"\n                                rules={[{ required: true, message: 'Vui lòng nhập số lượng sách sẵn có!' }]}\n                            >\n                                <Input value={bookCount} onChange={handleBookCountChange} type=\"number\" />\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Số lượng sách sẵn có\"\n                                name=\"bookCountAvailable\"\n                                rules={[{ required: true, message: 'Vui lòng nhập số lượng sách sẵn có!' }]}\n                            >\n                                <Input type=\"number\" />\n                            </Form.Item>\n\n\n\n\n\n\n                            <Form.Item label=\"Tiêu đề thay thế\" name=\"description\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n\n                                <Input.TextArea value={description} onChange={handledescriptionChange} rows={5} />\n                            </Form.Item>\n\n\n\n                        </Col>\n                        <Col span={8}>\n\n\n                            <Form.Item\n                                label=\"Ảnh bìa\"\n                                name=\"image\"\n                            >\n                                <input type=\"file\" onChange={handleChange} />\n                                {imageURL && (\n                                    // setImageURL=image_url\n                                    <img\n                                        style={{\n                                            width: '200px',\n                                            height: '200px'\n                                        }}\n                                        src={imageURL}\n                                        alt=\"Ảnh bìa\"\n                                    />\n                                )}\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n                    <Form.Item\n                        style={{\n                            paddingTop: 24,\n                        }}\n                    >\n                        {/* <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                            Thêm mới\n                        </Button> */}\n                    </Form.Item>\n\n\n\n                </Form>\n            </Modal>\n            <Modal title=\"Xóa sách\" open={isModalOpenDelete} onOk={handleOkModal} onCancel={handleCancel}>\n                <Form\n                    // form={form}\n\n                    layout=\"vertical\"\n                    style={{ margin: 33, }}\n                >\n                    <p>Bạn thực sự muốn xóa !!!!!</p>\n\n                </Form>\n            </Modal>\n\n        </div>\n\n    )\n}\n\nexport default AddBook;","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddBook.js",["503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526"],"import React, { useEffect, useContext, useState } from 'react';\n\n// import \"../AdminDashboard.css\";\nimport axios from 'axios';\nimport { AuthContext } from '../../../../Context/AuthContext';\nimport { Dropdown } from 'semantic-ui-react';\nimport { UploadOutlined, PlusOutlined } from '@ant-design/icons';\nimport CateController from '../../../../Controller/CateController';\nimport bookController from '../../../../Controller/bookController';\n\nimport Loading from '../../../../Components/Loader/Loader';\n\nimport {\n    ref,\n    uploadBytes,\n    getDownloadURL,\n    listAll\n} from \"firebase/storage\";\nimport { storage } from \"../../../../firebase\";\nimport { Select, Typography, Button, Form, Row, Col, Modal, Upload, Input } from 'antd';\nconst { Option } = Select;\nconst { Title } = Typography;\nconst getBase64 = (file) =>\n    new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = (error) => reject(error);\n    });\nfunction AddBook() {\n    const API_URL = process.env.REACT_APP_API_URL\n    const { user } = useContext(AuthContext);\n\n    const [recentAddedBooks, setRecentAddedBooks] = useState([]);\n    const [bookName, setBookName] = useState(\"\");\n    const [author, setAuthor] = useState(\"\");\n    const [bookCount, setBookCount] = useState(null);\n    const [language, setLanguage] = useState(\"vi\");\n    const [publisher, setPublisher] = useState(\"\");\n    const [allCategories, setAllCatagories] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [alternateTitle, setAlternateTitle] = useState(\"\");\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageURL, setImageURL] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    // Khởi tạo state cho biến publisher và hàm setPublisher để cập nhật giá trị\n    const [file, setFile] = useState();\n    // function handleChange(e) {\n    //     console.log(e.target.files);\n    //     setFile(URL.createObjectURL(e.target.files[0]));\n    // }\n    function handleChange(e) {\n        const selectedFile = e.target.files[0];\n        if (selectedFile) {\n            const imageUrl = URL.createObjectURL(selectedFile);\n            setFile(selectedFile);\n            setImageURL(imageUrl);\n        }\n    }\n\n    const handlePublisherChange = (e) => {\n        setPublisher(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handledescriptionChange = (e) => {\n        setDescription(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handlebookNameChange = (e) => {\n        setBookName(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handleAuthorChange = (e) => {\n        setAuthor(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handleBookCountChange = (e) => {\n        setBookCount(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n\n\n\n\n    const [openModal, setOpenModal] = useState(false);\n\n    const [categoryName, setCategoryName] = useState('');\n\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [form] = Form.useForm();\n    const onFinish = (values) => {\n        setIsLoading(true);\n        // Gửi dữ liệu đi\n        console.log('Received values:', values);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const allCates = await CateController.getAllCates();\n                setAllCatagories(allCates);\n                console.log(\"tanh\", allCates);\n\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n\n        fetchData(); // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n\n    useEffect(() => {\n        console.log(imageUpload);\n\n    }, [imageUpload])\n\n    const handleImageUpload = (info) => {\n        const { file } = info;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            setSelectedImage(e.target.result);\n        };\n\n        if (file) {\n            reader.readAsDataURL(file);\n        }\n    };\n\n\n    useEffect(() => {\n        const getAllBookks = async () => {\n            const response = await axios.get(API_URL + \"api/books/allbooks\");\n            setRecentAddedBooks(response.data.slice(0, 5));\n        }\n\n        getAllBookks();\n    }, [API_URL]);\n    // const handleSelectCate = () => {\n    //     setCategoryName(userId)\n    //     // fetchUserTransactions(userId);\n    // };\n    console.log(\"id\", user.user._id)\n    const addBook = async (values) => {\n        try {\n            setIsLoading(true);\n\n\n            // Extracting form values\n            const {\n                language,\n                publisher,\n                description,\n                categoryName,\n                bookName,\n                author,\n                bookCount\n            } = values;\n            const formData = new FormData();\n            console.log(\"anh\", formData)\n            formData.append('image', file);\n            formData.append('language', language);\n            formData.append('publisher', publisher);\n            formData.append('description', description);\n            formData.append('categories', categoryName);\n            formData.append('bookName', bookName);\n            formData.append('author', author);\n            formData.append('bookCountAvailable', bookCount);\n            formData.append('bookCount', bookCount);\n            formData.append('staff_creat', user.user._id);\n\n\n\n\n            // Create a book object\n            console.log('add book', formData)\n            // Adding transaction\n            // await bookController.addBook(book); // Sử dụng await để đợi hàm hoàn thành\n            const response = await fetch('http://localhost:5000/api/books/addbook', {\n                method: 'POST',\n                body: formData\n            });\n            console.log('add book', response)\n\n            const data = await response.json();\n            console.log('add book', data)\n            // const imagePath = data.imagePath;\n            // Alerting success message\n            alert('Thêm sách thành công 🎉');\n        } catch (err) {\n            console.log(\"loi j\", err);\n            alert('Đã xảy ra lỗi khi tạo book');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n    if (isLoading) return <Loading />;\n\n    return (\n        <div>\n            <p className=\"dashboard-option-title\">Thêm một đầu sách mới</p>\n            <div className=\"dashboard-title-line\"></div>\n\n            <Form\n                form={form}\n                name=\"addbook-form\"\n                onFinish={addBook}\n                // labelCol={{ span: 8 }}\n                // wrapperCol={{ span: 16 }}\n                // onFinish={addTransaction}\n                layout=\"vertical\"\n                style={{ margin: 33, }}\n            >\n                <Row gutter={16}>\n                    <Col span={9}>\n                        <Form.Item\n                            label=\"Tên sách\"\n                            name=\"bookName\"\n                            rules={[{ required: true, message: 'Vui lòng nhập tên sách!' }]}\n                        >\n                            <Input value={bookName} onChange={handlebookNameChange} />\n                        </Form.Item>\n\n\n\n                        <Form.Item\n                            label=\"Tên tác giả\"\n                            name=\"author\"\n                            rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}\n                        >\n                            <Input value={author} onChange={handleAuthorChange} />\n                        </Form.Item>\n                        <Form.Item label=\"Ngôn ngữ\" name=\"language\"\n                            rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n                            <Select\n                                placeholder=\"Chọn ngôn ngữ\"\n                                onChange={setLanguage}\n                                style={{ fontSize: '16px' }}\n                                showSearch\n                                optionFilterProp=\"children\"\n                                filterOption={(input, option) =>\n                                    option.children && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                }\n                            >\n                                <Select.Option value=\"Vi\">Tiếng Việt</Select.Option>\n                                <Select.Option value=\"En\">Tiếng Anh</Select.Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item label=\"Nhà xuất bản\" name=\"publisher\"\n                            rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n\n                            <Input value={publisher} onChange={handlePublisherChange} />\n                        </Form.Item>\n\n                    </Col>\n                    <Col span={9}>\n\n                        <Form.Item\n                            label=\"Số lượng sách sẵn có\"\n                            name=\"bookCount\"\n                            rules={[{ required: true, message: 'Vui lòng nhập số lượng sách sẵn có!' }]}\n                        >\n                            <Input value={bookCount} onChange={handleBookCountChange} type=\"number\" />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"categoryName\"\n                            label=\"Chọn thể loại\"\n                            rules={[{ required: true, message: 'Vui lòng chọn độc giả!' }]}\n                        >\n                            <Select\n                                placeholder=\"Chọn thể loại\"\n                                onChange={setCategoryName}\n                                style={{ fontSize: '16px' }}\n                                showSearch\n                                optionFilterProp=\"children\"\n                                filterOption={(input, option) =>\n                                    option.children && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                }\n                            >\n                                {allCategories.map(category => (\n                                    <Select.Option key={category.categoryName} value={category.categoryName}>\n                                        {category.categoryName}\n                                    </Select.Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n\n\n\n\n                        <Form.Item label=\"Mô tả\" name=\"description\"\n                            rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n                            <Input.TextArea value={description} onChange={handledescriptionChange} rows={4} />\n                        </Form.Item>\n\n\n\n                    </Col>\n                    <Col span={6}>\n\n\n                        <Form.Item\n                            label=\"Ảnh bìa\"\n                            name=\"image\"\n                        >\n                            <input type=\"file\" onChange={handleChange} />\n                            {imageURL && (\n                                <img\n                                    style={{\n                                        width: '200px',\n                                        height: '200px'\n                                    }}\n                                    src={imageURL}\n                                    alt=\"Ảnh bìa\"\n                                />\n                            )}\n                        </Form.Item>\n\n\n\n\n                    </Col>\n                </Row>\n                <Form.Item\n                    style={{\n                        paddingTop: 24,\n                    }}\n                >\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                        Thêm mới\n                    </Button>\n                </Form.Item>\n\n\n\n            </Form>\n\n            <div>\n                {/* <Modal open={openModal} onClose={(e) => setOpenModal(false)}>\n                    <Card className=\"conf_modal\">\n                        <CardContent>\n                            <h2>Thêm thể loại</h2>\n                        </CardContent>\n                        <CardActions className=\"conf_modal_actions\">\n\n                            <TextField\n                                label=\"Tên thể loại\"\n                                value={categoryName}\n                                onChange={(e) => setCategoryName(e.target.value)}\n                                fullWidth\n                            />\n\n                        </CardActions>\n                        <div className=\"button-modal\">\n                            <Button className=\"button-modal\" variant=\"contained\" color=\"error\" onClick={() => setOpenModal(false)}>\n                                Hủy bỏ\n                            </Button>\n                            <Button className=\"button-modal\" variant=\"contained\" color=\"success\" onClick={addCate}>\n                                Lưu\n                            </Button>\n                        </div>\n                    </Card>\n                </Modal> */}\n            </div>\n\n            <div>\n                <p className=\"dashboard-option-title\">Sách mới thêm gần đây</p>\n                <div className=\"dashboard-title-line\"></div>\n                <table className='admindashboard-table'>\n                    <tr>\n                        <th>STT</th>\n                        <th>Tên sách</th>\n                        <th>Ngày thêm</th>\n                    </tr>\n                    {\n                        recentAddedBooks.map((book, index) => {\n                            return (\n                                <tr key={index}>\n                                    <td>{index + 1}</td>\n                                    <td>{book.bookName}</td>\n                                    <td>{book.createdAt}</td>\n                                </tr>\n                            )\n                        })\n                    }\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default AddBook;","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddMember.js",["527","528"],"import React, { useEffect, useState } from 'react';\nimport { Form, Input, Button, DatePicker, Select, message, Row, Col } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\n\nimport axios from \"axios\";\nimport moment from 'moment';\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst { Option } = Select;\n\nfunction AddMember() {\n    const API_URL = process.env.REACT_APP_API_URL;\n    const [isLoading, setIsLoading] = useState(false);\n    const [form] = Form.useForm();\n    const [recentAddedMembers, setRecentAddedMembers] = useState([]);\n    const [userType, setUserType] = useState(null);\n    const [gender, setGender] = useState(null);\n\n    const onFinish = async (values) => {\n        setIsLoading(true);\n        const userData = { ...values, dob: moment(values.dob).format(\"MM/DD/YYYY\") };\n\n        try {\n            const response = await axios.post(API_URL + \"api/auth/register\", userData);\n            if (recentAddedMembers.length >= 5) {\n                recentAddedMembers.splice(-1);\n            }\n            setRecentAddedMembers([response.data, ...recentAddedMembers]);\n            form.resetFields();\n            message.success(\"Thêm thành viên thành công!\");\n        } catch (error) {\n            console.log(error);\n            message.error(\"Thêm thành viên thất bại!\");\n        }\n\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        const getMembers = async () => {\n            try {\n                const response = await axios.get(API_URL + \"api/users/allmembers\");\n                const recentMembers = response.data.slice(0, 5);\n                setRecentAddedMembers(recentMembers);\n            } catch (err) {\n                console.log(err);\n            }\n        };\n\n        getMembers();\n    }, [API_URL]);\n\n    return (\n        <div>\n            <p className=\"dashboard-option-title\">Thêm người dùng</p>\n            <div className=\"dashboard-title-line\"></div>\n            <Form form={form} onFinish={onFinish} layout=\"vertical\"\n                style={{ margin: 33, }}\n            \n                >\n                <Row gutter={16}>\n                    <Col span={8}>\n                        <Form.Item name=\"userType\" label=\"User Type\" rules={[{ required: true, message: 'Please select user type!' }]}>\n                            <Select placeholder='User Type' fluid selection onChange={(value) => setUserType(value)}>\n                                {/* Render options */}\n                            </Select>\n                        </Form.Item>\n\n                        <Form.Item name=\"userFullName\" label=\"Họ và tên\" rules={[{ required: true, message: 'Please enter full name!' }]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item name={userType === \"Student\" ? \"admissionId\" : \"employeeId\"} label=\"Mã thẻ\" rules={[{ required: true, message: 'Please enter ID!' }]}>\n                            <Input />\n                        </Form.Item>\n                    </Col>\n                    <Col span={8}>\n                        <Form.Item name=\"mobileNumber\" label=\"Số điện thoại\" rules={[{ required: true, message: 'Please enter mobile number!' }]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item name=\"gender\" label=\"Giới tính\" rules={[{ required: true, message: 'Please select gender!' }]}>\n                            <Select placeholder='User Type' fluid selection value={gender} onChange={(value) => setGender(value)}>\n                                {/* Render options */}\n                            </Select>\n                        </Form.Item>\n\n                        <Form.Item name=\"dob\" label=\"Ngày sinh\" rules={[{ required: true, message: 'Please select date of birth!' }]}>\n                            <DatePicker placeholderText=\"dd/MM/YYYY\" format=\"DD/MM/YYYY\" />\n                        </Form.Item>\n                    </Col>\n                    <Col span={8}>\n                        <Form.Item name=\"address\" label=\"Địa chỉ\" rules={[{ required: true, message: 'Please enter address!' }]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item name=\"email\" label=\"Email\" rules={[{ required: true, message: 'Please enter email!', type: 'email' }]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item name=\"password\" label=\"Mật khẩu\" rules={[{ required: true, message: 'Please enter password!' }]}>\n                            <Input.Password />\n                        </Form.Item>\n                    </Col>\n\n                </Row>\n\n                <Form.Item\n                    style={{\n                        paddingTop: 24,\n                    }}\n                >\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                        XÁC NHẬN\n                    </Button>\n                </Form.Item>\n            </Form>\n\n            <p className=\"dashboard-option-title\">Mới thêm gần đây</p>\n            <div className=\"dashboard-title-line\"></div>\n            <table className='admindashboard-table'>\n                <tr>\n                    <th>STT</th>\n                    <th>Loại tài khoản</th>\n                    <th>Mã tài khoản</th>\n                    <th>Họ và tên</th>\n                </tr>\n                {\n                    recentAddedMembers.map((member, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{member.userType}</td>\n                                <td>{member.userType === \"Student\" ? member.admissionId : member.employeeId}</td>\n                                <td>{member.userFullName}</td>\n                            </tr>\n                        )\n                    })\n                }\n            </table>\n        </div>\n    );\n}\n\nexport default AddMember;\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\GetMember.js",["529","530","531","532","533","534","535","536","537","538","539","540","541","542"],"import React, { useEffect, useState } from 'react'\nimport \"../AdminDashboard.css\"\nimport axios from \"axios\"\nimport { Dropdown } from 'semantic-ui-react'\nimport '../../Member/MemberDashboard.css'\nimport TransController from '../../../../Controller/TransactionController';\nimport UserController from '../../../../Controller/UserController';\nimport BookController from '../../../../Controller/bookController';\nimport moment from \"moment\"\nimport {\n    Paper,\n    TableContainer,\n    TablePagination\n} from \"@mui/material\"\nimport { Select, DatePicker, Table, Typography, Button, Form, Row, Col, message, Space, Modal, Input } from 'antd';\nconst { Option } = Select;\n\nfunction GetMember() {\n\n    const API_URL = process.env.REACT_APP_API_URL\n\n    const [allMembersOptions, setAllMembersOptions] = useState([])\n    const [memberId, setMemberId] = useState(null)\n    const [memberDetails, setMemberDetails] = useState(null)\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(7);\n    const [allUsers, setAllUsers] = useState([]);\n    const [allTransactions, setAllTransactions] = useState([])\n    const [allTransactionsTrue, setAllTransactionsTrue] = useState([])\n    const [allTransactionsFalse, setAllTransactionsFalse] = useState([])\n    const [openModal, setOpenModal] = useState(false)\n    const [activeBookID, setActiveBookID] = useState(null)\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalOpenDelete, setIsModalOpenDelete] = useState(false);\n    const handleOk = () => {\n        setIsModalOpen(false);\n        setIsModalOpenDelete(false)\n    };\n    const handleCancel = () => {\n        setIsModalOpen(false);\n        setIsModalOpenDelete(false)\n\n    };\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const transactions = await TransController.getTransByUser(memberDetails._id);\n                console.log(\"user trans\", transactions)\n                const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n                setAllTransactions(activeTransactions);\n                const TrueTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"True\");\n                setAllTransactionsTrue(TrueTransactions);\n                const falseTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"False\");\n                setAllTransactionsFalse(falseTransactions);\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n        fetchData();     // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const allUser = await UserController.getAllUsers();\n                // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n                const Users = allUser.filter(user => user && user.isAdmin !== true);\n                setAllUsers(Users);\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n        fetchData();     // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n    //Fetch Members\n    useEffect(() => {\n        const getMembers = async () => {\n            try {\n                const response = await axios.get(API_URL + \"api/users/allmembers\")\n                setAllMembersOptions(response.data.map((member) => (\n                    { value: `${member?._id}`, text: `${member?.userType === \"Student\" ? `${member?.userFullName}[${member?.admissionId}]` : `${member?.userFullName}[${member?.employeeId}]`}` }\n                )))\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        getMembers()\n    }, [API_URL])\n\n\n    useEffect(() => {\n        const getMemberDetails = async () => {\n            if (memberId !== null) {\n                try {\n                    const response = await axios.get(API_URL + \"api/users/getuser/\" + memberId)\n                    setMemberDetails(response.data)\n                }\n                catch (err) {\n                    console.log(\"Error in fetching the member details\")\n                }\n            }\n        }\n        getMemberDetails()\n    }, [API_URL, memberId])\n\n\n    return (\n        <div>\n            <Space align='center'>\n                <p className=\"dashboard-option-title\">Danh sách người dùng</p>\n                <Button>Thêm </Button>\n            </Space>\n\n            {allUsers.length > 0 ? (\n                <>\n                    <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                        <table className=\"admindashboard-table\">\n                            <thead>\n                                <tr>\n                                    <th>Họ tên</th>\n                                    <th>Ngày sinh</th>\n                                    <th>Loại toài khoản</th>\n                                    <th>Email</th>\n\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {allUsers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((transaction, index) => (\n                                    <tr key={index}>\n                                        <td>{transaction.userFullName || \"N/A\"}</td>\n                                        <td>{transaction.dob || \"N/A\"}</td>\n                                        <td>{transaction.userType || \"N/A\"}</td>\n                                        <td>{transaction.email || \"N/A\"}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </TableContainer>\n\n                    <TablePagination\n                        onRowsPerPageChange={(e) => {\n                            setRowsPerPage(parseInt(e.target.value, 10))\n                            setPage(0)\n                        }}\n                        component=\"div\"\n                        count={allUsers.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={(e, newPage) => setPage(newPage)}\n                        style={{ maxWidth: '1160px' }}\n                    />\n                </>\n            ) : (\n                <table className=\"admindashboard-table\">\n                    <thead>\n\n                        <tr>\n                            <th>Họ tên</th>\n                            <th>Ngày sinh</th>\n                            <th>Loại toài khoản</th>\n                            <th>Email</th>\n                        </tr>\n\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                        </tr>\n                    </tbody>\n                </table>\n            )}\n\n            <div className='semanticdropdown getmember-dropdown'>\n\n                <Form.Item\n                    label=\"Độc giả\"\n                    name=\"borrowerId\"\n                    rules={[{ required: true, message: 'Vui lòng chọn độc giả' }]}\n                    labelStyle={{ fontSize: '20px' }} // Thêm style cho nhãn\n                >\n                    <Select\n                        placeholder=\"Chọn độc giả\"\n                        onChange={setMemberId}\n                        style={{ fontSize: '16px' }} // Thêm style cho Select component\n                    >\n                        {allMembersOptions.map(member => (\n                            <Option key={member.value} value={member.value}>{member.text}</Option>\n                        ))}\n                    </Select>\n\n\n                </Form.Item>\n            </div>\n            <div style={memberId === null ? { display: \"none\" } : {}}>\n                <div className=\"member-profile-content\" id=\"profile@member\" style={memberId === null ? { display: \"none\" } : {}}>\n                    <div className=\"user-details-topbar\" >\n                        <img className=\"user-profileimage\" src=\"./assets/images/Profile.png\" alt=\"\"></img>\n                        <div className=\"user-info\">\n                            <p className=\"user-name\">{memberDetails?.userFullName}</p>\n                            <p className=\"user-id\">{memberDetails?.userType === \"Student\" ? memberDetails?.admissionId : memberDetails?.employeeId}</p>\n                            <p className=\"user-email\">{memberDetails?.email}</p>\n                            <p className=\"user-phone\">{memberDetails?.mobileNumber}</p>\n                        </div>\n                    </div>\n                    <div className=\"user-details-specific\">\n                        <div className=\"specific-left\">\n                            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                                <p style={{ display: \"flex\", flex: \"0.5\", flexDirection: \"column\" }}>\n                                    <span style={{ fontSize: \"18px\" }}>\n                                        <b>Tuổi</b>\n                                    </span>\n                                    <span style={{ fontSize: \"16px\" }}>\n                                        {memberDetails?.age}\n                                    </span>\n                                </p>\n                                <p style={{ display: \"flex\", flex: \"0.5\", flexDirection: \"column\" }}>\n                                    <span style={{ fontSize: \"18px\" }}>\n                                        <b>Giới tính</b>\n                                    </span>\n                                    <span style={{ fontSize: \"16px\" }}>\n                                        {memberDetails?.gender}\n                                    </span>\n                                </p>\n                            </div>\n                            <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: \"30px\" }}>\n                                <p style={{ display: \"flex\", flex: \"0.5\", flexDirection: \"column\" }}>\n                                    <span style={{ fontSize: \"18px\" }}>\n                                        <b>Ngày sinh</b>\n                                    </span>\n                                    <span style={{ fontSize: \"16px\" }}>\n                                        {memberDetails?.dob}\n                                    </span>\n                                </p>\n                                <p style={{ display: \"flex\", flex: \"0.5\", flexDirection: \"column\" }}>\n                                    <span style={{ fontSize: \"18px\" }}>\n                                        <b>Địa chỉ</b>\n                                    </span>\n                                    <span style={{ fontSize: \"16px\" }}>\n                                        {memberDetails?.address}\n                                    </span>\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"specific-right\">\n                            <div style={{ display: \"flex\", flexDirection: \"column\", flex: \"0.5\" }}>\n                                <p style={{ fontSize: \"20px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}><b>Điểm tích lũy</b></p>\n                                <p style={{ fontSize: \"25px\", fontWeight: \"500\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"15px\" }}>540</p>\n                            </div>\n                            <div className=\"dashboard-title-line\"></div>\n                            <div style={{ display: \"flex\", flexDirection: \"column\", flex: \"0.5\" }}>\n                                <p style={{ fontSize: \"20px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}><b>Thứ hạng</b></p>\n                                <p style={{ fontSize: \"25px\", fontWeight: \"500\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"15px\" }}>{memberDetails?.points}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <p className=\"dashboard-option-title\">Chờ xử lý</p>\n                {allTransactions.length > 0 ? (\n                    <>\n                        <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                            <table className=\"admindashboard-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Tên sách</th>\n                                        <th>Người mượn</th>\n                                        <th>Từ ngày</th>\n                                        <th>Đến ngày</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {allTransactions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((transaction, index) => (\n                                        <tr key={index}>\n                                            <td>{transaction.books || \"N/A\"}</td>\n                                            <td>{transaction.userName || \"N/A\"}</td>\n                                            <td>{transaction.fromDate || \"N/A\"}</td>\n                                            <td>{transaction.toDate || \"N/A\"}</td>\n\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </TableContainer>\n\n                        <TablePagination\n                            onRowsPerPageChange={(e) => {\n                                setRowsPerPage(parseInt(e.target.value, 10))\n                                setPage(0)\n                            }}\n                            component=\"div\"\n                            count={allTransactions.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onPageChange={(e, newPage) => setPage(newPage)}\n                            style={{ maxWidth: '1160px' }}\n                        />\n                    </>\n                ) : (\n                    <table className=\"admindashboard-table\">\n                        <thead>\n\n                            <tr>\n                                <th>Tên sách</th>\n                                <th>Người mượn</th>\n                                <th>Từ ngày</th>\n                                <th>Đến ngày</th>\n                            </tr>\n\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                )}\n\n                <p className=\"dashboard-option-title\">Đang Mượn</p>\n\n                {allTransactionsTrue.length > 0 ? (\n                    <>\n                        <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                            <table className=\"admindashboard-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Tên sách</th>\n                                        <th>Người mượn</th>\n                                        <th>Từ ngày</th>\n                                        <th>Đến ngày</th>\n                                        <th>Quá hạn</th>\n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {allTransactionsTrue.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\n                                        <tr key={index}>\n                                            <td>{data ? data.books : \"N/A\"}</td>\n                                            <td>{data ? data.userName : \"N/A\"}</td>\n                                            <td>{data ? data.fromDate : \"N/A\"}</td>\n                                            <td>{data ? data.toDate : \"N/A\"}</td>\n                                            <td>{data ? data.overdue : \"N/A\"}</td>\n\n\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </TableContainer>\n                        <TablePagination\n                            onRowsPerPageChange={(e) => {\n                                setRowsPerPage(parseInt(e.target.value, 10))\n                                setPage(0)\n                            }}\n                            component=\"div\"\n                            count={allTransactions.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onPageChange={(e, newPage) => setPage(newPage)}\n                            style={{ maxWidth: '1160px' }}\n                        />\n                    </>\n                ) : (\n                    <table className=\"admindashboard-table\">\n                        <thead>\n                            <tr>\n                                <th>Tên sách</th>\n                                <th>Người mượn</th>\n                                <th>Từ ngày</th>\n                                <th>Đến ngày</th>\n                                <th>Quá hạn</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                )}\n                <p className=\"dashboard-option-title\">Lịch Sử</p>\n                {allTransactionsFalse.length > 0 ? (\n                    <>\n                        <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                            <table className=\"admindashboard-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Tên sách</th>\n                                        <th>Người mượn</th>\n                                        <th>Từ ngày</th>\n                                        <th>Đến ngày</th>\n                                        <th>Quá hạn</th>\n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {allTransactionsFalse.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\n                                        <tr key={index}>\n                                            <td>{data ? data.books : \"N/A\"}</td>\n                                            <td>{data ? data.userName : \"N/A\"}</td>\n                                            <td>{data ? data.fromDate : \"N/A\"}</td>\n                                            <td>{data ? data.toDate : \"N/A\"}</td>\n                                            <td>{data ? data.overdue : \"N/A\"}</td>\n\n\n\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </TableContainer>\n                        <TablePagination\n                            onRowsPerPageChange={(e) => {\n                                setRowsPerPage(parseInt(e.target.value, 10))\n                                setPage(0)\n                            }}\n                            component=\"div\"\n                            count={allTransactions.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onPageChange={(e, newPage) => setPage(newPage)}\n                            style={{ maxWidth: '1160px' }}\n                        />\n                    </>\n                ) : (\n                    <table className=\"admindashboard-table\">\n                        <thead>\n\n                            <tr>\n                                <th>Tên sách</th>\n                                <th>Người mượn</th>\n                                <th>Từ ngày</th>\n                                <th>Đến ngày</th>\n                                <th>Quá hạn</th>\n                            </tr>\n\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                )}\n            </div>\n            <Modal title=\"Mượn sách\"\n                open={isModalOpen}\n                // onOk={handleOkModal}\n                onCancel={handleCancel}\n                width={1100}\n                footer={[\n                    <Button key=\"huy\" onClick={handleCancel}>\n                        Hủy\n                    </Button>,\n                    <Button key=\"them\" type=\"primary\" >\n                        {/* onClick={handleOkModal}> */}\n                        Sửa\n                    </Button>,\n\n\n                ]}\n            >\n                <Form\n                    // form={form}\n                    name=\"addbook-form\"\n                    // onFinish={addBook}\n                    // labelCol={{ span: 8 }}\n                    // wrapperCol={{ span: 16 }}\n                    // onFinish={addTransaction}\n                    layout=\"vertical\"\n                    style={{ margin: 33, }}\n                >\n                    <Row gutter={16}>\n                        <Col span={8}>\n                            <Form.Item\n                                label=\"id\"\n                                name=\"_id\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên sách!' }]}\n                            >\n                                <Input\n                                    // onChange={handlebookNameChange} \n                                    readOnly />\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Tên sách\"\n                                name=\"bookName\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên sách!' }]}\n                            >\n                                <Input.TextArea\n                                    //  onChange={handlebookNameChange}\n                                    rows={2} />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Tên tác giả\"\n                                name=\"author\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}\n\n                            >\n                                <Input\n                                // value={author} \n                                // onChange={handleAuthorChange} \n                                />\n                            </Form.Item>\n                            <Form.Item label=\"Ngôn ngữ\" name=\"language\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n\n                                <Select\n                                    placeholder=\"Chọn ngôn ngữ\"\n                                    // onChange={setLanguage}\n                                    style={{ fontSize: '16px' }}\n                                    showSearch\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                >\n                                    <Select.Option value=\"Vi\">Tiếng Việt</Select.Option>\n                                    <Select.Option value=\"En\">Tiếng Anh</Select.Option>\n                                </Select>\n                            </Form.Item>\n                            <Form.Item label=\"Nhà xuất bản\" name=\"publisher\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n                                <Input\n                                // value={publisher} \n                                // onChange={handlePublisherChange}\n                                />\n                            </Form.Item>\n\n\n                        </Col>\n\n                        <Col span={8}>\n                            <Form.Item\n                                name=\"categories\"\n                                label=\"Chọn thể loại\"\n                                rules={[{ required: true, message: 'Vui lòng chọn độc giả!' }]}\n                            >\n                                <Select\n                                    placeholder=\"Chọn thể loại\"\n                                    // onChange={setCategoryName}\n                                    style={{ fontSize: '16px' }}\n                                    showSearch\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                >\n                                    {/* {allCategories.map(category => (\n                                        <Select.Option key={category.categoryName} value={category.categoryName}>\n                                            {category.categoryName}\n                                        </Select.Option>\n                                    ))} */}\n                                </Select>\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Tổng sách sẵn có\"\n                                name=\"bookCount\"\n                                rules={[{ required: true, message: 'Vui lòng nhập số lượng sách sẵn có!' }]}\n                            >\n                                <Input\n                                    // value={bookCount}\n                                    //  onChange={handleBookCountChange}\n                                    type=\"number\" />\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Số lượng sách sẵn có\"\n                                name=\"bookCountAvailable\"\n                                rules={[{ required: true, message: 'Vui lòng nhập số lượng sách sẵn có!' }]}\n                            >\n                                <Input type=\"number\" />\n                            </Form.Item>\n\n\n\n\n\n\n                            <Form.Item label=\"Tiêu đề thay thế\" name=\"description\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n\n                                <Input.TextArea\n                                    // value={description}\n                                    //  onChange={handledescriptionChange}\n                                    rows={5} />\n                            </Form.Item>\n\n\n\n                        </Col>\n                        <Col span={8}>\n\n\n                            <Form.Item\n                                label=\"Ảnh bìa\"\n                                name=\"coverImage\"\n                                rules={[{ required: true, message: 'Vui lòng tải lên ảnh bìa sách!' }]}\n                            >\n\n                                {/* <Upload\n                                // action=\"https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188\"\n                                listType=\"picture-card\"\n                                fileList={fileList}\n                                onPreview={handlePreview}\n                                onChange={handleChange}\n                            >\n                                {fileList.length >= 8 ? null : uploadButton}\n                            </Upload>\n                            <Modal open={previewOpen} title={previewTitle} footer={null} onCancel={handleCancel}>\n                                <img\n                                    alt=\"example\"\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    src={previewImage}\n                                />\n                            </Modal> */}\n\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n                    <Form.Item\n                        style={{\n                            paddingTop: 24,\n                        }}\n                    >\n                        {/* <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                            Thêm mới\n                        </Button> */}\n                    </Form.Item>\n\n\n\n                </Form>\n            </Modal>\n        </div>\n\n    )\n}\n\nexport default GetMember\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\Return.js",["543","544","545","546","547","548","549"],"import React, { useContext, useEffect, useState } from 'react'\nimport \"../AdminDashboard.css\"\nimport axios from \"axios\"\nimport { Dropdown } from 'semantic-ui-react'\nimport '../../Member/MemberDashboard.css'\nimport moment from \"moment\"\nimport { AuthContext } from '../../../../Context/AuthContext'\nimport { Select, Form, Button } from 'antd';\nimport TransController from '../../../../Controller/TransactionController';\nimport UserController from '../../../../Controller/UserController';\nimport BookController from '../../../../Controller/bookController';\nimport { TableContainer, TablePagination, Paper } from '@material-ui/core';\nconst { Option } = Select;\n\n\nfunction Return() {\n\n    const API_URL = process.env.REACT_APP_API_URL\n    const { user } = useContext(AuthContext)\n\n    const [allTransactions, setAllTransactions] = useState([])\n    const [ExecutionStatus, setExecutionStatus] = useState(null) /* For triggering the tabledata to be updated */\n    const [allMembers, setAllMembers] = useState([]);\n    const [borrowerId, setBorrowerId] = useState(null)\n    const [allTransactionsTrue, setAllTransactionsTrue] = useState([])\n    const [allTransactionsFalse, setAllTransactionsFalse] = useState([])\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n\n    // lay danh sach transaction chua xu ly\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let transactions;\n                // if (borrowerId === null) {\n                transactions = await TransController.getAllTrans();\n                // } else {\n                //   transactions = await TransController.getTransByUser(borrowerId);\n                // }\n\n                const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"True\");\n                setAllTransactionsTrue(activeTransactions);\n                const falseTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"False\");\n                setAllTransactionsFalse(falseTransactions);\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n        fetchData();     // Gọi fetchData để lấy dữ liệu\n\n    }, []); // useEffect sẽ chỉ chạy một lần sau khi render lần đầu tiên\n    const fetchUserTransactions = async (userId) => {\n        try {\n            const transactions = await TransController.getTransByUser(userId);\n            console.log(\"user trans\", transactions)\n            const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"True\");\n            setAllTransactionsTrue(activeTransactions);\n            const falseTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"False\");\n            setAllTransactionsFalse(falseTransactions);\n        } catch (error) {\n            console.error('Error fetching user transactions:', error);\n        }\n    };\n    // lay danh sach nguoi dung khong phai la admin\n    useEffect(() => {\n        const fetchData = async () => {\n\n            try {\n                const allUser = await UserController.getAllUsers();\n                // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n                const Users = allUser.filter(user => user && user.isAdmin !== true);\n                setAllMembers(Users); // Đặt danh sách các giao dịch \"Active\" vào state\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n\n        fetchData(); // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n    const handleSelectUser = (userId) => {\n        setBorrowerId(userId)\n        fetchUserTransactions(userId);\n    };\n    const handleUpdateTransaction = async (transactionId) => {\n        try {\n            const data = {\n                staff_edit: user.user._id,\n                transactionStatus: \"False\"\n            };\n            // Gọi hàm updateTransaction từ TransController để cập nhật giao dịch\n            const updatedTransaction = await TransController.updateTransaction(transactionId, data);\n            const transactions = await TransController.getAllTrans();\n            // } else {\n            //   transactions = await TransController.getTransByUser(borrowerId);\n            // }\n\n            const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"True\");\n            setAllTransactionsTrue(activeTransactions);\n            const falseTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"False\");\n            setAllTransactionsFalse(falseTransactions);\n            console.log('Transaction updated:', updatedTransaction);\n            alert('cập nhật thành công 🎉');\n        } catch (error) {\n            console.error('Error updating transaction:', error);\n        }\n    };\n\n\n\n    const convertToIssue = async (transactionId) => {\n        try {\n            await axios.put(API_URL + \"api/transactions/update-transaction/\" + transactionId, {\n                transactionType: \"Issued\",\n                isAdmin: user.isAdmin\n            })\n            setExecutionStatus(\"Completed\");\n            alert(\"Chuyển trạng thái 'Đã mượn' thành công 🎆\")\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n\n    return (\n        <div>\n            <div className='semanticdropdown returnbook-dropdown'>\n                <Form\n                    label=\"Độc giả\"\n                    name=\"borrowerId\"\n                    rules={[{ required: true, message: 'Vui lòng chọn độc giả' }]}\n                    labelStyle={{ fontSize: '20px' }} // Thêm style cho nhãn\n                >\n                    <Select\n                        placeholder=\"Chọn độc giả\"\n                        onChange={handleSelectUser}\n                        style={{ fontSize: '16px' }}\n                        // Thêm style cho Select component\n                        showSearch  // Thêm tính năng tìm kiếm\n                        optionFilterProp=\"children\" // Chỉ định thuộc tính cần tìm kiếm trong các option\n                        filterOption={(input, option) =>\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }\n                    >\n                        {allMembers.map(member => (\n                            <Option key={member._id} value={member._id}>{member.userFullName}</Option>\n                        ))}\n                    </Select>\n\n\n                </Form>\n            </div>\n            <p className=\"dashboard-option-title\">Đã mượn</p>\n            {/* <table className=\"admindashboard-table\">\n                <tr>\n                    <th>Tên sách</th>\n                    <th>Người mượn</th>\n                    <th>Từ ngày</th>\n                    <th>Đến ngày</th>\n                    <th>Quá hạn</th>\n                    <th></th>\n                </tr>\n                {Array.isArray(allTransactionsTrue) && allTransactionsTrue.length > 0 ? (\n                    allTransactionsTrue.map((data, index) => (\n                        <tr key={index}>\n                            <td>{data ? data.books : \"N/A\"}</td>\n                            <td>{data ? data.userName : \"N/A\"}</td>\n                            <td>{data ? data.fromDate : \"N/A\"}</td>\n                            <td>{data ? data.toDate : \"N/A\"}</td>\n                            <td>{data ? data.overdue : \"N/A\"}</td>\n\n                            <td>\n                                <button onClick={() => handleUpdateTransaction(data._id)}>\n                                    Trả sách\n                                </button>\n                            </td>\n                        </tr>\n                    ))\n                ) : (\n                    <tr>\n                        <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                    </tr>\n                )}\n            </table> */}\n            {allTransactionsTrue.length > 0 ? (\n                <>\n                    <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                        <table className=\"admindashboard-table\">\n                            <thead>\n                                <tr>\n                                    <th>Tên sách</th>\n                                    <th>Người mượn</th>\n                                    <th>Từ ngày</th>\n                                    <th>Đến ngày</th>\n                                    <th>Quá hạn</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {allTransactionsTrue.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\n                                    <tr key={index}>\n                                        <td>{data ? data.books : \"N/A\"}</td>\n                                        <td>{data ? data.userName : \"N/A\"}</td>\n                                        <td>{data ? data.fromDate : \"N/A\"}</td>\n                                        <td>{data ? data.toDate : \"N/A\"}</td>\n                                        <td>{data ? data.overdue : \"N/A\"}</td>\n\n                                        <td>\n                                            <Button type=\"primary\" onClick={() => handleUpdateTransaction(data._id)}>\n                                                Trả sách\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </TableContainer>\n                    <TablePagination\n                        onRowsPerPageChange={(e) => {\n                            setRowsPerPage(parseInt(e.target.value, 10))\n                            setPage(0)\n                        }}\n                        component=\"div\"\n                        count={allTransactions.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={(e, newPage) => setPage(newPage)}\n                        style={{ maxWidth: '1160px' }}\n                    />\n                </>\n            ) : (\n                <table className=\"admindashboard-table\">\n                    <thead>\n                        <tr>\n                            <th>Tên sách</th>\n                            <th>Người mượn</th>\n                            <th>Từ ngày</th>\n                            <th>Đến ngày</th>\n                            <th>Quá hạn</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                        </tr>\n                    </tbody>\n                </table>\n            )}\n            <p className=\"dashboard-option-title\">Lịch Sử</p>\n            {allTransactionsFalse.length > 0 ? (\n                <>\n                    <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                        <table className=\"admindashboard-table\">\n                            <thead>\n                                <tr>\n                                    <th>Tên sách</th>\n                                    <th>Người mượn</th>\n                                    <th>Từ ngày</th>\n                                    <th>Đến ngày</th>\n                                    <th>Quá hạn</th>\n\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {allTransactionsFalse.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\n                                    <tr key={index}>\n                                        <td>{data ? data.books : \"N/A\"}</td>\n                                        <td>{data ? data.userName : \"N/A\"}</td>\n                                        <td>{data ? data.fromDate : \"N/A\"}</td>\n                                        <td>{data ? data.toDate : \"N/A\"}</td>\n                                        <td>{data ? data.overdue : \"N/A\"}</td>\n\n\n\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </TableContainer>\n                    <TablePagination\n                        onRowsPerPageChange={(e) => {\n                            setRowsPerPage(parseInt(e.target.value, 10))\n                            setPage(0)\n                        }}\n                        component=\"div\"\n                        count={allTransactions.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={(e, newPage) => setPage(newPage)}\n                        style={{ maxWidth: '1160px' }}\n                    />\n                </>\n            ) : (\n                <table className=\"admindashboard-table\">\n                    <thead>\n\n                        <tr>\n                            <th>Tên sách</th>\n                            <th>Người mượn</th>\n                            <th>Từ ngày</th>\n                            <th>Đến ngày</th>\n                            <th>Quá hạn</th>\n                        </tr>\n\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                        </tr>\n                    </tbody>\n                </table>\n            )}\n        </div>\n    )\n}\n\nexport default Return\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\ImageSlider\\ImageSlider.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\firebase.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\About\\About.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\WelcomeBox\\WelcomeBox.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Footer\\Footer.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Stats\\Stats.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\PopularBooks\\PopularBooks.js",["550","551","552","553","554"],"import React, { useEffect, useState } from \"react\";\nimport \"./PopularBooks.css\";\nimport axios from 'axios'\nimport Loading from \"../Loader/Loader\";\nimport {useHistory} from \"react-router-dom\"\n\nfunction PopularBooks() {\n\n  const [listBook, setListbook] = useState([])\n  const [loading, setLoading] = useState(false);\n  const history  = useHistory();\n\n  const API_URL = process.env.REACT_APP_API_URL\n\n  // useEffect(() => {\n  //   setLoading(true)\n  //   const getListBook = async () => {\n  //     try {\n  //       const response = await axios.get(API_URL + 'api/books/get20book')\n  //       setListbook(response.data);\n  //       setLoading(false);\n\n  //     } catch (err) {\n  //       setLoading(false);\n  //       console.log('Error when get list book =>', err)\n  //     }\n  //   }\n  //   getListBook()\n  // }, [API_URL])\n\n  if(loading) return <Loading />;\n\n  return (\n    <div className=\"popularbooks-container\">\n      <h className=\"popularbooks-title\">Những cuốn sách phổ biến</h>\n      <div className=\"popularbooks\">\n        <div className=\"popularbook-images\">\n\n        {listBook.slice(0,16).map((item) => {\n          return (\n            \n            <img\n              className=\"popular-book\"\n              src={\"imageBook/\"+item.image_url}\n              alt=\"\"\n              onClick={() => history.push(`/book/${item._id}`)}\n            ></img>\n          )\n        })}\n\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default PopularBooks;\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\getURLimage.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Loader\\Loader.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Breadcrumb\\Breadcrumb.js",["555","556"],"import React from 'react';\nimport { Breadcrumbs, Link, Typography, listItemClasses } from '@mui/material';\nimport { NavigateNext } from '@mui/icons-material';\nimport {useLocation} from \"react-router-dom\";\n\nconst breadcrumbItems = [\n  { label: 'Trang chủ', url: '/' },\n  { label: 'Kho sách', url: '/book' },\n  { label: 'Chi tiết đầu sách', url: '/book/1' },\n];\n\n\nconst Breadcrumb = () => {\n  const location = useLocation();\n  const pathnames = location.pathname.split('/').filter((x) => x);\n\n  return (\n    <Breadcrumbs aria-label=\"breadcrumb\">\n      {breadcrumbItems.map((item, index) => {\n        const routeTo = `/${pathnames.slice(0, index + 1).join('/')}`;\n        const isLast = item.url === pathnames.length - 1;\n\n        return isLast ? (\n          <Typography key={item.url} color=\"text.primary\">{item.label}</Typography>\n        ) : (\n          <Link key={item.url} to={routeTo}>{item.label}</Link>\n        );\n      })}\n    </Breadcrumbs>\n  );\n};\n\nexport default Breadcrumb;\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Navbar\\Navbar.js",["557"],"import React, {useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./Navbar.css\";\nimport logoImg from \"../../images/logo.png\";\nimport {HiOutlineMenuAlt3} from \"react-icons/hi\";\n\nconst Navbar = () => {\n  const [toggleMenu, setToggleMenu] = useState(false);\n  const handleNavbar = () => setToggleMenu(!toggleMenu);\n\n  return (\n    <nav className='navbar' id = \"navbar\">\n      <div className='container navbar-content flex'>\n        <div className='brand-and-toggler flex flex-sb'>\n          <Link to = \"/\" className='navbar-brand flex'>\n           \n            <span className='text-uppercase fw-7 fs-24 ls-1'>bookhub</span>\n          </Link>\n          <button type = \"button\" className='navbar-toggler-btn' onClick={handleNavbar}>\n            <HiOutlineMenuAlt3 size = {35} style = {{\n              color: `${toggleMenu ? \"#fff\" : \"#010101\"}`\n            }} />\n          </button>\n        </div>\n\n        <div className={toggleMenu ? \"navbar-collapse show-navbar-collapse\" : \"navbar-collapse\"}>\n          <ul className = \"navbar-nav\">\n            <li className='nav-item'>\n              <Link to = \"book\" className='nav-link text-uppercase text-white fs-22 fw-6 ls-1'>Home</Link>\n            </li>\n            <li className='nav-item'>\n              <Link to = \"about\" className='nav-link text-uppercase text-white fs-22 fw-6 ls-1'>about</Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\TransactionController.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\trans.js",[],"C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\BookApi.js",["558"],"import axios from \"axios\"\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst BookApi = {\n  GetAllBooks: async () => {\n    const res = await axios.get(\"http://localhost:8080/api/books/allbooks\")\n    return res.data\n  },\n  // http://localhost:5000/api/books/getallcate\n  getAllCate: async () => {\n    const res = await axios.get(\"http://localhost:8080/api/books/getallcate\")\n    return res.data\n  },\n  getBookbyID: async (bookID) => {\n    const res = await axios.get(`http://localhost:8080/api/books/getbook/${bookID}`)\n    return res.data\n  },\n  addBook: async (data) => {\n    const res = await axios.post(\"http://localhost:8080/api/books/addbook\", data)\n    return res.data\n  },\n  updateBook: async (bookID, data) => {\n    const jsonData = {};\n    data.forEach((value, key) => {\n      jsonData[key] = value;\n    });\n\n    const res = await axios.put(`http://localhost:8080/api/books/updatebook/${bookID}`, jsonData)\n    return res.data\n  },\n  deleteBook: async (bookID) => {\n    const res = await axios.delete(`http://localhost:8080/api/books/removebook/${bookID}`)\n    return res.data\n  },\n\n}\n\nexport default BookApi;\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\user.js",["559"],"import axios from \"axios\"\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst UserApi = {\n  getAllUser: async () => {\n    const res = await axios.get(\"http://localhost:8080/api/users/allmembers\")\n    return res.data\n  },\n  getUserbyID: async (userId) => {\n    const res = await axios.get(`http://localhost:8080/api/users/getuser/${userId}`)\n    return res.data\n  },\n  addUser: async (data) => {\n    const res = await axios.post(\"http://localhost:8080/api/users/addbook\", data)\n    return res.data\n  },\n  updateUser: async (userId, data) => {\n    const res = await axios.put(`http://localhost:8080/api/users/updateuser/${userId}`, data)\n    return res.data\n  },\n  deleteUser: async (userId) => {\n    const res = await axios.delete(`http://localhost:8080/api/users/remove-Useraction/${userId}`)\n    return res.data\n  },\n}\n\nexport default UserApi\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\UserController.js",["560","561"],"import TransApi from \"../callAPI/trans.js\"\r\nimport BookApi from \"../callAPI/BookApi.js\";\r\nimport UserApi from \"../callAPI/user.js\";\r\nconst UserController = {\r\n    getAllUsers: async () => {\r\n        try {\r\n            const allUsers = await UserApi.getAllUser();\r\n            console.log(\"user\", allUsers)\r\n            // Xử lý dữ liệu nếu cần\r\n            return allUsers;\r\n        } catch (error) {\r\n            // Xử lý lỗi nếu cần\r\n            console.error(\"Error in getting all user:\", error);\r\n            throw error;\r\n        }\r\n    },\r\n    getUser: async (UserId) => {\r\n        try {\r\n            const user = await UserApi.getUserbyID(UserId);\r\n            console.log(\"User\", user)\r\n            // Xử lý dữ liệu nếu cần\r\n            return user;\r\n        } catch (error) {\r\n            // Xử lý lỗi nếu cần\r\n            console.error(\"Error in getting user:\", error);\r\n            throw error;\r\n        }\r\n    },\r\n    updateUser: async (userId, data) => {\r\n        try {\r\n            const User = await UserApi.updateUser(userId, data);\r\n            return User;\r\n        } catch (error) {\r\n            console.error('Error updating user:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    addUser: async (transactionData) => {\r\n        try {\r\n            const User = await UserApi.addUser(transactionData);\r\n            return User;\r\n        } catch (error) {\r\n            console.error('Error adding user:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    // Các hàm controller khác có thể được thêm ở đây\r\n};\r\nexport default UserController;\r\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\bookController.js",["562","563"],"import TransApi from \"../callAPI/trans.js\"\r\nimport BookApi from \"../callAPI/BookApi.js\";\r\nimport UserApi from \"../callAPI/user.js\";\r\nconst BookController = {\r\n    getAllBooks: async () => {\r\n        try {\r\n            const allBooks = await BookApi.GetAllBooks();\r\n            console.log(\"Book\", allBooks)\r\n            // Xử lý dữ liệu nếu cần\r\n            return allBooks;\r\n        } catch (error) {\r\n            // Xử lý lỗi nếu cần\r\n            console.error(\"Error in getting all books:\", error);\r\n            throw error;\r\n        }\r\n    },\r\n    getAllCate: async () => {\r\n        try {\r\n            const allBooks = await BookApi.getAllCate();\r\n            console.log(\"Book\", allBooks)\r\n            // Xử lý dữ liệu nếu cần\r\n            return allBooks;\r\n        } catch (error) {\r\n            // Xử lý lỗi nếu cần\r\n            console.error(\"Error in getting all books:\", error);\r\n            throw error;\r\n        }\r\n    },\r\n    // Các hàm controller khác có thể được thêm ở đây\r\n    addBook: async (bookData) => {\r\n        try {\r\n            const addedBook = await BookApi.addBook(bookData);\r\n            return addedBook;\r\n        } catch (error) {\r\n            console.error('Error adding transaction:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    updateBook: async (bookId, data) => {\r\n        try {\r\n            const updatedbook = await BookApi.updateBook(bookId, data);\r\n            return updatedbook;\r\n        } catch (error) {\r\n            console.error('Error updating transaction:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    deleteBook: async (bookId) => {\r\n        try {\r\n            const updatedbook = await BookApi.deleteBook(bookId);\r\n            return updatedbook;\r\n        } catch (error) {\r\n            console.error('Error updating transaction:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\nexport default BookController;\r\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\transactions.js",["564","565","566","567","568","569","570","571","572","573","574","575","576","577","578"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport \"../Admin/AdminDashboard.css\"\r\nimport axios from \"axios\"\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport './MemberDashboard.css'\r\nimport moment from \"moment\"\r\nimport { AuthContext } from '../../../Context/AuthContext.js'\r\nimport { Select, Form } from 'antd';\r\nimport TransController from '../../../Controller/TransactionController.js';\r\nimport UserController from '../../../Controller/UserController.js';\r\nimport BookController from '../../../Controller/bookController.js';\r\nimport {\r\n    Paper,\r\n    TableContainer,\r\n    TablePagination\r\n} from \"@mui/material\"\r\nconst { Option } = Select;\r\n\r\n\r\nfunction Transaction() {\r\n\r\n    const API_URL = process.env.REACT_APP_API_URL\r\n    const { user } = useContext(AuthContext)\r\n\r\n    const [allTransactions, setAllTransactions] = useState([])\r\n    const [ExecutionStatus, setExecutionStatus] = useState(null) /* For triggering the tabledata to be updated */\r\n    const [allMembers, setAllMembers] = useState([]);\r\n    const [borrowerId, setBorrowerId] = useState(null)\r\n    const [allTransactionsTrue, setAllTransactionsTrue] = useState([])\r\n    const [allTransactionsFalse, setAllTransactionsFalse] = useState([])\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n    // lay danh sach transaction chua xu ly\r\n    // useEffect sẽ chỉ chạy một lần sau khi render lần đầu tiên\r\n\r\n    // lay danh sach nguoi dung khong phai la admin\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const transactions = await TransController.getTransByUser(user.user._id);\r\n                console.log(\"user trans\", transactions)\r\n                const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\r\n                setAllTransactions(activeTransactions);\r\n                const TrueTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"True\");\r\n                setAllTransactionsTrue(TrueTransactions);\r\n                const falseTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"False\");\r\n                setAllTransactionsFalse(falseTransactions);\r\n            } catch (error) {\r\n                console.error('Error fetching transactions:', error);\r\n            }\r\n        };\r\n        fetchData();     // Gọi fetchData để lấy dữ liệu\r\n\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"dashboard-option-title\">Chờ xử lý</p>\r\n            {allTransactions.length > 0 ? (\r\n                <>\r\n                    <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\r\n\r\n                        <table className=\"admindashboard-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Tên sách</th>\r\n                                    <th>Người mượn</th>\r\n                                    <th>Từ ngày</th>\r\n                                    <th>Đến ngày</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {allTransactions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((transaction, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{transaction.books || \"N/A\"}</td>\r\n                                        <td>{transaction.userName || \"N/A\"}</td>\r\n                                        <td>{transaction.fromDate || \"N/A\"}</td>\r\n                                        <td>{transaction.toDate || \"N/A\"}</td>\r\n\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </TableContainer>\r\n\r\n                    <TablePagination\r\n                        onRowsPerPageChange={(e) => {\r\n                            setRowsPerPage(parseInt(e.target.value, 10))\r\n                            setPage(0)\r\n                        }}\r\n                        component=\"div\"\r\n                        count={allTransactions.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onPageChange={(e, newPage) => setPage(newPage)}\r\n                        style={{ maxWidth: '1160px' }}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <table className=\"admindashboard-table\">\r\n                    <thead>\r\n\r\n                        <tr>\r\n                            <th>Tên sách</th>\r\n                            <th>Người mượn</th>\r\n                            <th>Từ ngày</th>\r\n                            <th>Đến ngày</th>\r\n                        </tr>\r\n\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n\r\n            <p className=\"dashboard-option-title\">Đang Mượn</p>\r\n\r\n            {allTransactionsTrue.length > 0 ? (\r\n                <>\r\n                    <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\r\n\r\n                        <table className=\"admindashboard-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Tên sách</th>\r\n                                    <th>Người mượn</th>\r\n                                    <th>Từ ngày</th>\r\n                                    <th>Đến ngày</th>\r\n                                    <th>Quá hạn</th>\r\n\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {allTransactionsTrue.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{data ? data.books : \"N/A\"}</td>\r\n                                        <td>{data ? data.userName : \"N/A\"}</td>\r\n                                        <td>{data ? data.fromDate : \"N/A\"}</td>\r\n                                        <td>{data ? data.toDate : \"N/A\"}</td>\r\n                                        <td>{data ? data.overdue : \"N/A\"}</td>\r\n\r\n\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        onRowsPerPageChange={(e) => {\r\n                            setRowsPerPage(parseInt(e.target.value, 10))\r\n                            setPage(0)\r\n                        }}\r\n                        component=\"div\"\r\n                        count={allTransactions.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onPageChange={(e, newPage) => setPage(newPage)}\r\n                        style={{ maxWidth: '1160px' }}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <table className=\"admindashboard-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Tên sách</th>\r\n                            <th>Người mượn</th>\r\n                            <th>Từ ngày</th>\r\n                            <th>Đến ngày</th>\r\n                            <th>Quá hạn</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n            <p className=\"dashboard-option-title\">Lịch Sử</p>\r\n            {allTransactionsFalse.length > 0 ? (\r\n                <>\r\n                    <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\r\n\r\n                        <table className=\"admindashboard-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Tên sách</th>\r\n                                    <th>Người mượn</th>\r\n                                    <th>Từ ngày</th>\r\n                                    <th>Đến ngày</th>\r\n                                    <th>Quá hạn</th>\r\n\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {allTransactionsFalse.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{data ? data.books : \"N/A\"}</td>\r\n                                        <td>{data ? data.userName : \"N/A\"}</td>\r\n                                        <td>{data ? data.fromDate : \"N/A\"}</td>\r\n                                        <td>{data ? data.toDate : \"N/A\"}</td>\r\n                                        <td>{data ? data.overdue : \"N/A\"}</td>\r\n\r\n\r\n\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        onRowsPerPageChange={(e) => {\r\n                            setRowsPerPage(parseInt(e.target.value, 10))\r\n                            setPage(0)\r\n                        }}\r\n                        component=\"div\"\r\n                        count={allTransactions.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onPageChange={(e, newPage) => setPage(newPage)}\r\n                        style={{ maxWidth: '1160px' }}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <table className=\"admindashboard-table\">\r\n                    <thead>\r\n\r\n                        <tr>\r\n                            <th>Tên sách</th>\r\n                            <th>Người mượn</th>\r\n                            <th>Từ ngày</th>\r\n                            <th>Đến ngày</th>\r\n                            <th>Quá hạn</th>\r\n                        </tr>\r\n\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Transaction\r\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\CateController.js",["579","580","581"],"import TransApi from \"../callAPI/trans.js\"\r\nimport BookApi from \"../callAPI/BookApi.js\";\r\nimport UserApi from \"../callAPI/user.js\";\r\nimport CateApi from \"../callAPI/cateAPI.js\";\r\nconst CateController = {\r\n    getAllCates: async () => {\r\n        try {\r\n            const allCates = await CateApi.GetAllCates();\r\n            console.log(\"Book\", allCates)\r\n            // Xử lý dữ liệu nếu cần\r\n            return allCates;\r\n        } catch (error) {\r\n            // Xử lý lỗi nếu cần\r\n            console.error(\"Error in getting all books:\", error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Các hàm controller khác có thể được thêm ở đây\r\n};\r\nexport default CateController;\r\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\cateAPI.js",["582"],"import axios from \"axios\"\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst CateApi = {\r\n    GetAllCates: async () => {\r\n        const res = await axios.get(\"http://localhost:8080/api/categories/allcategories\")\r\n        return res.data\r\n    },\r\n    // http://localhost:5000/api/books/getallcate\r\n    // getAllCate: async () => {\r\n    //     const res = await axios.get(\"/api/books/getallcate\")\r\n    //     return res.data\r\n    // },\r\n    // getBookbyID: async (bookID) => {\r\n    //     const res = await axios.get(`http://localhost:5000/api/books/getbook/${bookID}`)\r\n    //     return res.data\r\n    // },\r\n    // addBook: async (data) => {\r\n    //     const res = await axios.post(\"http://localhost:5000/api/books/addbook\", data)\r\n    //     return res.data\r\n    // },\r\n    // updateBook: async (bookID, data) => {\r\n    //     const res = await axios.put(`http://localhost:5000/api/books/updatebook/${bookID}`, data)\r\n    //     return res.data\r\n    // },\r\n    // deleteBook: async (bookID) => {\r\n    //     const res = await axios.delete(`http://localhost:5000/api/books/removebook/${bookID}`)\r\n    //     return res.data\r\n    // },\r\n}\r\n\r\nexport default CateApi;\r\n","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\info.js",["583","584","585","586","587","588","589","590","591","592","593","594"],"import React, { useEffect, useContext, useState } from 'react';\r\n\r\n// import \"../AdminDashboard.css\";\r\nimport axios from 'axios';\r\n// import { AuthContext } from '../../../Context/AuthContext';\r\n\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport { UploadOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { AuthContext } from '../../../Context/AuthContext.js'\r\nimport UserController from '../../../Controller/UserController.js';\r\nimport {\r\n    ref,\r\n    uploadBytes,\r\n    getDownloadURL,\r\n    listAll\r\n} from \"firebase/storage\";\r\n// import { StorageError } from 'firebase/storage\r\n// import { storage } from \"../../../firebase\";\r\nimport { Select, Modal, DatePicker, Table, Typography, Button, Form, Row, Col, message, Upload, Input } from 'antd';\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\nconst getBase64 = (file) =>\r\n    new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\nfunction Profile() {\r\n    const API_URL = process.env.REACT_APP_API_URL;\r\n    const { user } = useContext(AuthContext)\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [recentAddedMembers, setRecentAddedMembers] = useState([]);\r\n    const [userType, setUserType] = useState(null);\r\n    const [gender, setGender] = useState(null);\r\n    const [selectedImage, setSelectedImage] = useState(null);\r\n    const [users, setUsers] = useState([])\r\n    const [previewOpen, setPreviewOpen] = useState(false);\r\n    const [previewImage, setPreviewImage] = useState('');\r\n    const [previewTitle, setPreviewTitle] = useState('');\r\n    const [fileList, setFileList] = useState([\r\n        {\r\n            uid: '-1',\r\n            name: 'image.png',\r\n            status: 'done',\r\n            url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n        },\r\n        {\r\n            uid: '-xxx',\r\n            percent: 50,\r\n            name: 'image.png',\r\n            status: 'uploading',\r\n            url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n        },\r\n        {\r\n            uid: '-5',\r\n            name: 'image.png',\r\n            status: 'error',\r\n        },\r\n    ]);\r\n    const handleCancel = () => setPreviewOpen(false);\r\n    const handlePreview = async (file) => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj);\r\n        }\r\n        setPreviewImage(file.url || file.preview);\r\n        setPreviewOpen(true);\r\n        setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1));\r\n    };\r\n    const handleChange = ({ fileList: newFileList }) => setFileList(newFileList);\r\n    const uploadButton = (\r\n        <button\r\n            style={{\r\n                border: 0,\r\n                background: 'none',\r\n            }}\r\n            type=\"button\"\r\n        >\r\n            <PlusOutlined />\r\n            <div\r\n                style={{\r\n                    marginTop: 8,\r\n                }}\r\n            >\r\n                Upload\r\n            </div>\r\n        </button>\r\n    );\r\n    const onFinish = async (values) => {\r\n        setIsLoading(true);\r\n        const userData = { ...values, dob: moment(values.dob).format(\"MM/DD/YYYY\") };\r\n\r\n        try {\r\n            const response = await axios.post(API_URL + \"api/auth/register\", userData);\r\n            if (recentAddedMembers.length >= 5) {\r\n                recentAddedMembers.splice(-1);\r\n            }\r\n            setRecentAddedMembers([response.data, ...recentAddedMembers]);\r\n            form.resetFields();\r\n            message.success(\"Thêm thành viên thành công!\");\r\n        } catch (error) {\r\n            console.log(error);\r\n            message.error(\"Thêm thành viên thất bại!\");\r\n        }\r\n\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const getMembers = async () => {\r\n            try {\r\n                const response = await axios.get(API_URL + \"api/users/allmembers\");\r\n                const recentMembers = response.data.slice(0, 5);\r\n                setRecentAddedMembers(recentMembers);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        };\r\n\r\n        getMembers();\r\n    }, [API_URL]);\r\n    const handleImageUpload = (info) => {\r\n        const { file } = info;\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            setSelectedImage(e.target.result);\r\n        };\r\n\r\n        if (file) {\r\n            reader.readAsDataURL(file);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const transactions = await UserController.getUser(user.user._id);\r\n                console.log(\"user\", transactions)\r\n                setUsers(transactions);\r\n            } catch (error) {\r\n                console.error('Error fetching user:', error);\r\n            }\r\n        };\r\n        fetchData(); // Gọi fetchData để lấy dữ liệu\r\n\r\n    }, [user.user._id]); // Thêm user.user._id vào mảng dependencies\r\n\r\n    useEffect(() => {\r\n        console.log(\"userlalala\", users.userType);\r\n    }, [users]); // Log giá trị của users khi nó được cập nhật\r\n\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"dashboard-option-title\">Thông tin cá nhân</p>\r\n            <div className=\"dashboard-title-line\"></div>\r\n\r\n            <Form form={form} onFinish={onFinish} layout=\"vertical\"\r\n                style={{ margin: 33, }}\r\n\r\n            >\r\n\r\n                <Row gutter={16}>\r\n                    <Col span={8}>\r\n                        <Form.Item name=\"userType\" label=\"User Type\" rules={[{ required: true, message: 'Please select user type!' }]}>\r\n                            <Select placeholder={users ? users.userType : ''} onChange={(value) => setUserType(value)}>\r\n                                <Select.Option value=\"Student\">Student</Select.Option>\r\n                                <Select.Option value=\"Teacher\">Teacher</Select.Option>\r\n                                <Select.Option value=\"Saft\">Saft</Select.Option>\r\n\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"userFullName\" label=\"Họ và tên\" rules={[{ required: true, message: 'Please enter full name!' }]}>\r\n                            <Input placeholder={users ? users.userFullName : ''} />\r\n                        </Form.Item>\r\n\r\n                        {/* <Form.Item name={userType === \"Student\" ? \"admissionId\" : \"employeeId\"} label=\"Mã thẻ\" rules={[{ required: true, message: 'Please enter ID!' }]}>\r\n                            <Input placeholder={users ? users.gender : ''} />\r\n                        </Form.Item> */}\r\n                        <Form.Item name=\"mobileNumber\" label=\"Số điện thoại\" rules={[{ required: true, message: 'Please enter mobile number!' }]}>\r\n                            <Input placeholder={users ? users.mobileNumber : '08594620468 '} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item name=\"gender\" label=\"Giới tính\" rules={[{ required: true, message: 'Please select gender!' }]}>\r\n                            <Select placeholder={users ? users.gender : '08594620468 '} fluid selection value={gender} onChange={(value) => setGender(value)}>\r\n                                <Select.Option value=\"Nam\">Nam</Select.Option>\r\n                                <Select.Option value=\"Nữ\">Nữ</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n\r\n                    <Col span={8}>\r\n                        <Form.Item name=\"address\" label=\"Địa chỉ\" rules={[{ required: true, message: 'Please enter address!' }]}>\r\n                            <Input placeholder={users ? users.address : ''} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"email\" label=\"Email\" rules={[{ required: true, message: 'Please enter email!', type: 'email' }]}>\r\n                            <Input placeholder={users ? users.email : '457683'} />\r\n                            {/* <Input value={users ? users.email : '457683'} /> */}\r\n\r\n                        </Form.Item>\r\n                        <Form.Item name=\"password\" label=\"Mật khẩu\" rules={[{ required: true, message: 'Please enter password!' }]}>\r\n                            <Input.Password value={users ? users.password : ''} />\r\n\r\n                        </Form.Item>\r\n\r\n\r\n\r\n                        <Form.Item name=\"password\" label=\"Nhập lại mật khẩu\" rules={[{ required: true, message: 'Please enter password!' }]}>\r\n                            <Input.Password value={users ? users.password : ''} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={8}>\r\n\r\n                        <Form.Item name=\"dob\" label=\"Ngày sinh\" rules={[{ required: true, message: 'Please select date of birth!' }]}>\r\n                            <DatePicker placeholder={users ? users.dob : '457683'} format=\"DD/MM/YYYY\" />\r\n                        </Form.Item>\r\n                        {/* <DatePicker value={users ? users.dob : '457683'} format=\"DD/MM/YYYY\" /> */}\r\n\r\n                        <Form.Item\r\n                            label=\"Ảnh bìa\"\r\n                            name=\"coverImage\"\r\n                            rules={[{ required: true, message: 'Vui lòng tải lên ảnh bìa sách!' }]}\r\n                        >\r\n                            <Upload\r\n                                // action=\"https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188\"\r\n                                listType=\"picture-circle\"\r\n                                // fileList={fileList}\r\n                                onPreview={handlePreview}\r\n                                onChange={handleChange}\r\n                            >\r\n                                {fileList.length >= 8 ? null : uploadButton}\r\n                            </Upload>\r\n                            <Modal open={previewOpen} title={previewTitle} footer={null} onCancel={handleCancel}>\r\n                                <img\r\n                                    alt=\"example\"\r\n                                    style={{\r\n                                        width: '100%',\r\n                                    }}\r\n                                    src={previewImage}\r\n                                />\r\n                            </Modal>\r\n                        </Form.Item>\r\n                    </Col>\r\n\r\n\r\n                </Row>\r\n\r\n                <Form.Item\r\n                    style={{\r\n                        paddingTop: 24,\r\n                    }}\r\n                >\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n                        Lưu thông tin\r\n                    </Button>\r\n\r\n                </Form.Item>\r\n            </Form>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","C:\\Users\\Thanh\\Desktop\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\info.js",["595","596","597","598","599","600","601","602","603","604","605","606"],"import React, { useEffect, useContext, useState } from 'react';\r\n\r\n// import \"../AdminDashboard.css\";\r\nimport axios from 'axios';\r\n// import { AuthContext } from '../../../Context/AuthContext';\r\n\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport { UploadOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { AuthContext } from '../../../../Context/AuthContext.js';\r\nimport UserController from '../../../../Controller/UserController.js';\r\nimport {\r\n    ref,\r\n    uploadBytes,\r\n    getDownloadURL,\r\n    listAll\r\n} from \"firebase/storage\";\r\n// import { StorageError } from 'firebase/storage\r\n// import { storage } from \"../../../firebase\";\r\nimport { Select, Modal, DatePicker, Table, Typography, Button, Form, Row, Col, message, Upload, Input } from 'antd';\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\nconst getBase64 = (file) =>\r\n    new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\nfunction Info() {\r\n    const API_URL = process.env.REACT_APP_API_URL;\r\n    const { user } = useContext(AuthContext)\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [recentAddedMembers, setRecentAddedMembers] = useState([]);\r\n    const [userType, setUserType] = useState(null);\r\n    const [gender, setGender] = useState(null);\r\n    const [selectedImage, setSelectedImage] = useState(null);\r\n    const [users, setUsers] = useState([])\r\n    const [previewOpen, setPreviewOpen] = useState(false);\r\n    const [previewImage, setPreviewImage] = useState('');\r\n    const [previewTitle, setPreviewTitle] = useState('');\r\n    const [fileList, setFileList] = useState([\r\n        {\r\n            uid: '-1',\r\n            name: 'image.png',\r\n            status: 'done',\r\n            url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n        },\r\n        {\r\n            uid: '-xxx',\r\n            percent: 50,\r\n            name: 'image.png',\r\n            status: 'uploading',\r\n            url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n        },\r\n        {\r\n            uid: '-5',\r\n            name: 'image.png',\r\n            status: 'error',\r\n        },\r\n    ]);\r\n    const handleCancel = () => setPreviewOpen(false);\r\n    const handlePreview = async (file) => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj);\r\n        }\r\n        setPreviewImage(file.url || file.preview);\r\n        setPreviewOpen(true);\r\n        setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1));\r\n    };\r\n    const handleChange = ({ fileList: newFileList }) => setFileList(newFileList);\r\n    const uploadButton = (\r\n        <button\r\n            style={{\r\n                border: 0,\r\n                background: 'none',\r\n            }}\r\n            type=\"button\"\r\n        >\r\n            <PlusOutlined />\r\n            <div\r\n                style={{\r\n                    marginTop: 8,\r\n                }}\r\n            >\r\n                Upload\r\n            </div>\r\n        </button>\r\n    );\r\n    const onFinish = async (values) => {\r\n        setIsLoading(true);\r\n        const userData = { ...values, dob: moment(values.dob).format(\"MM/DD/YYYY\") };\r\n\r\n        try {\r\n            const response = await axios.post(API_URL + \"api/auth/register\", userData);\r\n            if (recentAddedMembers.length >= 5) {\r\n                recentAddedMembers.splice(-1);\r\n            }\r\n            setRecentAddedMembers([response.data, ...recentAddedMembers]);\r\n            form.resetFields();\r\n            message.success(\"Thêm thành viên thành công!\");\r\n        } catch (error) {\r\n            console.log(error);\r\n            message.error(\"Thêm thành viên thất bại!\");\r\n        }\r\n\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const getMembers = async () => {\r\n            try {\r\n                const response = await axios.get(API_URL + \"api/users/allmembers\");\r\n                const recentMembers = response.data.slice(0, 5);\r\n                setRecentAddedMembers(recentMembers);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        };\r\n\r\n        getMembers();\r\n    }, [API_URL]);\r\n    const handleImageUpload = (info) => {\r\n        const { file } = info;\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            setSelectedImage(e.target.result);\r\n        };\r\n\r\n        if (file) {\r\n            reader.readAsDataURL(file);\r\n        }\r\n    };\r\n    // useEffect(() => {\r\n    //     const fetchData = async () => {\r\n    //         try {\r\n    //             const transactions = await UserController.getUser(user.user._id);\r\n    //             console.log(\"user\", transactions)\r\n\r\n    //             setUsers(transactions);\r\n    //             console.log(\"userlalala\", users)\r\n    //         } catch (error) {\r\n    //             console.error('Error fetching user:', error);\r\n    //         }\r\n    //     };\r\n    //     fetchData();     // Gọi fetchData để lấy dữ liệu\r\n\r\n    // }, []);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const transactions = await UserController.getUser(user.user._id);\r\n                console.log(\"user\", transactions)\r\n                setUsers(transactions);\r\n            } catch (error) {\r\n                console.error('Error fetching user:', error);\r\n            }\r\n        };\r\n        fetchData(); // Gọi fetchData để lấy dữ liệu\r\n\r\n    }, [user.user._id]); // Thêm user.user._id vào mảng dependencies\r\n\r\n    useEffect(() => {\r\n        console.log(\"userlalala\", users.userType);\r\n    }, [users]); // Log giá trị của users khi nó được cập nhật\r\n    form.setFieldsValue({\r\n        address: users.address,\r\n        age: users.age,\r\n        dob: users.dob,\r\n        email: users.email,\r\n        gender: users.gender,\r\n        isAdmin: users.isAdmin,\r\n        mobileNumber: users.mobileNumber,\r\n        password: users.password,\r\n        photo: users.photo,\r\n        points: users.points,\r\n        userFullName: users.userFullName,\r\n        userType: users.userType,\r\n        _id: users._id\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"dashboard-option-title\">Thông tin cá nhân</p>\r\n            <div className=\"dashboard-title-line\"></div>\r\n\r\n            <Form\r\n                form={form}\r\n                onFinish={onFinish}\r\n                layout=\"vertical\"\r\n                style={{ margin: 33, }}\r\n                initialValues={users}\r\n            >\r\n\r\n                <Row gutter={16}>\r\n                    <Col span={8}>\r\n                        <Form.Item name=\"userType\" label=\"User Type\" rules={[{ required: true, message: 'Please select user type!' }]}>\r\n                            <Select placeholder={users ? users.userType : ''} onChange={(value) => setUserType(value)}>\r\n                                <Select.Option value=\"Student\">Student</Select.Option>\r\n                                <Select.Option value=\"Teacher\">Teacher</Select.Option>\r\n                                <Select.Option value=\"Saft\">Saft</Select.Option>\r\n\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"userFullName\" label=\"Họ và tên\" rules={[{ required: true, message: 'Please enter full name!' }]}>\r\n                            <Input placeholder={users ? users.userFullName : ''} />\r\n                        </Form.Item>\r\n\r\n                        {/* <Form.Item name={userType === \"Student\" ? \"admissionId\" : \"employeeId\"} label=\"Mã thẻ\" rules={[{ required: true, message: 'Please enter ID!' }]}>\r\n                            <Input placeholder={users ? users.gender : ''} />\r\n                        </Form.Item> */}\r\n                        <Form.Item name=\"mobileNumber\" label=\"Số điện thoại\" rules={[{ required: true, message: 'Please enter mobile number!' }]}>\r\n                            <Input placeholder={users ? users.mobileNumber : '08594620468 '} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item name=\"gender\" label=\"Giới tính\" rules={[{ required: true, message: 'Please select gender!' }]}>\r\n                            <Select placeholder={users ? users.gender : '08594620468 '} fluid selection value={gender} onChange={(value) => setGender(value)}>\r\n                                <Select.Option value=\"Nam\">Nam</Select.Option>\r\n                                <Select.Option value=\"Nữ\">Nữ</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n\r\n                    <Col span={8}>\r\n                        <Form.Item name=\"address\" label=\"Địa chỉ\" rules={[{ required: true, message: 'Please enter address!' }]}>\r\n                            <Input placeholder={users ? users.address : ''} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"email\" label=\"Email\" rules={[{ required: true, message: 'Please enter email!', type: 'email' }]}>\r\n                            <Input placeholder={users ? users.email : '457683'} />\r\n                            {/* <Input value={users ? users.email : '457683'} /> */}\r\n\r\n                        </Form.Item>\r\n                        <Form.Item name=\"password\" label=\"Mật khẩu\" rules={[{ required: true, message: 'Please enter password!' }]}>\r\n                            <Input.Password value={users ? users.password : ''} />\r\n\r\n                        </Form.Item>\r\n\r\n\r\n\r\n                        <Form.Item name=\"password\" label=\"Nhập lại mật khẩu\" rules={[{ required: true, message: 'Please enter password!' }]}>\r\n                            <Input.Password value={users ? users.password : ''} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={8}>\r\n\r\n                        <Form.Item name=\"dob\" label=\"Ngày sinh\" rules={[{ required: true, message: 'Please select date of birth!' }]}>\r\n                            <DatePicker placeholder={users ? users.dob : '457683'} format=\"DD/MM/YYYY\" />\r\n                        </Form.Item>\r\n                        {/* <DatePicker value={users ? users.dob : '457683'} format=\"DD/MM/YYYY\" /> */}\r\n\r\n                        <Form.Item\r\n                            label=\"Ảnh bìa\"\r\n                            name=\"coverImage\"\r\n                            rules={[{ required: true, message: 'Vui lòng tải lên ảnh bìa sách!' }]}\r\n                        >\r\n                            <Upload\r\n                                // action=\"https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188\"\r\n                                listType=\"picture-circle\"\r\n                                // fileList={fileList}\r\n                                onPreview={handlePreview}\r\n                                onChange={handleChange}\r\n                            >\r\n                                {fileList.length >= 8 ? null : uploadButton}\r\n                            </Upload>\r\n                            <Modal open={previewOpen} title={previewTitle} footer={null} onCancel={handleCancel}>\r\n                                <img\r\n                                    alt=\"example\"\r\n                                    style={{\r\n                                        width: '100%',\r\n                                    }}\r\n                                    src={previewImage}\r\n                                />\r\n                            </Modal>\r\n                        </Form.Item>\r\n                    </Col>\r\n\r\n\r\n                </Row>\r\n\r\n                <Form.Item\r\n                    style={{\r\n                        paddingTop: 24,\r\n                    }}\r\n                >\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n                        Lưu thông tin\r\n                    </Button>\r\n\r\n                </Form.Item>\r\n            </Form>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info;","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\index.js",[],["607","608"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\App.js",["609","610"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\reportWebVitals.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Context\\AuthContext.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\AdminDashboard.js",["611","612","613","614","615"],"\nimport React, { useState } from 'react';\nimport { Breadcrumb, Layout, Menu, theme } from 'antd';\nimport {\n    UserOutlined, BookOutlined, ReadOutlined, TeamOutlined, UserAddOutlined, LogoutOutlined,\n    NotificationOutlined\n} from '@ant-design/icons';\nimport AddTransaction from './Components/AddTransaction.js'\nimport AddMember from './Components/AddMember.js'\nimport AddBook from './Components/AddBook.js';\nimport ManagerBook from './Components/ManagerBook.js';\nimport Return from './Components/Return.js';\nimport GetMember from './Components/GetMember.js';\nimport Info from './Components/info.js';\nconst { Header, Content, Sider } = Layout;\n\n\n\nconst { SubMenu } = Menu;\n\nfunction AdminDashboard() {\n    const {\n        token: { colorBgContainer, borderRadiusLG },\n    } = theme.useToken();\n    const [active, setActive] = useState(\"manabook\");\n    const [collapsed, setCollapsed] = useState(false);\n\n    const handleClick = (e) => {\n        setActive(e.key);\n    };\n\n    const handleCollapse = () => {\n        setCollapsed(!collapsed);\n    };\n\n    const logout = () => {\n        localStorage.removeItem(\"user\");\n        // Redirect to SignIn page\n        window.location.href = '/signin';\n    };\n\n    return (\n        <Layout style={{ minHeight: '100vh' }}>\n            <Sider\n                collapsible\n                collapsed={collapsed}\n                onCollapse={handleCollapse}\n                width={250} // Adjust sidebar width here\n            >\n                <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\" onClick={handleClick} selectedKeys={[active]}>\n\n                    <SubMenu key=\"book\" icon={<BookOutlined />} title=\"Quản lý sách\" style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                        <Menu.Item key=\"manabook\" style={{ fontSize: '16px', fontWeight: 'bold' }}>Quản lý sách</Menu.Item>\n                        <Menu.Item key=\"addbook\" style={{ fontSize: '16px', fontWeight: 'bold' }}>Thêm sách</Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"transaction\" icon={<ReadOutlined />} title=\"Quản lý mượn trả\" style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                        <Menu.Item key=\"addtransaction\" style={{ fontSize: '16px', fontWeight: 'bold' }}>Mượn sách</Menu.Item>\n                        <Menu.Item key=\"returntransaction\" style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                            Trả sách\n                        </Menu.Item>\n                    </SubMenu>\n\n                    <Menu.Item key=\"getmember\" icon={< TeamOutlined />} style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                        Quản lý độc giả\n                    </Menu.Item>\n                    {/* <Menu.Item key=\"profile\" icon={<UserOutlined />} style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                        Thông tin cá nhân\n                    </Menu.Item> */}\n                    <Menu.Item key=\"logout\" icon={<LogoutOutlined />} onClick={logout} style={{ fontSize: '16px', fontWeight: 'bold' }}>\n                        Đăng xuất\n                    </Menu.Item>\n                </Menu>\n            </Sider>\n            <Content\n                style={{\n                    padding: 24,\n                    margin: 20,\n                    minHeight: 280,\n                    width: 300,\n                    background: colorBgContainer,\n                    borderRadius: borderRadiusLG,\n                }}\n            >\n                <div className=\"dashboard-option-content\">\n                    <div className=\"dashboard-addbooks-content\" style={active !== \"addbook\" ? { display: 'none' } : {}}>\n                        <AddBook />\n                    </div>\n                    <div className=\"dashboard-addbooks-content\" style={active !== \"manabook\" ? { display: 'none' } : {}}>\n                        < ManagerBook />\n                    </div>\n                    <div className=\"dashboard-transactions-content\" style={active !== \"addtransaction\" ? { display: 'none' } : {}}>\n                        <AddTransaction />\n                    </div>\n                    <div className=\"dashboard-addmember-content\" style={active !== \"addmember\" ? { display: 'none' } : {}}>\n                        <AddMember />\n                    </div>\n                    <div className=\"dashboard-addmember-content\" style={active !== \"getmember\" ? { display: 'none' } : {}}>\n                        <GetMember />\n                    </div>\n                    <div className=\"dashboard-addmember-content\" style={active !== \"returntransaction\" ? { display: 'none' } : {}}>\n                        <Return />\n                    </div>\n\n                    <div className=\"dashboard-profile-content\" style={active !== \"profile\" ? { display: 'none' } : {}}>\n                        < Info />\n                    </div>\n\n                </div>\n            </Content>\n\n        </Layout>\n    );\n}\n\nexport default AdminDashboard;\n","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\MemberDashboard.js",["616","617","618","619","620","621","622","623"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Home.js",["624"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Signin.js",["625"],"import React, { useContext, useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { AuthContext } from '../Context/AuthContext.js'\nimport './Signin.css'\nimport { userService } from \"../services/authentication.service\";\n\nimport { useHistory } from 'react-router-dom';\n\nfunction Signin() {\n    const [email, setEmail] = useState(\"\")\n\n    const [error, setError] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const { dispatch } = useContext(AuthContext)\n\n    const API_URL = process.env.REACT_APP_API_URL\n\n    const loginCall = async (userCredential, dispatch) => {\n        dispatch({ type: \"LOGIN_START\" });\n        try {\n            const res = await axios.post(API_URL + \"api/auth/signin\", userCredential);\n            console.log(\"Kiet login1 =>\", res.data);\n            console.log(\"Kiet userCredential =>\", userCredential);\n            userService.setToken(res.data.accessToken);\n            dispatch({ type: \"LOGIN_SUCCESS\", payload: res.data });\n\n            alert(\"Đăng nhập thành công!!\")\n\n        }\n        catch (err) {\n            dispatch({ type: \"LOGIN_FAILURE\", payload: err });\n            setError(\"Sai mật khẩu hoặc tên đăng nhập\");\n        }\n    }\n\n    const handleForm = (e) => {\n        e.preventDefault();\n        loginCall({ email, password }, dispatch);\n\n    }\n    const { user } = useContext(AuthContext);\n    const history = useHistory();\n\n    useEffect(() => {\n        console.log(\"nguoi dung\", user)\n        if (user) {\n            if (user.isAdmin) {\n                history.push('/dashboard@admin');\n            }\n            else {\n                history.push('/dashboard@member');\n            }\n        }\n    }, [user, history]);\n\n    return (\n        <div className='signin-container'>\n            <div className=\"signin-card\">\n                <form onSubmit={handleForm}>\n                    <h2 className=\"signin-title\">Đăng nhập</h2>\n                    <p className=\"line\"></p>\n\n\n                    <div className=\"error-message\">\n                        <p>\n                            {error}\n                        </p>\n                    </div>\n\n                    <div className=\"signin-fields\">\n                        <label > <b>Email</b></label>\n                        <input\n                            type=\"email\"\n                            placeholder=\"Nhập Email\"\n                            name=\"email\"\n                            className=\"signin-textbox\"\n                            required\n                            onChange={e => { setEmail(e.target.value); setError(\"\") }}\n                        />\n\n                        <label htmlFor=\"password\"><b>Mật khẩu</b></label>\n                        <input\n                            type=\"password\"\n                            className=\"signin-textbox\"\n                            minLength='6'\n                            placeholder='Nhập mật khẩu'\n                            name='psw'\n                            required\n                            onChange={e => setPassword(e.target.value)}\n                        />\n\n                    </div>\n\n                    <button className=\"signin-button\">\n                        Đăng nhập\n                    </button>\n\n                    <a href=\"#\" className=\"forget-pass\">Bạn quên mật khẩu?</a>\n\n\n                </form>\n                <div className='signup-option'>\n                    <p className=\"signup-question\">Bạn chưa có tài khoản? <a href=\"/signup\" className=\"forget-pass\">Đăng ký ngay</a></p>\n                </div>\n            </div>\n        </div>\n\n\n    )\n\n\n\n\n\n\n}\n\n\nexport default Signin;","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Signup.js",["626","627","628"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Upload.js",["629"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Context\\AuthReducer.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Header\\Header.js",["630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646"],"import { React, useState, useRef, useEffect, useContext } from 'react'\nimport { Link } from 'react-router-dom'\nimport './Header.css';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { FaSearch } from \"react-icons/fa\";\nimport { AuthContext } from \"../../Context/AuthContext.js\"\nimport { useHistory } from \"react-router-dom\";\nimport Navbar from \"../Navbar/Navbar\";\nimport io from 'socket.io-client';\nimport moment from 'moment';\n// import {userService} from \"../services/authentication.service\";\nimport { userService } from '../../services/authentication.service.js';\n\nimport {\n    Avatar,\n    Badge,\n    Drawer,\n    Button,\n    List,\n    Skeleton,\n    Collapse,\n    Typography,\n    Form,\n    Modal,\n    Row,\n    Col,\n} from 'antd';\nimport { BellOutlined } from '@ant-design/icons';\nconst { Panel } = Collapse;\nconst { Text } = Typography;\n\nconst count = 10;\nconst fakeDataUrl = `https://randomuser.me/api/?results=${count}&inc=name,gender,email,nat,picture&noinfo`;\nfunction Header() {\n    const [menutoggle, setMenutoggle] = useState(false)\n    const [form] = Form.useForm();\n    const history = useHistory();\n    const [initLoading, setInitLoading] = useState(true);\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const [list, setList] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [countNotify, setCountNotify] = useState(0);\n    const [notifyStaff, setNotifyStaff] = useState(false);\n    const [notifyUser, setNotifyUser] = useState(false);\n    const [selectedNotify, setSelectedNotify] = useState(false);\n\n    const [socket, setSocket] = useState(null);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const { user } = useContext(AuthContext);\n    console.log(\"user=> login\", user)\n    // lay count  Notify\n    const handleOk = () => {\n        setIsModalOpen(false);\n\n    };\n    const handleCancel = () => {\n        setIsModalOpen(false);\n\n    };\n    const showModal = (record) => {\n\n        // form.setFieldsValue({\n        //     // _id: record._id,\n        //     language: record.language,\n        //     image_url: record.image_url,\n        //     publisher: record.publisher,\n        //     description: record.description,\n        //     categories: record.categories, // Kiểm tra xem tên trường có đúng không\n        //     bookName: record.bookName,\n        //     author: record.author,\n        //     bookCountAvailable: record.bookCountAvailable,\n        //     bookCount: record.bookCount\n        // });\n        // if (record.image_url) {\n        //     // setImageURL(record.image_url);\n        // }\n        setSelectedNotify(record);\n        handleNotifyClick(record)\n        setIsModalOpen(true); // Hiển thị Modal\n\n\n    };\n\n    // useEffect(() => {\n    //     const fetchData = async () => {\n    //         try {\n    //             console.log(\"user._id\", user._id)\n    //             if (user.isAdmin) {\n    //                 const response = await fetch(`http://localhost:5000/api/notify/countSaft/${user._id}`); // Thay đổi URL tùy thuộc vào đường dẫn của API\n    //                 if (!response.ok) {\n    //                     throw new Error('Failed to fetch books');\n    //                 }\n    //                 const data = await response.json();\n    //                 setCountNotify(data); // Cập nhật state allBooks với dữ liệu từ API\n    //             }\n    //             else {\n    //                 const response = await fetch(`http://localhost:5000/api/notify/countUesr/${user._id}`); // Thay đổi URL tùy thuộc vào đường dẫn của API\n    //                 if (!response.ok) {\n    //                     throw new Error('Failed to fetch books');\n    //                 }\n    //                 const data = await response.json();\n    //                 setCountNotify(data); // Cập nhật state allBooks với dữ liệu từ API\n    //             } // Cập nhật state allBooks với dữ liệu từ API\n    //         } catch (error) {\n    //             console.error('Error fetching books:', error);\n    //         }\n    //     };\n\n    //     fetchData(); // Gọi fetchData để lấy dữ liệu\n    //     const newSocket = io('http://localhost:8888'); // Thay đổi URL phù hợp với máy chủ của bạn\n    //     setSocket(newSocket);\n\n    //     // Lắng nghe sự kiện từ máy chủ\n    //     newSocket.on('dataChanged', () => {\n    //         // Khi có sự thay đổi, gọi lại fetchData để cập nhật số lượng thông báo\n    //         fetchData();\n    //     });\n\n    //     // Cleanup function để đóng kết nối khi component unmount\n    //     return () => {\n    //         newSocket.disconnect();\n    //     };\n    // }, []);\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (user.isAdmin) {\n                    const response = await fetch(`http://localhost:5000/api/notify/countSaft/${user._id}`,\n                        {\n                            headers: {\n                                'Authorization': userService.getToken()\n                            }\n                        }\n                    );\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch books');\n                    }\n                    const data = await response.json();\n                    setCountNotify(data);\n                } else {\n                    const response = await fetch(`http://localhost:5000/api/notify/countUesr/${user._id}`,\n                        {\n                            headers: {\n                                'Authorization': userService.getToken()\n                            }\n                        });\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch books');\n                    }\n                    const data = await response.json();\n                    setCountNotify(data);\n                    console.log(\"test\", countNotify)\n                    console.log(\"user._id\", user._id)\n\n                }\n            } catch (error) {\n                console.error('Error fetching books:', error);\n            }\n        };\n\n        fetchData();\n        const newSocket = io('http://localhost:8888');\n        setSocket(newSocket);\n\n        newSocket.on('dataChanged', () => {\n            fetchData();\n        });\n\n        return () => {\n            newSocket.disconnect();\n        };\n    }, []);\n\n    //  lấy thông tin Notify\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                if (user.isAdmin) {\n                    const response = await fetch(`http://localhost:5000/api/notify/staff-notify/${user._id}`,\n                        {\n                            headers: {\n                                'Authorization': userService.getToken()\n                            }\n                        }); // Thay đổi URL tùy thuộc vào đường dẫn của API\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch books');\n                    }\n                    const data = await response.json();\n                    setNotifyStaff(data); // Cập nhật state allBooks với dữ liệu từ API\n                }\n                else {\n                    const response = await fetch(`http://localhost:5000/api/notify/user-notify/${user._id}`,\n                        {\n                            headers: {\n                                'Authorization': userService.getToken()\n                            }\n                        }); // Thay đổi URL tùy thuộc vào đường dẫn của API\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch books');\n                    }\n                    const data = await response.json();\n                    setNotifyUser(data); // Cập nhật state allBooks với dữ liệu từ API\n                }\n\n\n            } catch (error) {\n                console.error('Error fetching books:', error);\n            }\n        };\n\n        fetchData(); // Gọi fetchData để lấy dữ liệu\n        const newSocket = io('http://localhost:8888'); // Thay đổi URL phù hợp với máy chủ của bạn\n        setSocket(newSocket);\n\n        // Lắng nghe sự kiện từ máy chủ\n        newSocket.on('dataChanged', () => {\n            // Khi có sự thay đổi, gọi lại fetchData để cập nhật số lượng thông báo\n            fetchData();\n        });\n\n        // Cleanup function để đóng kết nối khi component unmount\n        return () => {\n            newSocket.disconnect();\n        };\n\n    }, []);\n    const handleNotifyClick = async (notify) => {\n        try {\n            // Gọi API để cập nhật NotifyStatus của thông báo\n            await fetch(`http://localhost:5000/api/notify/update/${notify._id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': userService.getToken()\n                },\n                body: JSON.stringify({ NotifyStatus: 0 }),\n            });\n            socket.emit('notifyChange');\n            // Cập nhật lại danh sách thông báo trên giao diện\n            if (user.isAdmin) {\n                const response = await fetch(`http://localhost:5000/api/notify/countSaft/${user._id}`,\n                    {\n                        headers: {\n                            'Authorization': userService.getToken()\n                        }\n                    }); // Thay đổi URL tùy thuộc vào đường dẫn của API\n                if (!response.ok) {\n                    throw new Error('Failed to fetch books');\n                }\n                const data = await response.json();\n                setCountNotify(data); // Cập nhật state allBooks với dữ liệu từ API\n            }\n            else {\n                const response = await fetch(`http://localhost:5000/api/notify/countUesr/${user._id},\n                {\n                    headers: {\n                      'Authorization': userService.getToken()\n                    }\n                  }`); // Thay đổi URL tùy thuộc vào đường dẫn của API\n                if (!response.ok) {\n                    throw new Error('Failed to fetch books');\n                }\n                const data = await response.json();\n                setCountNotify(data); // Cập nhật state allBooks với dữ liệu từ API\n            } // Cập nhật state allBooks với dữ liệu từ API\n        } catch (error) {\n            console.error('Error updating notify:', error);\n        }\n    };\n\n    console.log(\"dem\", countNotify)\n    // console.log(\"dem\", notifyUser)\n\n    const onChange = (key) => {\n        console.log(key);\n    };\n    const showDrawer = () => {\n        setOpen(true);\n    };\n    const onClose = () => {\n        setOpen(false);\n    };\n    const Toggle = () => {\n        setMenutoggle(!menutoggle)\n    }\n\n    const closeMenu = () => {\n        setMenutoggle(false)\n    }\n\n\n\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n\n    const handleSearch = (event) => {\n        event.preventDefault();\n        // Gửi yêu cầu tìm kiếm\n        console.log(\"Từ khóa tìm kiếm:\", searchTerm);\n\n        history.push(`/search/${searchTerm}`);\n\n    };\n\n    const handleKeyPress = (event) => {\n        if (event.key === \"Enter\") {\n            handleSearch(event);\n        }\n    };\n    // thong bao \n    useEffect(() => {\n        fetch(fakeDataUrl)\n            .then((res) => res.json())\n            .then((res) => {\n                setInitLoading(false);\n                setData(res.results);\n                setList(res.results);\n            });\n    }, []);\n    const onLoadMore = () => {\n        setLoading(true);\n        setList(\n            data.concat(\n                [...new Array(count)].map(() => ({\n                    loading: true,\n                    name: {},\n                    picture: {},\n                })),\n            ),\n        );\n        fetch(fakeDataUrl)\n            .then((res) => res.json())\n            .then((res) => {\n                const newData = data.concat(res.results);\n                setData(newData);\n                setList(newData);\n                setLoading(false);\n                // Resetting window's offsetTop so as to display react-virtualized demo underfloor.\n                // In real scene, you can using public method of react-virtualized:\n                // https://stackoverflow.com/questions/46700726/how-to-use-public-method-updateposition-of-react-virtualized\n                window.dispatchEvent(new Event('resize'));\n            });\n    };\n    const loadMore =\n        !initLoading && !loading ? (\n            <div\n                style={{\n                    textAlign: 'center',\n                    marginTop: 12,\n                    height: 32,\n                    lineHeight: '32px',\n                }}\n            >\n                <Button onClick={onLoadMore}>loading more</Button>\n            </div>\n        ) : null;\n\n    return (\n        <div className=\"header\">\n            <div className=\"logo-nav\">\n                <Link to=\"/\">\n                    <a href=\"#home\">THƯ VIỆN MTA </a>\n                </Link>\n            </div>\n            <div className=\"nav-right\">\n\n                <div className=\"search-container\">\n                    <input className=\"search-input\" type=\"text\" placeholder=\"Tìm kiếm...\"\n                        value={searchTerm}\n                        onChange={(event) => setSearchTerm(event.target.value)}\n                        onKeyUp={handleKeyPress}\n\n                    />\n\n                </div>\n\n\n                <ul className={menutoggle ? \"nav-options active\" : \"nav-options\"}>\n                    <li className=\"option\" onClick={() => { closeMenu() }}>\n                        <Link to=\"/\">\n                            <a href=\"#home\">Trang chủ</a>\n                        </Link>\n                    </li>\n                    <li className=\"option\" onClick={() => { closeMenu() }}>\n                        <Link to=\"/books\">\n                            <a href=\"#books\">Kho sách</a>\n                        </Link>\n                    </li>\n\n                    {!user ? (\n                        <>\n                            <li className=\"option\" onClick={() => { closeMenu() }}>\n                                <Link to=\"/signin\">\n                                    <a href=\"signin\">Đăng nhập</a>\n                                </Link>\n                            </li>\n\n                            <li className=\"option\" onClick={() => { closeMenu() }}>\n                                <Link to=\"/signup\">\n                                    <a href=\"signup\">Đăng ký</a>\n                                </Link>\n                            </li>\n\n\n                        </>\n                    ) : (\n                        <>\n                            <li className=\"option\" onClick={() => { closeMenu() }}>\n                                <Link to=\"/signin\">\n                                    <a href=\"signin\">Admin</a>\n                                </Link>\n                            </li>\n                            <li className=\"option\" onClick={() => { closeMenu() }}>\n                                <a href=\"#\">\n                                    <Badge count={countNotify}>\n                                        {/* <Avatar shape=\"square\" size=\"large\" /> */}\n                                        <div className=\"bell-icon\">\n                                            <BellOutlined\n                                                style={{\n                                                    fontSize: '25px',\n                                                    color: '#fff',\n                                                    padding: '4px'\n                                                }}\n                                                onClick={showDrawer}\n                                            />\n                                        </div>\n                                    </Badge>\n                                </a>\n                            </li>\n                        </>\n                    )}\n\n                </ul>\n            </div>\n            <div className=\"mobile-menu\" onClick={() => { Toggle() }}>\n                {menutoggle ? (\n                    <ClearIcon className=\"menu-icon\" style={{ fontSize: 40 }} />\n                ) : (\n                    <MenuIcon className=\"menu-icon\" style={{ fontSize: 40 }} />\n                )}\n            </div>\n\n            {/* <Drawer title=\"Thông báo\" onClose={onClose} open={open}>\n                <List\n                    className=\"demo-loadmore-list\"\n                    loading={initLoading}\n                    itemLayout=\"horizontal\"\n                    loadMore={loadMore}\n                    // dataSource={notifyStaff} // Sử dụng user.isAdmin để xác định người dùng có phải là admin không\n\n                    dataSource={user && user.isAdmin ? notifyStaff : notifyUser} // Sử dụng user.isAdmin để xác định người dùng có phải là admin không\n                    renderItem={(item) => (\n                        <List.Item>\n                            <List.Item.Meta\n                                title={<a onClick={() => handleNotifyClick(item)}>{item.NotifyName}</a>}\n                                description={item.description} // Hiển thị mô tả của thông báo\n                            />\n                        </List.Item>\n                    )}\n                />\n            </Drawer> */}\n\n            <Drawer title=\"Thông báo\" onClose={onClose} open={open}>\n                <List\n                    className=\"demo-loadmore-list\"\n                    loading={initLoading}\n                    itemLayout=\"horizontal\"\n                    loadMore={loadMore}\n                    dataSource={user && user.isAdmin ? notifyStaff : notifyUser}\n                    renderItem={(item) => (\n                        <List.Item className={item.NotifyStatus === 1 ? 'unread' : 'read'}>\n                            <List.Item.Meta\n                                title={\n                                    <a\n                                        onClick={() => {\n                                            showModal(item);\n                                            // item.NotifyStatus = 0; // Cập nhật trạng thái đã đọc\n                                        }}\n                                    >\n                                        {item.NotifyName}\n                                    </a>\n                                }\n                                description={item.description}\n                            />\n                        </List.Item>\n                    )}\n                />\n            </Drawer>\n\n            <Modal\n                title=\"Thông báo\"\n                open={isModalOpen}\n                onCancel={handleCancel}\n                footer={[\n                    <Button key=\"huy\" type=\"primary\" onClick={handleCancel}>\n                        Cancel\n                    </Button>,\n                ]}\n            >\n                {selectedNotify && (\n                    <Form style={{ margin: 33 }}>\n                        {selectedNotify.NotifyName && (\n                            <Form.Item name=\"NotifyName\" label=\"Tiêu đề\">\n                                {selectedNotify.NotifyName}\n                            </Form.Item>\n                        )}\n                        {selectedNotify.description && (\n                            <Form.Item name=\"description\" label=\"Mô tả\">\n                                {selectedNotify.description}\n                            </Form.Item>\n                        )}\n                        {selectedNotify.transactions && (\n                            <Form.Item name=\"transactions\" label=\"Mã giao dịch\">\n                                {selectedNotify.transactions}\n                            </Form.Item>\n                        )}\n                        {selectedNotify.books && (\n                            <Form.Item name=\"books\" label=\"Mã sách\">\n                                {selectedNotify.books}\n                            </Form.Item>\n                        )}\n                        {selectedNotify.user && (\n                            <Form.Item name=\"user\" label=\"Mã người dùng\">\n                                {selectedNotify.user}\n                            </Form.Item>\n                        )}\n                        {selectedNotify.staff_creat && (\n                            <Form.Item name=\"staff_creat\" label=\"Mã nhân viên tạo\">\n                                {selectedNotify.staff_creat}\n                            </Form.Item>\n                        )}\n                        {selectedNotify.staff_edit && (\n                            <Form.Item name=\"staff_edit\" label=\"Mã nhân viên cập nhật\">\n                                {selectedNotify.staff_edit}\n                            </Form.Item>\n                        )}\n                        {selectedNotify.createdAt && (\n                            <Form.Item name=\"createdAt\" label=\"Thời gian cập nhật\">\n                                {moment(selectedNotify.createdAt).format('ss:mm:HH DD/MM/YYYY ')}\n                            </Form.Item>\n                        )}\n                    </Form>\n                )}\n\n            </Modal>\n        </div >\n\n\n\n\n    )\n}\n\nexport default Header\n","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookDetails\\BookDetails.js",["647","648"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookList\\BookList.js",["649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\BookList\\ListCate.js",["668","669","670"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Search\\Search.js",["671","672"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Cart\\Cart.jsx",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddTransaction.js",["673","674","675","676","677","678","679","680","681","682"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Select, DatePicker, Table, Typography, Button, Form, Row, Col, message } from 'antd';\nimport axios from 'axios';\nimport { AuthContext } from '../../../../Context/AuthContext';\nimport moment from 'moment';\nimport Loading from '../../../../Components/Loader/Loader';\nimport TransController from '../../../../Controller/TransactionController';\nimport UserController from '../../../../Controller/UserController';\nimport BookController from '../../../../Controller/bookController';\nimport io from 'socket.io-client';\n\nimport {\n  Paper,\n  TableContainer,\n  TablePagination\n} from \"@mui/material\"\n// import \"./adtransaction.css\"\n\nconst { Option } = Select;\nconst { Title } = Typography;\n\nfunction AddTransaction() {\n  const API_URL = process.env.REACT_APP_API_URL;\n  const { user } = useContext(AuthContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const [borrowerId, setBorrowerId] = useState('');\n  const [bookIds, setBookIds] = useState([]);\n\n  const [transactionType, setTransactionType] = useState('');\n  const [toDate, setToDate] = useState(null);\n  const [allMembers, setAllMembers] = useState([]);\n  const [allBooks, setAllBooks] = useState([]);\n  const [allTransactions, setAllTransactions] = useState([]);\n  const [fromDate, setFromDate] = useState(null)\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n\n\n\n\n  const transactionTypes = [\n    { value: 'Reserved', text: 'Đặt trước' },\n    { value: 'Issued', text: 'Mượn luôn' },\n  ];\n  // lay danh sach transaction chua xu ly\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let transactions;\n        // if (borrowerId === null) {\n        transactions = await TransController.getAllTrans();\n        // } else {\n        //   transactions = await TransController.getTransByUser(borrowerId);\n        // }\n\n        const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n        setAllTransactions(activeTransactions);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      }\n    };\n    fetchData();     // Gọi fetchData để lấy dữ liệu\n\n  }, []); // useEffect sẽ chỉ chạy một lần sau khi render lần đầu tiên\n  const fetchUserTransactions = async (userId) => {\n    try {\n      const transactions = await TransController.getTransByUser(userId);\n      console.log(\"user trans\", transactions)\n      const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n      setAllTransactions(activeTransactions);\n    } catch (error) {\n      console.error('Error fetching user transactions:', error);\n    }\n  };\n  // lay danh sach nguoi dung khong phai la admin\n  useEffect(() => {\n    const fetchData = async () => {\n\n      try {\n        const allUser = await UserController.getAllUsers();\n        // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n        const Users = allUser.filter(user => user && user.isAdmin !== true);\n        setAllMembers(Users); // Đặt danh sách các giao dịch \"Active\" vào state\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      }\n    };\n\n    fetchData(); // Gọi fetchData để lấy dữ liệu\n\n  }, []);\n  // lấy tất cả cuốn sách \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const allBooks = await BookController.getAllBooks();\n        setAllBooks(allBooks);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      }\n    };\n\n    fetchData(); // Gọi fetchData để lấy dữ liệu\n\n  }, []);\n  const handleBookSelection = selectedBooks => {\n    setBookIds(selectedBooks);\n  };\n  const handleSelectUser = (userId) => {\n    setBorrowerId(userId)\n    fetchUserTransactions(userId);\n  };\n\n\n  const socket = io('http://localhost:8888');\n\n\n  const addTransaction = async (values) => {\n    try {\n      setIsLoading(true);\n\n      // Extracting form values\n      const { borrowerId, bookIds, transactionType, fromDate, toDate } = values;\n\n\n      const transactionData = {\n        books: bookIds,\n        borrowerId: borrowerId,\n        transactionType: transactionType,\n        fromDate: fromDate,\n        toDate: toDate,\n        returnDate: null\n        // isAdmin: user.isAdmin,\n      };\n\n      // Adding transaction\n      await TransController.addTransaction(transactionData);\n      const Transactions = await TransController.getAllTrans();\n\n      // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n      // const activeTransactions = allTransactions.filter(transaction => transaction && transaction.transactionStatus === \"Active\");\n      const activeTransactions = Transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n      console.log(\"Transactions\", Transactions)\n\n      setAllTransactions(activeTransactions);\n      // Alerting success message\n      alert('Tạo phiếu mượn thành công 🎉');\n      //   } else {\n      //     alert('Cuốn sách này đã hết hoặc không phù hợp loại giao dịch');\n      //   }\n      // } else {\n      //   alert('Vui lòng điền đầy đủ thông tin');\n      // }\n      socket.emit('notifyChange');\n    } catch (err) {\n      console.log(err);\n      alert('Đã xảy ra lỗi khi tạo phiếu mượn');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleUpdateTransaction = async (transactionId) => {\n    try {\n      const data = {\n        staff_creat: user.user._id,\n        transactionStatus: \"True\"\n      };\n      // Gọi hàm updateTransaction từ TransController để cập nhật giao dịch\n      const updatedTransaction = await TransController.updateTransaction(transactionId, data);\n      const Transactions = await TransController.getAllTrans();\n\n      // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n      // const activeTransactions = allTransactions.filter(transaction => transaction && transaction.transactionStatus === \"Active\");\n\n      console.log('Transaction updated:', updatedTransaction);\n      alert('cập nhật thành công 🎉');\n      socket.emit('notifyChange');\n      const activeTransactions = Transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n      console.log(\"thanh\", Transactions)\n\n      setAllTransactions(activeTransactions);\n\n      const allBooks = await BookController.getAllBooks();\n      setAllBooks(allBooks);\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n    }\n  };\n\n\n  if (isLoading) return <Loading />;\n\n  return (\n    <div>\n      <Title level={2}>Tạo phiếu mượn sách</Title>\n      {/* Form for adding transaction */}\n      <Form\n        // form={form}\n        onFinish={addTransaction}\n        layout=\"vertical\"\n        style={{ margin: 33, }}\n\n      >\n        <Row gutter={14}>\n          <Col span={11}>\n            <Form.Item\n              label=\"Độc giả\"\n              name=\"borrowerId\"\n              rules={[{ required: true, message: 'Vui lòng chọn độc giả' }]}\n              labelStyle={{ fontSize: '20px' }} // Thêm style cho nhãn\n            >\n              <Select\n                placeholder=\"Chọn độc giả\"\n                onChange={handleSelectUser}\n                style={{ fontSize: '16px' }} // Thêm style cho Select component\n                showSearch  // Thêm tính năng tìm kiếm\n                optionFilterProp=\"children\" // Chỉ định thuộc tính cần tìm kiếm trong các option\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                } // Hàm tìm kiếm tùy chỉnh\n              >\n                {allMembers.map(member => (\n                  <Option key={member._id} value={member._id}>{member.userFullName}</Option>\n                ))}\n              </Select>\n\n\n            </Form.Item>\n            <Form.Item label=\"Tên sách\" name=\"bookIds\" rules={[{ required: true, message: 'Vui lòng chọn sách' }]}>\n              <Select placeholder=\"Chọn sách\" onChange={handleBookSelection}\n                showSearch  // Thêm tính năng tìm kiếm\n                optionFilterProp=\"children\" // Chỉ định thuộc tính cần tìm kiếm trong các option\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }\n              >\n                {allBooks.map(book => (\n                  <Option key={book._id} value={book._id}>{book.bookName} : {book.bookCountAvailable}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item label=\"Loại mượn\" name=\"transactionType\" rules={[{ required: true, message: 'Vui lòng chọn loại mượn' }]}>\n              <Select placeholder=\"Chọn loại mượn\" onChange={setTransactionType}\n                showSearch  // Thêm tính năng tìm kiếm\n                optionFilterProp=\"children\" // Chỉ định thuộc tính cần tìm kiếm trong các option\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }\n              >\n                {transactionTypes.map(type => (\n                  <Option key={type.value} value={type.value}>{type.text}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n\n            <Form.Item label=\"Từ ngày\" name=\"fromDate\" rules={[{ required: true, message: 'Vui lòng chọn từ ngày' }]}>\n              <DatePicker style={{ width: 520 }} placeholder=\"Chọn từ ngày\" onChange={date => setFromDate(date)} />\n            </Form.Item>\n            <Form.Item label=\"Đến ngày\" name=\"toDate\" rules={[{ required: true, message: 'Vui lòng chọn đến ngày' }]}>\n              <DatePicker style={{ width: 520 }} placeholder=\"Chọn đến ngày\" onChange={date => setToDate(date)} />\n            </Form.Item>\n          </Col>\n\n        </Row>\n\n        <Form.Item\n          style={{\n            paddingTop: 24,\n          }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>Tạo</Button>\n        </Form.Item>\n      </Form>\n\n      {/* Table showing recent transactions */}\n\n      <p className=\"dashboard-option-title\">Chờ xử lý</p>\n\n      {allTransactions.length > 0 ? (\n        <>\n          <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n            <table className=\"admindashboard-table\">\n              <thead>\n                <tr>\n                  <th>Tên sách</th>\n                  <th>Người mượn</th>\n                  <th>Từ ngày</th>\n                  <th>Đến ngày</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {allTransactions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((transaction, index) => (\n                  <tr key={index}>\n                    <td>{transaction.books || \"N/A\"}</td>\n                    <td>{transaction.userName || \"N/A\"}</td>\n                    <td>{transaction.fromDate || \"N/A\"}</td>\n                    <td>{transaction.toDate || \"N/A\"}</td>\n                    <td>\n                      <Button type=\"primary\" onClick={() => handleUpdateTransaction(transaction._id)}>\n                        Cho mượn\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </TableContainer>\n\n          <TablePagination\n            onRowsPerPageChange={(e) => {\n              setRowsPerPage(parseInt(e.target.value, 10))\n              setPage(0)\n            }}\n            component=\"div\"\n            count={allTransactions.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={(e, newPage) => setPage(newPage)}\n            style={{ maxWidth: '1160px' }}\n          />\n        </>\n      ) : (\n        <table className=\"admindashboard-table\">\n          <thead>\n\n            <tr>\n              <th>Tên sách</th>\n              <th>Người mượn</th>\n              <th>Từ ngày</th>\n              <th>Đến ngày</th>\n            </tr>\n\n          </thead>\n          <tbody>\n            <tr>\n              <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n            </tr>\n          </tbody>\n        </table>\n      )}\n\n    </div>\n\n  );\n}\n\nexport default AddTransaction;\n","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddBook.js",["683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\AddMember.js",["708","709","710","711","712","713","714","715"],"import React, { useEffect, useState } from 'react';\nimport {\n    Form, Input, Button, DatePicker, Select, message, Row, Col,\n    Modal,\n    TreeSelect,\n    Popconfirm,\n    Image\n} from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\n\nimport axios from \"axios\";\nimport moment from 'moment';\nimport io from 'socket.io-client';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst { Option } = Select;\n\nfunction AddMember() {\n    const API_URL = process.env.REACT_APP_API_URL;\n    const [isLoading, setIsLoading] = useState(false);\n    const [form] = Form.useForm();\n    const [recentAddedMembers, setRecentAddedMembers] = useState([]);\n    const [userType, setUserType] = useState(null);\n    const [gender, setGender] = useState(null);\n    const [openModal, setOpenModal] = useState(false)\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const socket = io('http://localhost:8888');\n    const handleOkModal = () => {\n        const formData = form.getFieldsValue();\n        console.log(\"book update\", formData)\n        // updateBook(formData)\n        setIsModalOpen(false);\n    };\n    const handleCancel = () => {\n        setIsModalOpen(false);\n        // setIsModalOpenDelete(false)\n\n    };\n    const onFinish = async (values) => {\n        setIsLoading(true);\n        const userData = { ...values, dob: moment(values.dob).format(\"MM/DD/YYYY\") };\n\n        try {\n            const response = await axios.post(API_URL + \"api/auth/register\", userData);\n            if (recentAddedMembers.length >= 5) {\n                recentAddedMembers.splice(-1);\n            }\n            setRecentAddedMembers([response.data, ...recentAddedMembers]);\n            form.resetFields();\n            message.success(\"Thêm thành viên thành công!\");\n        } catch (error) {\n            console.log(error);\n            message.error(\"Thêm thành viên thất bại!\");\n        }\n\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        const getMembers = async () => {\n            try {\n                const response = await axios.get(API_URL + \"api/users/allmembers\");\n                const recentMembers = response.data.slice(0, 5);\n                setRecentAddedMembers(recentMembers);\n            } catch (err) {\n                console.log(err);\n            }\n        };\n\n        getMembers();\n    }, [API_URL]);\n\n    return (\n        <div>\n            <p className=\"dashboard-option-title\">Thêm người dùng</p>\n            <div className=\"dashboard-title-line\"></div>\n            <Form form={form} onFinish={onFinish} layout=\"vertical\"\n                style={{ margin: 33, }}\n\n            >\n                <Row gutter={16}>\n                    <Col span={8}>\n                        <Form.Item name=\"userType\" label=\"User Type\" rules={[{ required: true, message: 'Please select user type!' }]}>\n                            <Select placeholder='User Type' fluid selection onChange={(value) => setUserType(value)}>\n                                {/* Render options */}\n                            </Select>\n                        </Form.Item>\n\n                        <Form.Item name=\"userFullName\" label=\"Họ và tên\" rules={[{ required: true, message: 'Please enter full name!' }]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item name={userType === \"Student\" ? \"admissionId\" : \"employeeId\"} label=\"Mã thẻ\" rules={[{ required: true, message: 'Please enter ID!' }]}>\n                            <Input />\n                        </Form.Item>\n                    </Col>\n                    <Col span={8}>\n                        <Form.Item name=\"mobileNumber\" label=\"Số điện thoại\" rules={[{ required: true, message: 'Please enter mobile number!' }]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item name=\"gender\" label=\"Giới tính\" rules={[{ required: true, message: 'Please select gender!' }]}>\n                            <Select placeholder='User Type' fluid selection value={gender} onChange={(value) => setGender(value)}>\n                                {/* Render options */}\n                            </Select>\n                        </Form.Item>\n\n                        <Form.Item name=\"dob\" label=\"Ngày sinh\" rules={[{ required: true, message: 'Please select date of birth!' }]}>\n                            <DatePicker placeholderText=\"dd/MM/YYYY\" format=\"DD/MM/YYYY\" />\n                        </Form.Item>\n                    </Col>\n                    <Col span={8}>\n                        <Form.Item name=\"address\" label=\"Địa chỉ\" rules={[{ required: true, message: 'Please enter address!' }]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item name=\"email\" label=\"Email\" rules={[{ required: true, message: 'Please enter email!', type: 'email' }]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item name=\"password\" label=\"Mật khẩu\" rules={[{ required: true, message: 'Please enter password!' }]}>\n                            <Input.Password />\n                        </Form.Item>\n                    </Col>\n\n                </Row>\n\n                <Form.Item\n                    style={{\n                        paddingTop: 24,\n                    }}\n                >\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                        XÁC NHẬN\n                    </Button>\n                </Form.Item>\n            </Form>\n\n            <p className=\"dashboard-option-title\">Mới thêm gần đây</p>\n            <div className=\"dashboard-title-line\"></div>\n            <table className='admindashboard-table'>\n                <tr>\n                    <th>STT</th>\n                    <th>Loại tài khoản</th>\n                    <th>Mã tài khoản</th>\n                    <th>Họ và tên</th>\n                </tr>\n                {\n                    recentAddedMembers.map((member, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{member.userType}</td>\n                                <td>{member.userType === \"Student\" ? member.admissionId : member.employeeId}</td>\n                                <td>{member.userFullName}</td>\n                            </tr>\n                        )\n                    })\n                }\n            </table>\n            <Modal title=\"Mượn sách\"\n                open={isModalOpen}\n                onOk={handleOkModal}\n                onCancel={handleCancel}\n                width={1100}\n                footer={[\n                    <Button key=\"huy\" onClick={handleCancel}>\n                        Hủy\n                    </Button>,\n                    <Button key=\"sửa\" type=\"primary\" onClick={handleOkModal}>\n                        Sửa\n                    </Button>,\n\n\n                ]}\n            >\n                <Form\n                    form={form}\n                    name=\"addbook-form\"\n                    // onFinish={addBook}\n                    // labelCol={{ span: 8 }}\n                    // wrapperCol={{ span: 16 }}\n                    // onFinish={addTransaction}\n                    layout=\"vertical\"\n                    style={{ margin: 33, }}\n                >\n                    <Row gutter={16}>\n                        <Col span={8}>\n                            <Form.Item\n                                label=\"id\"\n                                name=\"_id\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên sách!' }]}\n                            >\n                                <Input  readOnly />\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Tên sách\"\n                                name=\"bookName\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên sách!' }]}\n                            >\n                                <Input.TextArea rows={2} />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Tên tác giả\"\n                                name=\"author\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}\n\n                            >\n                                <Input value onChange />\n                            </Form.Item>\n                            <Form.Item label=\"Ngôn ngữ\" name=\"language\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n\n                                <Select\n                                    placeholder=\"Chọn ngôn ngữ\"\n                                    onChange\n                                    style={{ fontSize: '16px' }}\n                                    showSearch\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                >\n                                    <Select.Option value=\"Vi\">Tiếng Việt</Select.Option>\n                                    <Select.Option value=\"En\">Tiếng Anh</Select.Option>\n                                </Select>\n                            </Form.Item>\n                            <Form.Item label=\"Nhà xuất bản\" name=\"publisher\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n                                <Input value onChange />\n                            </Form.Item>\n\n\n                        </Col>\n\n                        <Col span={8}>\n                            <Form.Item\n                                name=\"categories\"\n                                label=\"Chọn thể loại\"\n                                rules={[{ required: true, message: 'Vui lòng chọn độc giả!' }]}\n                            >\n                                <Select\n                                    placeholder=\"Chọn thể loại\"\n                                    onChange\n                                    style={{ fontSize: '16px' }}\n                                    showSearch\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                >\n                                    {/* {allCategories.map(category => (\n                                        <Select.Option key={category.categoryName} value={category.categoryName}>\n                                            {category.categoryName}\n                                        </Select.Option>\n                                    ))} */}\n                                </Select>\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Tổng sách sẵn có\"\n                                name=\"bookCount\"\n                                rules={[{ required: true, message: 'Vui lòng nhập số lượng sách sẵn có!' }]}\n                            >\n                                <Input value onChange type=\"number\" />\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Số lượng sách sẵn có\"\n                                name=\"bookCountAvailable\"\n                                rules={[{ required: true, message: 'Vui lòng nhập số lượng sách sẵn có!' }]}\n                            >\n                                <Input type=\"number\" />\n                            </Form.Item>\n\n\n\n\n\n\n                            <Form.Item label=\"Tiêu đề thay thế\" name=\"description\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n\n                                <Input.TextArea value onChange rows={5} />\n                            </Form.Item>\n\n\n\n                        </Col>\n                        <Col span={8}>\n\n\n                            <Form.Item\n                                label=\"Ảnh bìa\"\n                                name=\"image\"\n                            >\n                                <input type=\"file\" onChange />\n                                {/* {imageURL && (\n                                    // setImageURL=image_url\n                                    <img\n                                        style={{\n                                            width: '200px',\n                                            height: '200px'\n                                        }}\n                                        src={imageURL}\n                                        alt=\"Ảnh bìa\"\n                                    />\n                                )} */}\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n                    <Form.Item\n                        style={{\n                            paddingTop: 24,\n                        }}\n                    >\n                        {/* <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                            Thêm mới\n                        </Button> */}\n                    </Form.Item>\n\n\n\n                </Form>\n            </Modal>\n        </div>\n    );\n}\n\nexport default AddMember;\n","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\ManagerBook.js",["716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742"],"import React, { useEffect, useContext, useState } from 'react';\nimport io from 'socket.io-client';\nimport \"../AdminDashboard.css\";\nimport axios from 'axios';\nimport { AuthContext } from '../../../../Context/AuthContext';\n// import { userService } from \"../services/authentication.service\";\nimport { userService } from '../../../../services/authentication.service';\n\nimport {\n\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Card,\n    CardContent,\n    CardActions,\n    Typography,\n    TablePagination\n} from \"@mui/material\"\nimport { tableCellClasses } from '@mui/material/TableCell';\n\nimport getUrlImage from \"../../../../Pages/getURLimage\"\nimport Loading from \"../../../../Components/Loader/Loader\";\nimport bookController from '../../../../Controller/bookController';\nimport CateController from '../../../../Controller/CateController';\n\nimport { styled } from '@mui/material/styles';\nimport {\n    Modal,\n    Cascader,\n    DatePicker,\n    Form,\n    Input,\n    InputNumber,\n    Mentions,\n    Select,\n    TreeSelect,\n    Row,\n    Col, Button,\n    Popconfirm,\n    Image\n} from 'antd';\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 20,\n\n    },\n}));\n\n\nfunction AddBook() {\n    const { user } = useContext(AuthContext);\n    const API_URL = process.env.REACT_APP_API_URL\n    const [loading, setLoading] = useState(false);\n    const [form] = Form.useForm();\n    const [books, setBooks] = useState([]);\n    const [page, setPage] = useState(0)\n    const [rowsPerPage, setRowsPerPage] = useState(10)\n    const [openModal, setOpenModal] = useState(false)\n    const [activeBookID, setActiveBookID] = useState(null)\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalOpenDelete, setIsModalOpenDelete] = useState(false);\n    const [bookName, setBookName] = useState(\"\");\n    const [author, setAuthor] = useState(\"\");\n    const [bookCount, setBookCount] = useState(null);\n    const [language, setLanguage] = useState(\"vi\");\n    const [publisher, setPublisher] = useState(\"\");\n    const [allCategories, setAllCatagories] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [categoryName, setCategoryName] = useState('');\n    const [description, setDescription] = useState(\"\");\n    const [book, setBook] = useState(null);\n    const [imageURL, setImageURL] = useState(\"\");\n\n    const [file, setFile] = useState();\n    // function handleChange(e) {\n    //     console.log(e.target.files);\n    //     setFile(URL.createObjectURL(e.target.files[0]));\n    // }\n    function handleChange(e) {\n        const selectedFile = e.target.files[0];\n        if (selectedFile) {\n            const imageUrl = URL.createObjectURL(selectedFile);\n            setFile(selectedFile);\n            setImageURL(imageUrl);\n        }\n    }\n\n    const handlePublisherChange = (e) => {\n        setPublisher(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handledescriptionChange = (e) => {\n        setDescription(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handlebookNameChange = (e) => {\n        setBookName(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handleAuthorChange = (e) => {\n        setAuthor(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handleBookCountChange = (e) => {\n        setBookCount(e.target.value); // Cập nhật giá trị của biến publisher khi người dùng nhập vào Input\n    };\n    const handleOk = () => {\n        setIsModalOpen(false);\n        setIsModalOpenDelete(false)\n    };\n    const handleCancel = () => {\n        setIsModalOpen(false);\n        setIsModalOpenDelete(false)\n\n    };\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const allCates = await CateController.getAllCates();\n                setAllCatagories(allCates);\n                console.log(\"tanh\", allCates);\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n\n        fetchData(); // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n    // const updateBook = async (book) => {\n    //     try {\n    //         setIsLoading(true);\n    //         // Gọi hàm updateTransaction từ TransController để cập nhật giao dịch\n    // const updatedTransaction = await bookController.updateBook(book._id, book);\n    // const books = await bookController.getAllBooks();\n\n    //         // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n    //         // const activeTransactions = allTransactions.filter(transaction => transaction && transaction.transactionStatus === \"Active\");\n    //         setBooks(books)\n    //         console.log('Transaction updated:', updatedTransaction);\n    //         alert('cập nhật thành công 🎉');\n\n    //     } catch (error) {\n    //         console.error('Error updating transaction:', error);\n    //     } finally {\n    //         setIsLoading(false);\n    //     }\n    // };\n    // const updateBook = async (book) => {\n    //     try {\n    //         setIsLoading(true);\n    //         console.log(\"book update 123\", book)\n    //         console.log(\"book update 123\", file)\n\n    //         const formData = new FormData();\n    //         formData.append('image', file);\n    //         formData.append('language', book.language);\n    //         formData.append('publisher', book.publisher);\n    //         formData.append('description', book.description);\n    //         formData.append('bookStatus', book.bookStatus);\n    //         formData.append('categories', book.categories);\n    //         formData.append('bookName', book.bookName);\n    //         formData.append('author', book.author);\n    //         formData.append('bookCountAvailable', book.bookCountAvailable);\n    //         formData.append('bookCount', book.bookCount);\n    //         formData.append('staff_edit', user._id);\n    //         alert('Cập nhật thành công 🎉');\n    //         const updatedTransaction = await bookController.updateBook(book._id,formData);\n    //         const updatedBooks = await bookController.getAllBooks();\n    //         setBooks(updatedBooks);\n    //     } catch (error) {\n    //         console.error('Error updating book:', error);\n    //     } finally {\n    //         setIsLoading(false);\n    //     }\n    // };\n    const socket = io('http://localhost:8888');\n    const updateBook = async (book) => {\n        try {\n            setIsLoading(true);\n            const formData = new FormData();\n            formData.append('image', file);\n            formData.append('language', book.language);\n            formData.append('publisher', book.publisher);\n            formData.append('description', book.description);\n            formData.append('bookStatus', book.bookStatus);\n            formData.append('categories', book.categories);\n            formData.append('bookName', book.bookName);\n            formData.append('author', book.author);\n            formData.append('bookCountAvailable', book.bookCountAvailable);\n            formData.append('bookCount', book.bookCount);\n            formData.append('staff_edit', user._id);\n            // const response = await bookController.updateBook(book._id,formData);\n            // Use fetch to send a PUT request\n            const response = await fetch(`http://localhost:5000/api/books/updatebook/${book._id}`, {\n                method: 'PUT',\n                body: formData,\n                headers: {\n                    'Authorization': userService.getToken()\n                }\n            });\n\n\n            // Assuming the update is successful, notify the user\n            alert('Cập nhật thành công 🎉');\n            socket.emit('notifyChange');\n            const books = await bookController.getAllBooks();\n            //         const updatedBooks = await bookController.getAllBooks();\n            setBooks(books)\n            // Assuming the server returns the updated book data, you might not need these lines\n            // const updatedTransaction = await response.json();\n            // const updatedBooks = await bookController.getAllBooks();\n            // setBooks(updatedBooks);\n        } catch (error) {\n            console.error('Error updating book:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n\n    const handleOkModal = () => {\n        const formData = form.getFieldsValue();\n        console.log(\"book update\", formData)\n        updateBook(formData)\n        setIsModalOpen(false);\n    };\n    const confirm = async (id) => {\n        try {\n            const deletebook = await bookController.deleteBook(id);\n            const books = await bookController.getAllBooks();\n            setBooks(books)\n            alert('xóa thành côngcông thành công 🎉');\n        }\n        catch (error) {\n            console.error('Error updating transaction:', error);\n        } finally {\n            setIsLoading(false);\n        }\n        // console.log(e);\n        // message.success('Click on Yes');\n    };\n    const cancel = (e) => {\n        console.log(e);\n        // message.error('Click on No');\n    };\n    const handledeleteBook = async (id) => {\n        try {\n\n            // Gọi hàm updateTransaction từ TransController để cập nhật giao dịch\n            alert(' Bạn có thực sự muốn xóa ');\n            var xoa = confirm('Bạn có thực sự muốn xóa?');\n            const deletebook = await bookController.deleteBook(id);\n            const books = await bookController.getAllBooks();\n\n            // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n            // const activeTransactions = allTransactions.filter(transaction => transaction && transaction.transactionStatus === \"Active\");\n            setBooks(books)\n            alert('xóa thành côngcông thành công 🎉');\n            socket.emit('notifyChange');\n\n        } catch (error) {\n            console.error('Error updating transaction:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleBorrowClick = (book) => {\n        setBook(book);\n        setIsModalOpen(true);\n    };\n\n    const showEditModal = (record) => {\n\n        form.setFieldsValue({\n            _id: record._id,\n            language: record.language,\n            image_url: record.image_url,\n            publisher: record.publisher,\n            description: record.description,\n            categories: record.categories, // Kiểm tra xem tên trường có đúng không\n            bookName: record.bookName,\n            author: record.author,\n            bookCountAvailable: record.bookCountAvailable,\n            bookCount: record.bookCount\n        });\n        if (record.image_url) {\n            setImageURL(record.image_url);\n        }\n        setIsModalOpen(true); // Hiển thị Modal\n    };\n    const fetchBooks = async () => {\n        const response = await axios.get(API_URL + \"api/books/allbooks\",\n            {\n                headers: {\n                    'Authorization': userService.getToken()\n                }\n            })\n        setBooks(response.data);\n        setLoading(false);\n        console.log(\"book\", response.data)\n\n    }\n    useEffect(() => {\n        setLoading(true)\n        fetchBooks();\n\n    }, [])\n\n    if (loading) return <Loading />;\n\n    return (\n        <div>\n            <div>\n                <p className=\"dashboard-option-title\">Tất cả đầu sách</p>\n                <div className=\"dashboard-title-line\"></div>\n            </div>\n            <>\n                {books.length > 0 ? (\n                    <>\n                        <div className=\"tableContainer\">\n                            <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n                                <Table stickyHeader>\n                                    <TableHead>\n                                        <TableRow>\n                                            <StyledTableCell>STT</StyledTableCell>\n                                            <StyledTableCell>Tên sách</StyledTableCell>\n                                            <StyledTableCell>Tác giả</StyledTableCell>\n                                            <StyledTableCell>Thể loại</StyledTableCell>\n                                            <StyledTableCell>Số lượng</StyledTableCell>\n                                            <StyledTableCell>Hành động</StyledTableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {(rowsPerPage > 0\n                                            ? books.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            : books\n                                        )\n                                            .map((book, index) => (\n                                                <TableRow key={book.isbn}>\n                                                    <TableCell >\n                                                        {/* <Image width={50} className=\"image-table\" src={book.image_url} alt=\"\" />?\\ */}\n                                                        {page * 10 + index + 1}\n                                                    </TableCell>\n                                                    <TableCell align=\"left\" >{book.bookName}</TableCell>\n                                                    <TableCell align=\"left\" >{book.author}</TableCell>\n                                                    <TableCell>{book.categories}</TableCell>\n                                                    <TableCell align=\"left\">{book.bookCountAvailable}</TableCell>\n                                                    <TableCell align=\"left\" >\n                                                        <div className=\"actionsContainer\">\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                // component={RouterLink}\n                                                                size=\"small\"\n                                                                onClick={() => showEditModal(book)}\n                                                            >\n                                                                Xem\n                                                            </Button>\n                                                            {user.isAdmin && (\n                                                                <>\n                                                                    <Button\n                                                                        variant=\"contained\"\n                                                                        type=\"primary\"\n                                                                        // component={RouterLink}\n                                                                        size=\"small\"\n                                                                        to={`/admin/books/${book._id}/edit`}\n                                                                        onClick={() => showEditModal(book)}\n                                                                    >\n                                                                        Sửa\n                                                                    </Button>\n                                                                    <Popconfirm\n                                                                        title=\"Xóa sách\"\n                                                                        description=\"Bạn thực sự muốn xóa!!!\"\n                                                                        onConfirm={() => confirm(book._id)}\n                                                                        onCancel={cancel}\n                                                                        okText=\"Yes\"\n                                                                        cancelText=\"No\"\n                                                                    >\n                                                                        <Button variant=\"contained\"\n                                                                            type=\"primary\"\n                                                                            // component={RouterLink}\n                                                                            size=\"small\" danger>Xóa</Button>\n                                                                    </Popconfirm>\n                                                                </>\n                                                            )}\n                                                        </div>\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                                onRowsPerPageChange={(e) => {\n                                    setRowsPerPage(parseInt(e.target.value, 10))\n                                    setPage(0)\n                                }}\n                                component=\"div\"\n                                count={books.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onPageChange={(e, newPage) => setPage(newPage)}\n                                style={{ maxWidth: '1160px' }}\n                            />\n\n                        </div>\n                    </>\n                ) : (\n                    <Typography variant=\"h5\">No books found!</Typography>\n                )}\n\n\n            </>\n            <Modal title=\"Mượn sách\"\n                open={isModalOpen}\n                onOk={handleOkModal}\n                onCancel={handleCancel}\n                width={1100}\n                footer={[\n                    <Button key=\"huy\" onClick={handleCancel}>\n                        Hủy\n                    </Button>,\n                    <Button key=\"sửa\" type=\"primary\" onClick={handleOkModal}>\n                        Sửa\n                    </Button>,\n\n\n                ]}\n            >\n                <Form\n                    form={form}\n                    name=\"addbook-form\"\n                    // onFinish={addBook}\n                    // labelCol={{ span: 8 }}\n                    // wrapperCol={{ span: 16 }}\n                    // onFinish={addTransaction}\n                    layout=\"vertical\"\n                    style={{ margin: 33, }}\n                >\n                    <Row gutter={16}>\n                        <Col span={8}>\n                            <Form.Item\n                                label=\"id\"\n                                name=\"_id\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên sách!' }]}\n                            >\n                                <Input onChange={handlebookNameChange} readOnly />\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Tên sách\"\n                                name=\"bookName\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên sách!' }]}\n                            >\n                                <Input.TextArea onChange={handlebookNameChange} rows={2} />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Tên tác giả\"\n                                name=\"author\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}\n\n                            >\n                                <Input value={author} onChange={handleAuthorChange} />\n                            </Form.Item>\n                            <Form.Item label=\"Ngôn ngữ\" name=\"language\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n\n                                <Select\n                                    placeholder=\"Chọn ngôn ngữ\"\n                                    onChange={setLanguage}\n                                    style={{ fontSize: '16px' }}\n                                    showSearch\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                >\n                                    <Select.Option value=\"Vi\">Tiếng Việt</Select.Option>\n                                    <Select.Option value=\"En\">Tiếng Anh</Select.Option>\n                                </Select>\n                            </Form.Item>\n                            <Form.Item label=\"Nhà xuất bản\" name=\"publisher\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n                                <Input value={publisher} onChange={handlePublisherChange} />\n                            </Form.Item>\n\n\n                        </Col>\n\n                        <Col span={8}>\n                            <Form.Item\n                                name=\"categories\"\n                                label=\"Chọn thể loại\"\n                                rules={[{ required: true, message: 'Vui lòng chọn độc giả!' }]}\n                            >\n                                <Select\n                                    placeholder=\"Chọn thể loại\"\n                                    onChange={setCategoryName}\n                                    style={{ fontSize: '16px' }}\n                                    showSearch\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                >\n                                    {allCategories.map(category => (\n                                        <Select.Option key={category.categoryName} value={category.categoryName}>\n                                            {category.categoryName}\n                                        </Select.Option>\n                                    ))}\n                                </Select>\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Tổng sách sẵn có\"\n                                name=\"bookCount\"\n                                rules={[{ required: true, message: 'Vui lòng nhập số lượng sách sẵn có!' }]}\n                            >\n                                <Input value={bookCount} onChange={handleBookCountChange} type=\"number\" />\n                            </Form.Item>\n                            <Form.Item\n                                label=\"Số lượng sách sẵn có\"\n                                name=\"bookCountAvailable\"\n                                rules={[{ required: true, message: 'Vui lòng nhập số lượng sách sẵn có!' }]}\n                            >\n                                <Input type=\"number\" />\n                            </Form.Item>\n\n\n\n\n\n\n                            <Form.Item label=\"Tiêu đề thay thế\" name=\"description\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên tác giả!' }]}>\n\n                                <Input.TextArea value={description} onChange={handledescriptionChange} rows={5} />\n                            </Form.Item>\n\n\n\n                        </Col>\n                        <Col span={8}>\n\n\n                            <Form.Item\n                                label=\"Ảnh bìa\"\n                                name=\"image\"\n                            >\n                                <input type=\"file\" onChange={handleChange} />\n                                {imageURL && (\n                                    // setImageURL=image_url\n                                    <img\n                                        style={{\n                                            width: '300px',\n                                            height: '290px'\n                                        }}\n                                        src={imageURL}\n                                        alt=\"Ảnh bìa\"\n                                    />\n                                )}\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n                    <Form.Item\n                        style={{\n                            paddingTop: 24,\n                        }}\n                    >\n                        {/* <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                            Thêm mới\n                        </Button> */}\n                    </Form.Item>\n\n\n\n                </Form>\n            </Modal>\n            <Modal title=\"Xóa sách\" open={isModalOpenDelete} onOk={handleOkModal} onCancel={handleCancel}>\n                <Form\n                    // form={form}\n\n                    layout=\"vertical\"\n                    style={{ margin: 33, }}\n                >\n                    <p>Bạn thực sự muốn xóa !!!!!</p>\n\n                </Form>\n            </Modal>\n\n        </div>\n\n    )\n}\n\nexport default AddBook;","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\GetMember.js",["743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763"],"import React, { useEffect, useState, useContext } from 'react'\nimport \"../AdminDashboard.css\"\nimport axios from \"axios\"\nimport { Dropdown } from 'semantic-ui-react'\nimport '../../Member/MemberDashboard.css'\nimport TransController from '../../../../Controller/TransactionController';\nimport UserController from '../../../../Controller/UserController';\nimport BookController from '../../../../Controller/bookController';\nimport moment from \"moment\"\nimport { AuthContext } from '../../../../Context/AuthContext';\nimport io from 'socket.io-client';\n// import moment from 'moment';\nimport { Select, DatePicker, Button, Form, Row, Col, message, Space, Modal, Input, Popconfirm } from 'antd';\nimport {\n\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Card,\n    CardContent,\n    CardActions,\n    Typography,\n    TablePagination\n} from \"@mui/material\"\nimport { styled } from '@mui/material/styles';\nimport { tableCellClasses } from '@mui/material/TableCell';\nimport Loading from \"../../../../Components/Loader/Loader\";\nconst { Option } = Select;\n\nfunction GetMember() {\n    const { user } = useContext(AuthContext);\n\n    const API_URL = process.env.REACT_APP_API_URL\n    const [form] = Form.useForm();\n    const [allMembersOptions, setAllMembersOptions] = useState([])\n    const [member, setMember] = useState(null)\n    const [memberId, setMemberId] = useState(null)\n\n    const [memberDetails, setMemberDetails] = useState(null)\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(7);\n    const [allUsers, setAllUsers] = useState([]);\n    const [allTransactions, setAllTransactions] = useState([])\n    const [allTransactionsTrue, setAllTransactionsTrue] = useState([])\n    const [allTransactionsFalse, setAllTransactionsFalse] = useState([])\n    const [openModal, setOpenModal] = useState(false)\n    const [activeBookID, setActiveBookID] = useState(null)\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalEditOpen, setIsModalEditOpen] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const [isModalOpenDelete, setIsModalOpenDelete] = useState(false);\n    const [file, setFile] = useState();\n    const [imageURL, setImageURL] = useState(\"\");\n    const socket = io('http://localhost:8888');\n    const StyledTableCell = styled(TableCell)(({ theme }) => ({\n        [`&.${tableCellClasses.head}`]: {\n            backgroundColor: theme.palette.common.black,\n            color: theme.palette.common.white,\n        },\n        [`&.${tableCellClasses.body}`]: {\n            fontSize: 20,\n\n        },\n    }));\n    const handleOk = () => {\n        setIsModalOpen(false);\n        setIsModalOpenDelete(false)\n    };\n    const handleCancel = () => {\n        setIsModalOpen(false);\n        setIsModalOpenDelete(false)\n        setIsModalEditOpen(false); // Hiển thị Modal\n\n\n    };\n    function handleChange(e) {\n        const selectedFile = e.target.files[0];\n        if (selectedFile) {\n            const imageUrl = URL.createObjectURL(selectedFile);\n            setFile(selectedFile);\n            setImageURL(imageUrl);\n        }\n    }\n    const showEditModal = (record) => {\n\n        form.setFieldsValue({\n            _id: record._id,\n            userType: record.userType,\n            // photo: record.photo,\n            userFullName: record.userFullName,\n            // age: record.age,\n            gender: record.gender, // Kiểm tra xem tên trường có đúng không\n            dob: moment(record.dob, 'DD/MM/YYYY'),\n            address: record.address,\n            mobileNumber: record.mobileNumber,\n            email: record.email,\n            // password: record.password,\n\n        });\n        if (record.photo) {\n            setImageURL(record.photo);\n        }\n        setIsModalEditOpen(true); // Hiển thị Modal\n    };\n    const updateUser = async (member) => {\n        try {\n            setIsLoading(true);\n            const formData = new FormData();\n            // formData.append('image', file);\n            formData.append('userType', member.userType);\n            formData.append('userFullName', member.userFullName);\n            formData.append('gender', member.gender);\n            formData.append(' dob', member.dob);\n            formData.append('address', member.address);\n            formData.append('mobileNumber', member.mobileNumber);\n            formData.append('email', member.email);\n            formData.append('password', member.password);\n            // formData.append('memberCount', member.memberCount);\n            // formData.append('staff_edit', user.user._id);\n            // const response = await bookController.updateBook(book._id,formData);\n            // Use fetch to send a PUT request\n\n            const response = await fetch(`http://localhost:5000/api/users/updateuser/${member._id}`, {\n                method: 'PUT',\n                body: formData\n            });\n\n            console.log('update nguoi dung', member)\n            // Assuming the update is successful, notify the user\n            alert('Cập nhật thành công 🎉');\n            const users = await UserController.getAllUsers();\n            //         const updatedBooks = await bookController.getAllBooks();\n            setAllUsers(users)\n            // Assuming the server returns the updated book data, you might not need these lines\n            // const updatedTransaction = await response.json();\n            // const updatedBooks = await bookController.getAllBooks();\n            // setBooks(updatedBooks);\n        } catch (error) {\n            console.error('Error updating book:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    // const updateUser = async () => {\n    //     try {\n    //         setIsLoading(true);\n    //         const formData = new FormData();\n    //         const formValues = form.getFieldsValue();\n    //         for (const [key, value] of Object.entries(formValues)) {\n    //             formData.append(key, value);\n    //         }\n    //         const response = await fetch(`http://localhost:5000/api/users/updateuser/${formValues._id}`, {\n    //             method: 'PUT',\n    //             body: formData,\n    //         });\n\n    //         console.log('update nguoi dung', formValues);\n    //         alert('Cập nhật thành công 🎉');\n    //         const users = await UserController.getAllUsers();\n    //         setAllUsers(users);\n    //     } catch (error) {\n    //         console.error('Error updating user:', error);\n    //     } finally {\n    //         setIsLoading(false);\n    //     }\n    // };\n\n    const handleOkModal = () => {\n        const formData = form.getFieldsValue();\n        console.log(\"user update\", formData)\n        updateUser(formData)\n        setIsModalEditOpen(true); // Hiển thị Modal\n\n    };\n    const showModal = (record) => {\n\n        // form.setFieldsValue({\n        //     // _id: record._id,\n        //     language: record.language,\n        //     image_url: record.image_url,\n        //     publisher: record.publisher,\n        //     description: record.description,\n        //     categories: record.categories, // Kiểm tra xem tên trường có đúng không\n        //     bookName: record.bookName,\n        //     author: record.author,\n        //     bookCountAvailable: record.bookCountAvailable,\n        //     bookCount: record.bookCount\n        // });\n        // if (record.image_url) {\n        //     // setImageURL(record.image_url);\n        // }\n        setIsModalOpen(true); // Hiển thị Modal\n    };\n    const fetchBooks = async () => {\n        const response = await axios.get(API_URL + \"api/books/allbooks\")\n        // setBooks(response.data);\n        // setLoading(false);\n        console.log(\"book\", response.data)\n\n    }\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const transactions = await TransController.getTransByUser(memberDetails._id);\n                console.log(\"user trans\", transactions)\n                const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"Active\");\n                setAllTransactions(activeTransactions);\n                const TrueTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"True\");\n                setAllTransactionsTrue(TrueTransactions);\n                const falseTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"False\");\n                setAllTransactionsFalse(falseTransactions);\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n        fetchData();     // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const allUser = await UserController.getAllUsers();\n                // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n                const Users = allUser.filter(user => user && user.isAdmin !== true);\n                setAllUsers(Users);\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n        fetchData();     // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n    //Fetch Members\n    useEffect(() => {\n        const getMembers = async () => {\n            try {\n                const response = await axios.get(API_URL + \"api/users/allmembers\")\n                setAllMembersOptions(response.data.map((member) => (\n                    { value: `${member?._id}`, text: `${member?.userType === \"Student\" ? `${member?.userFullName}[${member?.admissionId}]` : `${member?.userFullName}[${member?.employeeId}]`}` }\n                )))\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        getMembers()\n    }, [API_URL])\n\n\n    useEffect(() => {\n        const getMemberDetails = async () => {\n            if (memberId !== null) {\n                try {\n                    const response = await axios.get(API_URL + \"api/users/getuser/\" + memberId)\n                    setMemberDetails(response.data)\n                }\n                catch (err) {\n                    console.log(\"Error in fetching the member details\")\n                }\n            }\n        }\n        getMemberDetails()\n    }, [API_URL, memberId])\n\n    if (loading) return <Loading />;\n\n    return (\n        <div>\n            <Space align='center'>\n                <p className=\"dashboard-option-title\">Danh sách người dùng</p>\n                <Button\n                    variant=\"contained\"\n                    // component={RouterLink}\n                    size=\"small\"\n                    onClick={() => showModal()}\n                >\n                    Thêm\n                </Button>\n            </Space>\n            <>\n                {allUsers.length > 0 ? (\n                    <>\n                        <div className=\"tableContainer\">\n                            <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n                                <Table stickyHeader>\n                                    <TableHead>\n                                        <TableRow>\n                                            <StyledTableCell>STT</StyledTableCell>\n                                            <StyledTableCell>Họ và tên </StyledTableCell>\n                                            <StyledTableCell>Ngày sinh </StyledTableCell>\n                                            <StyledTableCell>Địa chỉ </StyledTableCell>\n                                            <StyledTableCell>Đối tượng</StyledTableCell>\n                                            <StyledTableCell>Hành động</StyledTableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {(rowsPerPage > 0\n                                            ? allUsers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            : allUsers\n                                        )\n                                            .map((users, index) => (\n                                                <TableRow key={users.isbn}>\n                                                    <TableCell >\n                                                        {/* <Image width={50} className=\"image-table\" src={users.image_url} alt=\"\" />?\\ */}\n                                                        {page * 7 + index + 1}\n                                                    </TableCell>\n                                                    <TableCell align=\"left\" >{users.userFullName}</TableCell>\n                                                    <TableCell align=\"left\" >{users.dob}</TableCell>\n                                                    <TableCell>{users.address}</TableCell>\n                                                    <TableCell align=\"left\">{users.userType}</TableCell>\n                                                    <TableCell align=\"left\" >\n                                                        <div className=\"actionsContainer\">\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                // component={RouterLink}\n                                                                size=\"small\"\n                                                                onClick={() => showEditModal(users)}\n                                                            >\n                                                                Xem\n                                                            </Button>\n                                                            {user.isAdmin && (\n                                                                <>\n                                                                    <Button\n                                                                        variant=\"contained\"\n                                                                        type=\"primary\"\n                                                                        // component={RouterLink}\n                                                                        size=\"small\"\n                                                                        // to={`/admin/users/${users._id}/edit`}\n                                                                        onClick={() => showEditModal(users)}\n                                                                    >\n                                                                        Sửa\n                                                                    </Button>\n                                                                    <Popconfirm\n                                                                        title=\"Xóa sách\"\n                                                                        description=\"Bạn thực sự muốn xóa!!!\"\n                                                                        // onConfirm={() => confirm(users._id)}\n                                                                        // onCancel={cancel}\n                                                                        okText=\"Yes\"\n                                                                        cancelText=\"No\"\n                                                                    >\n                                                                        <Button variant=\"contained\"\n                                                                            type=\"primary\"\n                                                                            // component={RouterLink}\n                                                                            size=\"small\" danger>Xóa</Button>\n                                                                    </Popconfirm>\n                                                                </>\n                                                            )}\n                                                        </div>\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                                onRowsPerPageChange={(e) => {\n                                    setRowsPerPage(parseInt(e.target.value, 10))\n                                    setPage(0)\n                                }}\n                                component=\"div\"\n                                count={allUsers.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onPageChange={(e, newPage) => setPage(newPage)}\n                                style={{ maxWidth: '1160px' }}\n                            />\n\n                        </div>\n                    </>\n                ) : (\n                    <Typography variant=\"h5\">No books found!</Typography>\n                )}\n\n\n            </>\n\n\n            <div className='semanticdropdown getmember-dropdown'>\n\n                <Form.Item\n                    label=\"Độc giả\"\n                    name=\"borrowerId\"\n                    rules={[{ required: true, message: 'Vui lòng chọn độc giả' }]}\n                    labelStyle={{ fontSize: '20px' }} // Thêm style cho nhãn\n                >\n                    <Select\n                        placeholder=\"Chọn độc giả\"\n                        onChange={setMemberId}\n                        style={{ fontSize: '16px' }} // Thêm style cho Select component\n                    >\n                        {allMembersOptions.map(member => (\n                            <Option key={member.value} value={member.value}>{member.text}</Option>\n                        ))}\n                    </Select>\n\n\n                </Form.Item>\n            </div>\n            <div style={memberId === null ? { display: \"none\" } : {}}>\n                <div className=\"member-profile-content\" id=\"profile@member\" style={memberId === null ? { display: \"none\" } : {}}>\n                    <div className=\"user-details-topbar\" >\n                        <img className=\"user-profileimage\" src=\"./assets/images/Profile.png\" alt=\"\"></img>\n                        <div className=\"user-info\">\n                            <p className=\"user-name\">{memberDetails?.userFullName}</p>\n                            <p className=\"user-id\">{memberDetails?.userType === \"Student\" ? memberDetails?.admissionId : memberDetails?.employeeId}</p>\n                            <p className=\"user-email\">{memberDetails?.email}</p>\n                            <p className=\"user-phone\">{memberDetails?.mobileNumber}</p>\n                        </div>\n                    </div>\n                    <div className=\"user-details-specific\">\n                        <div className=\"specific-left\">\n                            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                                <p style={{ display: \"flex\", flex: \"0.5\", flexDirection: \"column\" }}>\n                                    <span style={{ fontSize: \"18px\" }}>\n                                        <b>Tuổi</b>\n                                    </span>\n                                    <span style={{ fontSize: \"16px\" }}>\n                                        {memberDetails?.age}\n                                    </span>\n                                </p>\n                                <p style={{ display: \"flex\", flex: \"0.5\", flexDirection: \"column\" }}>\n                                    <span style={{ fontSize: \"18px\" }}>\n                                        <b>Giới tính</b>\n                                    </span>\n                                    <span style={{ fontSize: \"16px\" }}>\n                                        {memberDetails?.gender}\n                                    </span>\n                                </p>\n                            </div>\n                            <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: \"30px\" }}>\n                                <p style={{ display: \"flex\", flex: \"0.5\", flexDirection: \"column\" }}>\n                                    <span style={{ fontSize: \"18px\" }}>\n                                        <b>Ngày sinh</b>\n                                    </span>\n                                    <span style={{ fontSize: \"16px\" }}>\n                                        {memberDetails?.dob}\n                                    </span>\n                                </p>\n                                <p style={{ display: \"flex\", flex: \"0.5\", flexDirection: \"column\" }}>\n                                    <span style={{ fontSize: \"18px\" }}>\n                                        <b>Địa chỉ</b>\n                                    </span>\n                                    <span style={{ fontSize: \"16px\" }}>\n                                        {memberDetails?.address}\n                                    </span>\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"specific-right\">\n                            <div style={{ display: \"flex\", flexDirection: \"column\", flex: \"0.5\" }}>\n                                <p style={{ fontSize: \"20px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}><b>Điểm tích lũy</b></p>\n                                <p style={{ fontSize: \"25px\", fontWeight: \"500\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"15px\" }}>540</p>\n                            </div>\n                            <div className=\"dashboard-title-line\"></div>\n                            <div style={{ display: \"flex\", flexDirection: \"column\", flex: \"0.5\" }}>\n                                <p style={{ fontSize: \"20px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}><b>Thứ hạng</b></p>\n                                <p style={{ fontSize: \"25px\", fontWeight: \"500\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"15px\" }}>{memberDetails?.points}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <p className=\"dashboard-option-title\">Chờ xử lý</p>\n                {allTransactions.length > 0 ? (\n                    <>\n                        <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                            <table className=\"admindashboard-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Tên sách</th>\n                                        <th>Người mượn</th>\n                                        <th>Từ ngày</th>\n                                        <th>Đến ngày</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {allTransactions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((transaction, index) => (\n                                        <tr key={index}>\n                                            <td>{transaction.books || \"N/A\"}</td>\n                                            <td>{transaction.userName || \"N/A\"}</td>\n                                            <td>{transaction.fromDate || \"N/A\"}</td>\n                                            <td>{transaction.toDate || \"N/A\"}</td>\n\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </TableContainer>\n\n                        <TablePagination\n                            onRowsPerPageChange={(e) => {\n                                setRowsPerPage(parseInt(e.target.value, 10))\n                                setPage(0)\n                            }}\n                            component=\"div\"\n                            count={allTransactions.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onPageChange={(e, newPage) => setPage(newPage)}\n                            style={{ maxWidth: '1160px' }}\n                        />\n                    </>\n                ) : (\n                    <table className=\"admindashboard-table\">\n                        <thead>\n\n                            <tr>\n                                <th>Tên sách</th>\n                                <th>Người mượn</th>\n                                <th>Từ ngày</th>\n                                <th>Đến ngày</th>\n                            </tr>\n\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                )}\n\n                <p className=\"dashboard-option-title\">Đang Mượn</p>\n\n                {allTransactionsTrue.length > 0 ? (\n                    <>\n                        <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                            <table className=\"admindashboard-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Tên sách</th>\n                                        <th>Người mượn</th>\n                                        <th>Từ ngày</th>\n                                        <th>Đến ngày</th>\n                                        <th>Quá hạn</th>\n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {allTransactionsTrue.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\n                                        <tr key={index}>\n                                            <td>{data ? data.books : \"N/A\"}</td>\n                                            <td>{data ? data.userName : \"N/A\"}</td>\n                                            <td>{data ? data.fromDate : \"N/A\"}</td>\n                                            <td>{data ? data.toDate : \"N/A\"}</td>\n                                            <td>{data ? data.overdue : \"N/A\"}</td>\n\n\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </TableContainer>\n                        <TablePagination\n                            onRowsPerPageChange={(e) => {\n                                setRowsPerPage(parseInt(e.target.value, 10))\n                                setPage(0)\n                            }}\n                            component=\"div\"\n                            count={allTransactions.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onPageChange={(e, newPage) => setPage(newPage)}\n                            style={{ maxWidth: '1160px' }}\n                        />\n                    </>\n                ) : (\n                    <table className=\"admindashboard-table\">\n                        <thead>\n                            <tr>\n                                <th>Tên sách</th>\n                                <th>Người mượn</th>\n                                <th>Từ ngày</th>\n                                <th>Đến ngày</th>\n                                <th>Quá hạn</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                )}\n                <p className=\"dashboard-option-title\">Lịch Sử</p>\n                {allTransactionsFalse.length > 0 ? (\n                    <>\n                        <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                            <table className=\"admindashboard-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Tên sách</th>\n                                        <th>Người mượn</th>\n                                        <th>Từ ngày</th>\n                                        <th>Đến ngày</th>\n                                        <th>Quá hạn</th>\n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {allTransactionsFalse.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\n                                        <tr key={index}>\n                                            <td>{data ? data.books : \"N/A\"}</td>\n                                            <td>{data ? data.userName : \"N/A\"}</td>\n                                            <td>{data ? data.fromDate : \"N/A\"}</td>\n                                            <td>{data ? data.toDate : \"N/A\"}</td>\n                                            <td>{data ? data.overdue : \"N/A\"}</td>\n\n\n\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </TableContainer>\n                        <TablePagination\n                            onRowsPerPageChange={(e) => {\n                                setRowsPerPage(parseInt(e.target.value, 10))\n                                setPage(0)\n                            }}\n                            component=\"div\"\n                            count={allTransactions.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onPageChange={(e, newPage) => setPage(newPage)}\n                            style={{ maxWidth: '1160px' }}\n                        />\n                    </>\n                ) : (\n                    <table className=\"admindashboard-table\">\n                        <thead>\n\n                            <tr>\n                                <th>Tên sách</th>\n                                <th>Người mượn</th>\n                                <th>Từ ngày</th>\n                                <th>Đến ngày</th>\n                                <th>Quá hạn</th>\n                            </tr>\n\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                )}\n            </div>\n            <Modal title=\"Mượn sách\"\n                open={isModalOpen}\n                // onOk={handleOkModal}\n                onCancel={handleCancel}\n                width={1100}\n                footer={[\n                    <Button key=\"huy\" onClick={handleCancel}>\n                        Hủy\n                    </Button>,\n                    <Button key=\"them\" type=\"primary\" >\n                        {/* onClick={handleOkModal}> */}\n                        Thêm\n                    </Button>,\n\n\n                ]}\n            >\n                <Form\n                    form={form}\n                    // onFinish={onFinish} \n                    layout=\"vertical\"\n                    style={{ margin: 33, }}\n\n                >\n                    <Row gutter={16}>\n                        <Col span={8}>\n                            <Form.Item name=\"userType\" label=\"User Type\" rules={[{ required: true, message: 'Please select user type!' }]}>\n                                <Select placeholder='User Type' fluid selection\n                                // onChange={(value) => setUserType(value)}\n                                >\n                                    {/* Render options */}\n                                </Select>\n                            </Form.Item>\n\n                            <Form.Item name=\"userFullName\" label=\"Họ và tên\" rules={[{ required: true, message: 'Please enter full name!' }]}>\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item name=\"email\" label=\"Email\" rules={[{ required: true, message: 'Please enter email!', type: 'email' }]}>\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item name=\"password\" label=\"Mật khẩu\" rules={[{ required: true, message: 'Please enter password!' }]}>\n                                <Input.Password />\n                            </Form.Item>\n                        </Col>\n                        <Col span={8}>\n                            <Form.Item name=\"address\" label=\"Địa chỉ\" rules={[{ required: true, message: 'Please enter address!' }]}>\n                                <Input />\n                            </Form.Item>\n                            <Form.Item name=\"mobileNumber\" label=\"Số điện thoại\" rules={[{ required: true, message: 'Please enter mobile number!' }]}>\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item name=\"gender\" label=\"Giới tính\" rules={[{ required: true, message: 'Please select gender!' }]}>\n                                <Select placeholder='User Type' fluid selection\n                                // value={gender} onChange={(value) => setGender(value)}\n                                >\n                                    {/* Render options */}\n                                </Select>\n                            </Form.Item>\n\n                            <Form.Item name=\"dob\" label=\"Ngày sinh\" rules={[{ required: true, message: 'Please select date of birth!' }]}>\n                                <DatePicker placeholderText=\"dd/MM/YYYY\" format=\"DD/MM/YYYY\" />\n                            </Form.Item>\n                        </Col>\n                        <Col span={8}>\n\n\n\n                            <Form.Item\n                                label=\"Ảnh đại diện\"\n                                name=\"photo\"\n                            >\n                                <input type=\"file\" onChange={handleChange} />\n                                {imageURL && (\n                                    <img\n                                        style={{\n                                            width: '200px',\n                                            height: '200px'\n                                        }}\n                                        src={imageURL}\n                                        alt=\"Ảnh bìa\"\n                                    />\n                                )}\n                            </Form.Item>\n                        </Col>\n\n                    </Row>\n\n                    <Form.Item\n                        style={{\n                            paddingTop: 24,\n                        }}\n                    >\n                        {/* <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                            XÁC NHẬN\n                        </Button> */}\n                    </Form.Item>\n                </Form>\n            </Modal>\n            <Modal title=\"Mượn sách\"\n                open={isModalEditOpen}\n                // onOk={handleOkModal}\n                onCancel={handleCancel}\n                width={1100}\n                footer={[\n                    <Button key=\"huy\" onClick={handleCancel}>\n                        Hủy\n                    </Button>,\n                    <Button key=\"them\" type=\"primary\"\n                        onClick={handleOkModal}>\n                        Sửa\n                    </Button>,\n\n\n                ]}\n            >\n                <Form\n                    form={form}\n                    // onFinish={onFinish} \n                    layout=\"vertical\"\n                    style={{ margin: 33, }}\n\n                >\n                    <Row gutter={16}>\n                        <Col span={8}>\n                            <Form.Item\n                                label=\"id\"\n                                name=\"_id\"\n                                rules={[{ required: true, message: 'Vui lòng nhập tên sách!' }]}\n                            >\n                                <Input readOnly />\n                            </Form.Item>\n\n                            <Form.Item name=\"userType\" label=\"User Type\" rules={[{ required: true, message: 'Please select user type!' }]}>\n                                <Select placeholder='User Type' fluid selection\n                                // onChange={(value) => setUserType(value)}\n                                >\n                                    {/* Render options */}\n                                </Select>\n                            </Form.Item>\n                            <Form.Item name=\"userFullName\" label=\"Họ và tên\" rules={[{ required: true, message: 'Please enter full name!' }]}>\n                                <Input />\n                            </Form.Item>\n                            <Form.Item name=\"email\" label=\"Email\" rules={[{ required: true, message: 'Please enter email!', type: 'email' }]}>\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item name=\"password\" label=\"Mật khẩu\" rules={[{ required: true, message: 'Please enter password!' }]}>\n                                <Input.Password />\n                            </Form.Item>\n                        </Col>\n                        <Col span={8}>\n\n                            <Form.Item name=\"address\" label=\"Địa chỉ\" rules={[{ required: true, message: 'Please enter address!' }]}>\n                                <Input />\n                            </Form.Item>\n                            <Form.Item name=\"mobileNumber\" label=\"Số điện thoại\" rules={[{ required: true, message: 'Please enter mobile number!' }]}>\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item name=\"gender\" label=\"Giới tính\" rules={[{ required: true, message: 'Please select gender!' }]}>\n                                <Select placeholder='User Type' fluid selection\n                                // value={gender} onChange={(value) => setGender(value)}\n                                >\n                                    {/* Render options */}\n                                </Select>\n                            </Form.Item>\n\n                            <Form.Item name=\"dob\" label=\"Ngày sinh\" rules={[{ required: true, message: 'Please select date of birth!' }]}>\n                                <DatePicker placeholderText=\"dd/MM/YYYY\" format=\"DD/MM/YYYY\" />\n                            </Form.Item>\n                        </Col>\n                        <Col span={8}>\n\n\n\n                            <Form.Item\n                                label=\"Ảnh đại diện\"\n                                name=\"photo\"\n                            >\n                                <input type=\"file\" onChange={handleChange} />\n                                {imageURL && (\n                                    <img\n                                        style={{\n                                            width: '200px',\n                                            height: '200px'\n                                        }}\n                                        src={imageURL}\n                                        alt=\"Ảnh bìa\"\n                                    />\n                                )}\n                            </Form.Item>\n                        </Col>\n\n                    </Row>\n\n                    <Form.Item\n                        style={{\n                            paddingTop: 24,\n                        }}\n                    >\n                        {/* <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                            XÁC NHẬN\n                        </Button> */}\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n\n    )\n}\n\nexport default GetMember\n","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\info.js",["764","765","766","767","768","769","770","771","772","773","774","775"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Admin\\Components\\Return.js",["776","777","778","779","780","781","782"],"import React, { useContext, useEffect, useState } from 'react'\nimport \"../AdminDashboard.css\"\nimport axios from \"axios\"\nimport { Dropdown } from 'semantic-ui-react'\nimport '../../Member/MemberDashboard.css'\nimport moment from \"moment\"\nimport { AuthContext } from '../../../../Context/AuthContext'\nimport { Select, Form, Button } from 'antd';\nimport TransController from '../../../../Controller/TransactionController';\nimport UserController from '../../../../Controller/UserController';\nimport BookController from '../../../../Controller/bookController';\nimport { TableContainer, TablePagination, Paper } from '@material-ui/core';\nimport io from 'socket.io-client';\nconst { Option } = Select;\n\n\nfunction Return() {\n    const socket = io('http://localhost:8888');\n    const API_URL = process.env.REACT_APP_API_URL\n    const { user } = useContext(AuthContext)\n\n    const [allTransactions, setAllTransactions] = useState([])\n    const [ExecutionStatus, setExecutionStatus] = useState(null) /* For triggering the tabledata to be updated */\n    const [allMembers, setAllMembers] = useState([]);\n    const [borrowerId, setBorrowerId] = useState(null)\n    const [allTransactionsTrue, setAllTransactionsTrue] = useState([])\n    const [allTransactionsFalse, setAllTransactionsFalse] = useState([])\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n\n    // lay danh sach transaction chua xu ly\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let transactions;\n                // if (borrowerId === null) {\n                transactions = await TransController.getAllTrans();\n                // } else {\n                //   transactions = await TransController.getTransByUser(borrowerId);\n                // }\n\n                const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"True\");\n                setAllTransactionsTrue(activeTransactions);\n                const falseTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"False\");\n                setAllTransactionsFalse(falseTransactions);\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n        fetchData();     // Gọi fetchData để lấy dữ liệu\n\n    }, []); // useEffect sẽ chỉ chạy một lần sau khi render lần đầu tiên\n    const fetchUserTransactions = async (userId) => {\n        try {\n            const transactions = await TransController.getTransByUser(userId);\n            console.log(\"user trans\", transactions)\n            const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"True\");\n            setAllTransactionsTrue(activeTransactions);\n            const falseTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"False\");\n            setAllTransactionsFalse(falseTransactions);\n        } catch (error) {\n            console.error('Error fetching user transactions:', error);\n        }\n    };\n    // lay danh sach nguoi dung khong phai la admin\n    useEffect(() => {\n        const fetchData = async () => {\n\n            try {\n                const allUser = await UserController.getAllUsers();\n                // Lọc danh sách các giao dịch có trạng thái là \"Active\"\n                const Users = allUser.filter(user => user && user.isAdmin !== true);\n                setAllMembers(Users); // Đặt danh sách các giao dịch \"Active\" vào state\n            } catch (error) {\n                console.error('Error fetching transactions:', error);\n            }\n        };\n\n        fetchData(); // Gọi fetchData để lấy dữ liệu\n\n    }, []);\n    const handleSelectUser = (userId) => {\n        setBorrowerId(userId)\n        fetchUserTransactions(userId);\n    };\n    const handleUpdateTransaction = async (transactionId) => {\n        try {\n            const data = {\n                staff_edit: user._id,\n                transactionStatus: \"False\"\n            };\n            // Gọi hàm updateTransaction từ TransController để cập nhật giao dịch\n            const updatedTransaction = await TransController.updateTransaction(transactionId, data);\n            const transactions = await TransController.getAllTrans();\n            // } else {\n            //   transactions = await TransController.getTransByUser(borrowerId);\n            // }\n\n            const activeTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"True\");\n            setAllTransactionsTrue(activeTransactions);\n            const falseTransactions = transactions.filter(transaction => transaction && transaction.transactionStatus && transaction.transactionStatus === \"False\");\n            setAllTransactionsFalse(falseTransactions);\n            console.log('Transaction updated:', updatedTransaction);\n            alert('cập nhật thành công 🎉');\n            socket.emit('notifyChange');\n        } catch (error) {\n            console.error('Error updating transaction:', error);\n        }\n    };\n\n\n\n    const convertToIssue = async (transactionId) => {\n        try {\n            await axios.put(API_URL + \"api/transactions/update-transaction/\" + transactionId, {\n                transactionType: \"Issued\",\n                isAdmin: user.isAdmin\n            })\n            setExecutionStatus(\"Completed\");\n            alert(\"Chuyển trạng thái 'Đã mượn' thành công 🎆\")\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n\n    return (\n        <div>\n            <div className='semanticdropdown returnbook-dropdown'>\n                <Form\n                    label=\"Độc giả\"\n                    name=\"borrowerId\"\n                    rules={[{ required: true, message: 'Vui lòng chọn độc giả' }]}\n                    labelStyle={{ fontSize: '20px' }} // Thêm style cho nhãn\n                >\n                    <Select\n                        placeholder=\"Chọn độc giả\"\n                        onChange={handleSelectUser}\n                        style={{ fontSize: '16px' }}\n                        // Thêm style cho Select component\n                        showSearch  // Thêm tính năng tìm kiếm\n                        optionFilterProp=\"children\" // Chỉ định thuộc tính cần tìm kiếm trong các option\n                        filterOption={(input, option) =>\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }\n                    >\n                        {allMembers.map(member => (\n                            <Option key={member._id} value={member._id}>{member.userFullName}</Option>\n                        ))}\n                    </Select>\n\n\n                </Form>\n            </div>\n            <p className=\"dashboard-option-title\">Đã mượn</p>\n            {/* <table className=\"admindashboard-table\">\n                <tr>\n                    <th>Tên sách</th>\n                    <th>Người mượn</th>\n                    <th>Từ ngày</th>\n                    <th>Đến ngày</th>\n                    <th>Quá hạn</th>\n                    <th></th>\n                </tr>\n                {Array.isArray(allTransactionsTrue) && allTransactionsTrue.length > 0 ? (\n                    allTransactionsTrue.map((data, index) => (\n                        <tr key={index}>\n                            <td>{data ? data.books : \"N/A\"}</td>\n                            <td>{data ? data.userName : \"N/A\"}</td>\n                            <td>{data ? data.fromDate : \"N/A\"}</td>\n                            <td>{data ? data.toDate : \"N/A\"}</td>\n                            <td>{data ? data.overdue : \"N/A\"}</td>\n\n                            <td>\n                                <button onClick={() => handleUpdateTransaction(data._id)}>\n                                    Trả sách\n                                </button>\n                            </td>\n                        </tr>\n                    ))\n                ) : (\n                    <tr>\n                        <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                    </tr>\n                )}\n            </table> */}\n            {allTransactionsTrue.length > 0 ? (\n                <>\n                    <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                        <table className=\"admindashboard-table\">\n                            <thead>\n                                <tr>\n                                    <th>Tên sách</th>\n                                    <th>Người mượn</th>\n                                    <th>Từ ngày</th>\n                                    <th>Đến ngày</th>\n                                    <th>Quá hạn</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {allTransactionsTrue.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\n                                    <tr key={index}>\n                                        <td>{data ? data.books : \"N/A\"}</td>\n                                        <td>{data ? data.userName : \"N/A\"}</td>\n                                        <td>{data ? data.fromDate : \"N/A\"}</td>\n                                        <td>{data ? data.toDate : \"N/A\"}</td>\n                                        <td>{data ? data.overdue : \"N/A\"}</td>\n\n                                        <td>\n                                            <Button type=\"primary\" onClick={() => handleUpdateTransaction(data._id)}>\n                                                Trả sách\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </TableContainer>\n                    <TablePagination\n                        onRowsPerPageChange={(e) => {\n                            setRowsPerPage(parseInt(e.target.value, 10))\n                            setPage(0)\n                        }}\n                        component=\"div\"\n                        count={allTransactions.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={(e, newPage) => setPage(newPage)}\n                        style={{ maxWidth: '1160px' }}\n                    />\n                </>\n            ) : (\n                <table className=\"admindashboard-table\">\n                    <thead>\n                        <tr>\n                            <th>Tên sách</th>\n                            <th>Người mượn</th>\n                            <th>Từ ngày</th>\n                            <th>Đến ngày</th>\n                            <th>Quá hạn</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                        </tr>\n                    </tbody>\n                </table>\n            )}\n            <p className=\"dashboard-option-title\">Lịch Sử</p>\n            {allTransactionsFalse.length > 0 ? (\n                <>\n                    <TableContainer component={Paper} style={{ maxWidth: '1160px' }}>\n\n                        <table className=\"admindashboard-table\">\n                            <thead>\n                                <tr>\n                                    <th>Tên sách</th>\n                                    <th>Người mượn</th>\n                                    <th>Từ ngày</th>\n                                    <th>Đến ngày</th>\n                                    <th>Quá hạn</th>\n\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {allTransactionsFalse.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((data, index) => (\n                                    <tr key={index}>\n                                        <td>{data ? data.books : \"N/A\"}</td>\n                                        <td>{data ? data.userName : \"N/A\"}</td>\n                                        <td>{data ? data.fromDate : \"N/A\"}</td>\n                                        <td>{data ? data.toDate : \"N/A\"}</td>\n                                        <td>{data ? data.overdue : \"N/A\"}</td>\n\n\n\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </TableContainer>\n                    <TablePagination\n                        onRowsPerPageChange={(e) => {\n                            setRowsPerPage(parseInt(e.target.value, 10))\n                            setPage(0)\n                        }}\n                        component=\"div\"\n                        count={allTransactions.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={(e, newPage) => setPage(newPage)}\n                        style={{ maxWidth: '1160px' }}\n                    />\n                </>\n            ) : (\n                <table className=\"admindashboard-table\">\n                    <thead>\n\n                        <tr>\n                            <th>Tên sách</th>\n                            <th>Người mượn</th>\n                            <th>Từ ngày</th>\n                            <th>Đến ngày</th>\n                            <th>Quá hạn</th>\n                        </tr>\n\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td colSpan=\"5\">Không có giao dịch nào được tìm thấy</td>\n                        </tr>\n                    </tbody>\n                </table>\n            )}\n        </div>\n    )\n}\n\nexport default Return\n","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\ImageSlider\\ImageSlider.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\transactions.js",["783","784","785","786","787","788","789","790","791","792","793","794","795","796","797"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\Dashboard\\Member\\info.js",["798","799","800","801","802","803","804","805","806","807","808","809"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\firebase.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\WelcomeBox\\WelcomeBox.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Footer\\Footer.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\PopularBooks\\PopularBooks.js",["810","811","812","813","814"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Stats\\Stats.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\About\\About.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Pages\\getURLimage.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Loader\\Loader.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Navbar\\Navbar.js",["815"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Components\\Breadcrumb\\Breadcrumb.js",["816","817"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\CateController.js",["818","819","820"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\TransactionController.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\UserController.js",["821","822"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\BookApi.js",["823"],"import axios from \"axios\"\nimport { userService } from \"../services/authentication.service\";\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst BookApi = {\n  GetAllBooks: async () => {\n    const res = await axios.get(\"http://localhost:8080/api/books/allbooks\",\n      {\n        headers: {\n          'Authorization': userService.getToken()\n        }\n      })\n    return res.data\n  },\n  // http://localhost:5000/api/books/getallcate\n  getAllCate: async () => {\n    const res = await axios.get(\"http://localhost:8080/api/books/getallcate\",\n      {\n        headers: {\n          'Authorization': userService.getToken()\n        }\n      })\n    return res.data\n  },\n  getBookbyID: async (bookID) => {\n    const res = await axios.get(`http://localhost:8080/api/books/getbook/${bookID}`,\n      {\n        headers: {\n          'Authorization': userService.getToken()\n        }\n      })\n    return res.data\n  },\n  addBook: async (data) => {\n    const res = await axios.post(\"http://localhost:8080/api/books/addbook\", data,\n      {\n        headers: {\n          'Authorization': userService.getToken()\n        }\n      })\n    return res.data\n  },\n  updateBook: async (bookID, data) => {\n    const jsonData = {};\n    data.forEach((value, key) => {\n      jsonData[key] = value;\n    });\n\n    const res = await axios.put(`http://localhost:8080/api/books/updatebook/${bookID}`, jsonData,\n      {\n        headers: {\n          'Authorization': userService.getToken()\n        }\n      })\n    return res.data\n  },\n  deleteBook: async (bookID) => {\n    const res = await axios.delete(`http://localhost:8080/api/books/removebook/${bookID}`,\n      {\n        headers: {\n          'Authorization': userService.getToken()\n        }\n      })\n    return res.data\n  },\n\n}\n\nexport default BookApi;\n","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\Controller\\bookController.js",["824","825"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\user.js",["826"],"import axios from \"axios\"\nimport {userService} from \"../services/authentication.service\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst UserApi = {\n  getAllUser: async () => {\n    const res = await axios.get(\"http://localhost:8080/api/users/allmembers\",\n    {\n      headers: {\n        'Authorization': userService.getToken()\n      }\n    }\n    );\n    return res.data\n  },\n  getUserbyID: async (userId) => {\n    const res = await axios.get(`http://localhost:8080/api/users/getuser/${userId}`)\n    return res.data\n  },\n  addUser: async (data) => {\n    const res = await axios.post(\"http://localhost:8080/api/users/addbook\", data)\n    return res.data\n  },\n  updateUser: async (userId, data) => {\n    const res = await axios.put(`http://localhost:8080/api/users/updateuser/${userId}`, data)\n    return res.data\n  },\n  deleteUser: async (userId) => {\n    const res = await axios.delete(`http://localhost:8080/api/users/remove-Useraction/${userId}`)\n    return res.data\n  },\n}\n\nexport default UserApi\n","D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\trans.js",[],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\callAPI\\cateAPI.js",["827"],"D:\\code\\hệ thống phân tán\\web-thu-vien-mern-stack-main\\front-end\\src\\services\\authentication.service.js",[],{"ruleId":"828","replacedBy":"829"},{"ruleId":"830","replacedBy":"831"},{"ruleId":"832","severity":1,"message":"833","line":7,"column":3,"nodeType":"834","messageId":"835","endLine":7,"endColumn":11},{"ruleId":"832","severity":1,"message":"836","line":26,"column":11,"nodeType":"834","messageId":"835","endLine":26,"endColumn":15},{"ruleId":"832","severity":1,"message":"837","line":3,"column":10,"nodeType":"834","messageId":"835","endLine":3,"endColumn":20},{"ruleId":"832","severity":1,"message":"838","line":5,"column":61,"nodeType":"834","messageId":"835","endLine":5,"endColumn":76},{"ruleId":"832","severity":1,"message":"839","line":6,"column":5,"nodeType":"834","messageId":"835","endLine":6,"endColumn":25},{"ruleId":"832","severity":1,"message":"840","line":15,"column":9,"nodeType":"834","messageId":"835","endLine":15,"endColumn":15},{"ruleId":"832","severity":1,"message":"841","line":3,"column":24,"nodeType":"834","messageId":"835","endLine":3,"endColumn":36},{"ruleId":"832","severity":1,"message":"842","line":3,"column":52,"nodeType":"834","messageId":"835","endLine":3,"endColumn":64},{"ruleId":"832","severity":1,"message":"838","line":3,"column":66,"nodeType":"834","messageId":"835","endLine":3,"endColumn":81},{"ruleId":"832","severity":1,"message":"843","line":6,"column":10,"nodeType":"834","messageId":"835","endLine":6,"endColumn":14},{"ruleId":"832","severity":1,"message":"844","line":7,"column":9,"nodeType":"834","messageId":"835","endLine":7,"endColumn":16},{"ruleId":"832","severity":1,"message":"840","line":8,"column":9,"nodeType":"834","messageId":"835","endLine":8,"endColumn":15},{"ruleId":"845","severity":1,"message":"846","line":94,"column":21,"nodeType":"847","endLine":94,"endColumn":57},{"ruleId":"832","severity":1,"message":"848","line":1,"column":17,"nodeType":"834","messageId":"835","endLine":1,"endColumn":27},{"ruleId":"832","severity":1,"message":"849","line":4,"column":10,"nodeType":"834","messageId":"835","endLine":4,"endColumn":21},{"ruleId":"832","severity":1,"message":"850","line":62,"column":27,"nodeType":"834","messageId":"835","endLine":62,"endColumn":35},{"ruleId":"832","severity":1,"message":"851","line":7,"column":8,"nodeType":"834","messageId":"835","endLine":7,"endColumn":13},{"ruleId":"852","severity":1,"message":"853","line":41,"column":8,"nodeType":"854","endLine":41,"endColumn":10,"suggestions":"855"},{"ruleId":"832","severity":1,"message":"843","line":5,"column":10,"nodeType":"834","messageId":"835","endLine":5,"endColumn":14},{"ruleId":"832","severity":1,"message":"856","line":7,"column":10,"nodeType":"834","messageId":"835","endLine":7,"endColumn":21},{"ruleId":"832","severity":1,"message":"857","line":12,"column":5,"nodeType":"834","messageId":"835","endLine":12,"endColumn":13},{"ruleId":"832","severity":1,"message":"858","line":16,"column":5,"nodeType":"834","messageId":"835","endLine":16,"endColumn":16},{"ruleId":"832","severity":1,"message":"859","line":17,"column":5,"nodeType":"834","messageId":"835","endLine":17,"endColumn":13},{"ruleId":"832","severity":1,"message":"860","line":18,"column":5,"nodeType":"834","messageId":"835","endLine":18,"endColumn":11},{"ruleId":"832","severity":1,"message":"861","line":19,"column":5,"nodeType":"834","messageId":"835","endLine":19,"endColumn":15},{"ruleId":"832","severity":1,"message":"862","line":28,"column":5,"nodeType":"834","messageId":"835","endLine":28,"endColumn":11},{"ruleId":"832","severity":1,"message":"863","line":32,"column":8,"nodeType":"834","messageId":"835","endLine":32,"endColumn":19},{"ruleId":"832","severity":1,"message":"840","line":35,"column":9,"nodeType":"834","messageId":"835","endLine":35,"endColumn":15},{"ruleId":"832","severity":1,"message":"864","line":35,"column":26,"nodeType":"834","messageId":"835","endLine":35,"endColumn":31},{"ruleId":"832","severity":1,"message":"865","line":45,"column":11,"nodeType":"834","messageId":"835","endLine":45,"endColumn":18},{"ruleId":"832","severity":1,"message":"866","line":48,"column":22,"nodeType":"834","messageId":"835","endLine":48,"endColumn":33},{"ruleId":"832","severity":1,"message":"867","line":54,"column":11,"nodeType":"834","messageId":"835","endLine":54,"endColumn":19},{"ruleId":"852","severity":1,"message":"868","line":89,"column":8,"nodeType":"854","endLine":89,"endColumn":17,"suggestions":"869"},{"ruleId":"832","severity":1,"message":"870","line":126,"column":11,"nodeType":"834","messageId":"835","endLine":126,"endColumn":34},{"ruleId":"832","severity":1,"message":"871","line":137,"column":19,"nodeType":"834","messageId":"835","endLine":137,"endColumn":37},{"ruleId":"845","severity":1,"message":"846","line":179,"column":40,"nodeType":"847","endLine":179,"endColumn":51},{"ruleId":"845","severity":1,"message":"846","line":182,"column":40,"nodeType":"847","endLine":182,"endColumn":51},{"ruleId":"872","severity":1,"message":"873","line":30,"column":21,"nodeType":"834","messageId":"874","endLine":30,"endColumn":28},{"ruleId":"852","severity":1,"message":"875","line":30,"column":31,"nodeType":"876","endLine":30,"endColumn":33},{"ruleId":"832","severity":1,"message":"877","line":1,"column":27,"nodeType":"834","messageId":"835","endLine":1,"endColumn":33},{"ruleId":"832","severity":1,"message":"878","line":6,"column":10,"nodeType":"834","messageId":"835","endLine":6,"endColumn":18},{"ruleId":"832","severity":1,"message":"879","line":9,"column":8,"nodeType":"834","messageId":"835","endLine":9,"endColumn":14},{"ruleId":"832","severity":1,"message":"880","line":11,"column":5,"nodeType":"834","messageId":"835","endLine":11,"endColumn":11},{"ruleId":"832","severity":1,"message":"881","line":16,"column":5,"nodeType":"834","messageId":"835","endLine":16,"endColumn":13},{"ruleId":"832","severity":1,"message":"882","line":22,"column":9,"nodeType":"834","messageId":"835","endLine":22,"endColumn":14},{"ruleId":"832","severity":1,"message":"883","line":23,"column":9,"nodeType":"834","messageId":"835","endLine":23,"endColumn":13},{"ruleId":"832","severity":1,"message":"884","line":33,"column":12,"nodeType":"834","messageId":"835","endLine":33,"endColumn":16},{"ruleId":"852","severity":1,"message":"885","line":66,"column":8,"nodeType":"854","endLine":66,"endColumn":10,"suggestions":"886"},{"ruleId":"852","severity":1,"message":"885","line":97,"column":8,"nodeType":"854","endLine":97,"endColumn":10,"suggestions":"887"},{"ruleId":"832","severity":1,"message":"888","line":134,"column":11,"nodeType":"834","messageId":"835","endLine":134,"endColumn":19},{"ruleId":"845","severity":1,"message":"846","line":274,"column":33,"nodeType":"847","endLine":274,"endColumn":45},{"ruleId":"845","severity":1,"message":"889","line":361,"column":40,"nodeType":"847","endLine":361,"endColumn":83},{"ruleId":"832","severity":1,"message":"837","line":11,"column":8,"nodeType":"834","messageId":"835","endLine":11,"endColumn":18},{"ruleId":"852","severity":1,"message":"890","line":54,"column":6,"nodeType":"854","endLine":54,"endColumn":10,"suggestions":"891"},{"ruleId":"832","severity":1,"message":"892","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":13},{"ruleId":"832","severity":1,"message":"893","line":7,"column":8,"nodeType":"834","messageId":"835","endLine":7,"endColumn":15},{"ruleId":"832","severity":1,"message":"894","line":11,"column":11,"nodeType":"834","messageId":"835","endLine":11,"endColumn":18},{"ruleId":"832","severity":1,"message":"895","line":2,"column":30,"nodeType":"834","messageId":"835","endLine":2,"endColumn":35},{"ruleId":"832","severity":1,"message":"896","line":2,"column":73,"nodeType":"834","messageId":"835","endLine":2,"endColumn":80},{"ruleId":"832","severity":1,"message":"892","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":13},{"ruleId":"832","severity":1,"message":"897","line":5,"column":8,"nodeType":"834","messageId":"835","endLine":5,"endColumn":14},{"ruleId":"832","severity":1,"message":"894","line":21,"column":9,"nodeType":"834","messageId":"835","endLine":21,"endColumn":16},{"ruleId":"832","severity":1,"message":"898","line":24,"column":10,"nodeType":"834","messageId":"835","endLine":24,"endColumn":20},{"ruleId":"832","severity":1,"message":"899","line":25,"column":10,"nodeType":"834","messageId":"835","endLine":25,"endColumn":17},{"ruleId":"832","severity":1,"message":"900","line":27,"column":10,"nodeType":"834","messageId":"835","endLine":27,"endColumn":25},{"ruleId":"832","severity":1,"message":"901","line":28,"column":10,"nodeType":"834","messageId":"835","endLine":28,"endColumn":16},{"ruleId":"832","severity":1,"message":"902","line":32,"column":10,"nodeType":"834","messageId":"835","endLine":32,"endColumn":18},{"ruleId":"832","severity":1,"message":"903","line":16,"column":5,"nodeType":"834","messageId":"835","endLine":16,"endColumn":9},{"ruleId":"832","severity":1,"message":"904","line":17,"column":5,"nodeType":"834","messageId":"835","endLine":17,"endColumn":16},{"ruleId":"832","severity":1,"message":"905","line":18,"column":5,"nodeType":"834","messageId":"835","endLine":18,"endColumn":16},{"ruleId":"832","severity":1,"message":"863","line":24,"column":8,"nodeType":"834","messageId":"835","endLine":24,"endColumn":19},{"ruleId":"832","severity":1,"message":"857","line":32,"column":5,"nodeType":"834","messageId":"835","endLine":32,"endColumn":13},{"ruleId":"832","severity":1,"message":"906","line":33,"column":5,"nodeType":"834","messageId":"835","endLine":33,"endColumn":15},{"ruleId":"832","severity":1,"message":"858","line":36,"column":5,"nodeType":"834","messageId":"835","endLine":36,"endColumn":16},{"ruleId":"832","severity":1,"message":"859","line":37,"column":5,"nodeType":"834","messageId":"835","endLine":37,"endColumn":13},{"ruleId":"832","severity":1,"message":"861","line":39,"column":5,"nodeType":"834","messageId":"835","endLine":39,"endColumn":15},{"ruleId":"832","severity":1,"message":"907","line":65,"column":12,"nodeType":"834","messageId":"835","endLine":65,"endColumn":21},{"ruleId":"832","severity":1,"message":"908","line":65,"column":23,"nodeType":"834","messageId":"835","endLine":65,"endColumn":35},{"ruleId":"832","severity":1,"message":"909","line":66,"column":12,"nodeType":"834","messageId":"835","endLine":66,"endColumn":24},{"ruleId":"832","severity":1,"message":"910","line":66,"column":26,"nodeType":"834","messageId":"835","endLine":66,"endColumn":41},{"ruleId":"832","severity":1,"message":"911","line":69,"column":12,"nodeType":"834","messageId":"835","endLine":69,"endColumn":20},{"ruleId":"832","severity":1,"message":"912","line":72,"column":12,"nodeType":"834","messageId":"835","endLine":72,"endColumn":20},{"ruleId":"832","severity":1,"message":"913","line":75,"column":12,"nodeType":"834","messageId":"835","endLine":75,"endColumn":21},{"ruleId":"832","severity":1,"message":"914","line":76,"column":12,"nodeType":"834","messageId":"835","endLine":76,"endColumn":24},{"ruleId":"832","severity":1,"message":"915","line":78,"column":12,"nodeType":"834","messageId":"835","endLine":78,"endColumn":16},{"ruleId":"832","severity":1,"message":"867","line":110,"column":11,"nodeType":"834","messageId":"835","endLine":110,"endColumn":19},{"ruleId":"832","severity":1,"message":"850","line":197,"column":19,"nodeType":"834","messageId":"835","endLine":197,"endColumn":27},{"ruleId":"832","severity":1,"message":"916","line":228,"column":19,"nodeType":"834","messageId":"835","endLine":228,"endColumn":29},{"ruleId":"832","severity":1,"message":"917","line":245,"column":11,"nodeType":"834","messageId":"835","endLine":245,"endColumn":27},{"ruleId":"832","severity":1,"message":"918","line":250,"column":17,"nodeType":"834","messageId":"835","endLine":250,"endColumn":20},{"ruleId":"832","severity":1,"message":"916","line":251,"column":19,"nodeType":"834","messageId":"835","endLine":251,"endColumn":29},{"ruleId":"852","severity":1,"message":"919","line":301,"column":8,"nodeType":"854","endLine":301,"endColumn":10,"suggestions":"920"},{"ruleId":"832","severity":1,"message":"921","line":6,"column":10,"nodeType":"834","messageId":"835","endLine":6,"endColumn":18},{"ruleId":"832","severity":1,"message":"922","line":7,"column":10,"nodeType":"834","messageId":"835","endLine":7,"endColumn":24},{"ruleId":"832","severity":1,"message":"923","line":7,"column":26,"nodeType":"834","messageId":"835","endLine":7,"endColumn":38},{"ruleId":"832","severity":1,"message":"924","line":9,"column":8,"nodeType":"834","messageId":"835","endLine":9,"endColumn":22},{"ruleId":"832","severity":1,"message":"925","line":14,"column":5,"nodeType":"834","messageId":"835","endLine":14,"endColumn":8},{"ruleId":"832","severity":1,"message":"926","line":15,"column":5,"nodeType":"834","messageId":"835","endLine":15,"endColumn":16},{"ruleId":"832","severity":1,"message":"927","line":16,"column":5,"nodeType":"834","messageId":"835","endLine":16,"endColumn":19},{"ruleId":"832","severity":1,"message":"928","line":17,"column":5,"nodeType":"834","messageId":"835","endLine":17,"endColumn":12},{"ruleId":"832","severity":1,"message":"929","line":19,"column":10,"nodeType":"834","messageId":"835","endLine":19,"endColumn":17},{"ruleId":"832","severity":1,"message":"930","line":20,"column":54,"nodeType":"834","messageId":"835","endLine":20,"endColumn":59},{"ruleId":"832","severity":1,"message":"931","line":20,"column":61,"nodeType":"834","messageId":"835","endLine":20,"endColumn":67},{"ruleId":"832","severity":1,"message":"932","line":21,"column":9,"nodeType":"834","messageId":"835","endLine":21,"endColumn":15},{"ruleId":"832","severity":1,"message":"933","line":22,"column":9,"nodeType":"834","messageId":"835","endLine":22,"endColumn":14},{"ruleId":"832","severity":1,"message":"934","line":23,"column":7,"nodeType":"834","messageId":"835","endLine":23,"endColumn":16},{"ruleId":"832","severity":1,"message":"912","line":38,"column":12,"nodeType":"834","messageId":"835","endLine":38,"endColumn":20},{"ruleId":"832","severity":1,"message":"935","line":42,"column":12,"nodeType":"834","messageId":"835","endLine":42,"endColumn":26},{"ruleId":"832","severity":1,"message":"936","line":42,"column":28,"nodeType":"834","messageId":"835","endLine":42,"endColumn":45},{"ruleId":"832","severity":1,"message":"937","line":43,"column":25,"nodeType":"834","messageId":"835","endLine":43,"endColumn":39},{"ruleId":"832","severity":1,"message":"907","line":80,"column":12,"nodeType":"834","messageId":"835","endLine":80,"endColumn":21},{"ruleId":"832","severity":1,"message":"908","line":80,"column":23,"nodeType":"834","messageId":"835","endLine":80,"endColumn":35},{"ruleId":"832","severity":1,"message":"914","line":82,"column":12,"nodeType":"834","messageId":"835","endLine":82,"endColumn":24},{"ruleId":"832","severity":1,"message":"938","line":84,"column":12,"nodeType":"834","messageId":"835","endLine":84,"endColumn":25},{"ruleId":"832","severity":1,"message":"939","line":86,"column":11,"nodeType":"834","messageId":"835","endLine":86,"endColumn":19},{"ruleId":"832","severity":1,"message":"940","line":114,"column":11,"nodeType":"834","messageId":"835","endLine":114,"endColumn":28},{"ruleId":"832","severity":1,"message":"941","line":3,"column":10,"nodeType":"834","messageId":"835","endLine":3,"endColumn":22},{"ruleId":"832","severity":1,"message":"932","line":10,"column":9,"nodeType":"834","messageId":"835","endLine":10,"endColumn":15},{"ruleId":"832","severity":1,"message":"921","line":4,"column":10,"nodeType":"834","messageId":"835","endLine":4,"endColumn":18},{"ruleId":"832","severity":1,"message":"942","line":8,"column":8,"nodeType":"834","messageId":"835","endLine":8,"endColumn":22},{"ruleId":"832","severity":1,"message":"897","line":9,"column":8,"nodeType":"834","messageId":"835","endLine":9,"endColumn":14},{"ruleId":"832","severity":1,"message":"906","line":15,"column":18,"nodeType":"834","messageId":"835","endLine":15,"endColumn":28},{"ruleId":"832","severity":1,"message":"895","line":15,"column":30,"nodeType":"834","messageId":"835","endLine":15,"endColumn":35},{"ruleId":"832","severity":1,"message":"943","line":15,"column":37,"nodeType":"834","messageId":"835","endLine":15,"endColumn":47},{"ruleId":"832","severity":1,"message":"896","line":15,"column":73,"nodeType":"834","messageId":"835","endLine":15,"endColumn":80},{"ruleId":"832","severity":1,"message":"907","line":31,"column":12,"nodeType":"834","messageId":"835","endLine":31,"endColumn":21},{"ruleId":"832","severity":1,"message":"908","line":31,"column":23,"nodeType":"834","messageId":"835","endLine":31,"endColumn":35},{"ruleId":"832","severity":1,"message":"909","line":32,"column":12,"nodeType":"834","messageId":"835","endLine":32,"endColumn":24},{"ruleId":"832","severity":1,"message":"910","line":32,"column":26,"nodeType":"834","messageId":"835","endLine":32,"endColumn":41},{"ruleId":"832","severity":1,"message":"944","line":34,"column":12,"nodeType":"834","messageId":"835","endLine":34,"endColumn":29},{"ruleId":"832","severity":1,"message":"867","line":35,"column":11,"nodeType":"834","messageId":"835","endLine":35,"endColumn":19},{"ruleId":"852","severity":1,"message":"945","line":61,"column":8,"nodeType":"854","endLine":61,"endColumn":10,"suggestions":"946"},{"ruleId":"832","severity":1,"message":"921","line":4,"column":10,"nodeType":"834","messageId":"835","endLine":4,"endColumn":18},{"ruleId":"832","severity":1,"message":"897","line":6,"column":8,"nodeType":"834","messageId":"835","endLine":6,"endColumn":14},{"ruleId":"832","severity":1,"message":"942","line":11,"column":8,"nodeType":"834","messageId":"835","endLine":11,"endColumn":22},{"ruleId":"832","severity":1,"message":"947","line":21,"column":29,"nodeType":"834","messageId":"835","endLine":21,"endColumn":47},{"ruleId":"832","severity":1,"message":"948","line":22,"column":12,"nodeType":"834","messageId":"835","endLine":22,"endColumn":27},{"ruleId":"832","severity":1,"message":"898","line":24,"column":12,"nodeType":"834","messageId":"835","endLine":24,"endColumn":22},{"ruleId":"832","severity":1,"message":"949","line":112,"column":11,"nodeType":"834","messageId":"835","endLine":112,"endColumn":25},{"ruleId":"832","severity":1,"message":"950","line":1,"column":17,"nodeType":"834","messageId":"835","endLine":1,"endColumn":26},{"ruleId":"832","severity":1,"message":"892","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":13},{"ruleId":"832","severity":1,"message":"951","line":9,"column":20,"nodeType":"834","messageId":"835","endLine":9,"endColumn":31},{"ruleId":"832","severity":1,"message":"952","line":10,"column":19,"nodeType":"834","messageId":"835","endLine":10,"endColumn":29},{"ruleId":"832","severity":1,"message":"894","line":13,"column":9,"nodeType":"834","messageId":"835","endLine":13,"endColumn":16},{"ruleId":"832","severity":1,"message":"953","line":2,"column":41,"nodeType":"834","messageId":"835","endLine":2,"endColumn":56},{"ruleId":"832","severity":1,"message":"954","line":3,"column":10,"nodeType":"834","messageId":"835","endLine":3,"endColumn":22},{"ruleId":"832","severity":1,"message":"955","line":4,"column":8,"nodeType":"834","messageId":"835","endLine":4,"endColumn":15},{"ruleId":"832","severity":1,"message":"894","line":2,"column":7,"nodeType":"834","messageId":"835","endLine":2,"endColumn":14},{"ruleId":"832","severity":1,"message":"894","line":2,"column":7,"nodeType":"834","messageId":"835","endLine":2,"endColumn":14},{"ruleId":"832","severity":1,"message":"956","line":1,"column":8,"nodeType":"834","messageId":"835","endLine":1,"endColumn":16},{"ruleId":"832","severity":1,"message":"893","line":2,"column":8,"nodeType":"834","messageId":"835","endLine":2,"endColumn":15},{"ruleId":"832","severity":1,"message":"956","line":1,"column":8,"nodeType":"834","messageId":"835","endLine":1,"endColumn":16},{"ruleId":"832","severity":1,"message":"957","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":15},{"ruleId":"832","severity":1,"message":"892","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":13},{"ruleId":"832","severity":1,"message":"921","line":4,"column":10,"nodeType":"834","messageId":"835","endLine":4,"endColumn":18},{"ruleId":"832","severity":1,"message":"897","line":6,"column":8,"nodeType":"834","messageId":"835","endLine":6,"endColumn":14},{"ruleId":"832","severity":1,"message":"958","line":8,"column":18,"nodeType":"834","messageId":"835","endLine":8,"endColumn":22},{"ruleId":"832","severity":1,"message":"959","line":10,"column":8,"nodeType":"834","messageId":"835","endLine":10,"endColumn":22},{"ruleId":"832","severity":1,"message":"942","line":11,"column":8,"nodeType":"834","messageId":"835","endLine":11,"endColumn":22},{"ruleId":"832","severity":1,"message":"932","line":17,"column":9,"nodeType":"834","messageId":"835","endLine":17,"endColumn":15},{"ruleId":"832","severity":1,"message":"894","line":22,"column":11,"nodeType":"834","messageId":"835","endLine":22,"endColumn":18},{"ruleId":"832","severity":1,"message":"948","line":26,"column":12,"nodeType":"834","messageId":"835","endLine":26,"endColumn":27},{"ruleId":"832","severity":1,"message":"960","line":26,"column":29,"nodeType":"834","messageId":"835","endLine":26,"endColumn":47},{"ruleId":"832","severity":1,"message":"961","line":27,"column":12,"nodeType":"834","messageId":"835","endLine":27,"endColumn":22},{"ruleId":"832","severity":1,"message":"962","line":27,"column":24,"nodeType":"834","messageId":"835","endLine":27,"endColumn":37},{"ruleId":"832","severity":1,"message":"898","line":28,"column":12,"nodeType":"834","messageId":"835","endLine":28,"endColumn":22},{"ruleId":"832","severity":1,"message":"963","line":28,"column":24,"nodeType":"834","messageId":"835","endLine":28,"endColumn":37},{"ruleId":"852","severity":1,"message":"964","line":55,"column":8,"nodeType":"854","endLine":55,"endColumn":10,"suggestions":"965"},{"ruleId":"832","severity":1,"message":"956","line":1,"column":8,"nodeType":"834","messageId":"835","endLine":1,"endColumn":16},{"ruleId":"832","severity":1,"message":"893","line":2,"column":8,"nodeType":"834","messageId":"835","endLine":2,"endColumn":15},{"ruleId":"832","severity":1,"message":"957","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":15},{"ruleId":"832","severity":1,"message":"894","line":2,"column":7,"nodeType":"834","messageId":"835","endLine":2,"endColumn":14},{"ruleId":"832","severity":1,"message":"921","line":7,"column":10,"nodeType":"834","messageId":"835","endLine":7,"endColumn":18},{"ruleId":"832","severity":1,"message":"922","line":8,"column":10,"nodeType":"834","messageId":"835","endLine":8,"endColumn":24},{"ruleId":"832","severity":1,"message":"925","line":13,"column":5,"nodeType":"834","messageId":"835","endLine":13,"endColumn":8},{"ruleId":"832","severity":1,"message":"926","line":14,"column":5,"nodeType":"834","messageId":"835","endLine":14,"endColumn":16},{"ruleId":"832","severity":1,"message":"927","line":15,"column":5,"nodeType":"834","messageId":"835","endLine":15,"endColumn":19},{"ruleId":"832","severity":1,"message":"928","line":16,"column":5,"nodeType":"834","messageId":"835","endLine":16,"endColumn":12},{"ruleId":"832","severity":1,"message":"895","line":20,"column":37,"nodeType":"834","messageId":"835","endLine":20,"endColumn":42},{"ruleId":"832","severity":1,"message":"932","line":21,"column":9,"nodeType":"834","messageId":"835","endLine":21,"endColumn":15},{"ruleId":"832","severity":1,"message":"933","line":22,"column":9,"nodeType":"834","messageId":"835","endLine":22,"endColumn":14},{"ruleId":"832","severity":1,"message":"966","line":37,"column":12,"nodeType":"834","messageId":"835","endLine":37,"endColumn":20},{"ruleId":"832","severity":1,"message":"938","line":39,"column":12,"nodeType":"834","messageId":"835","endLine":39,"endColumn":25},{"ruleId":"832","severity":1,"message":"940","line":125,"column":11,"nodeType":"834","messageId":"835","endLine":125,"endColumn":28},{"ruleId":"832","severity":1,"message":"921","line":7,"column":10,"nodeType":"834","messageId":"835","endLine":7,"endColumn":18},{"ruleId":"832","severity":1,"message":"922","line":8,"column":10,"nodeType":"834","messageId":"835","endLine":8,"endColumn":24},{"ruleId":"832","severity":1,"message":"925","line":13,"column":5,"nodeType":"834","messageId":"835","endLine":13,"endColumn":8},{"ruleId":"832","severity":1,"message":"926","line":14,"column":5,"nodeType":"834","messageId":"835","endLine":14,"endColumn":16},{"ruleId":"832","severity":1,"message":"927","line":15,"column":5,"nodeType":"834","messageId":"835","endLine":15,"endColumn":19},{"ruleId":"832","severity":1,"message":"928","line":16,"column":5,"nodeType":"834","messageId":"835","endLine":16,"endColumn":12},{"ruleId":"832","severity":1,"message":"895","line":20,"column":37,"nodeType":"834","messageId":"835","endLine":20,"endColumn":42},{"ruleId":"832","severity":1,"message":"932","line":21,"column":9,"nodeType":"834","messageId":"835","endLine":21,"endColumn":15},{"ruleId":"832","severity":1,"message":"933","line":22,"column":9,"nodeType":"834","messageId":"835","endLine":22,"endColumn":14},{"ruleId":"832","severity":1,"message":"966","line":37,"column":12,"nodeType":"834","messageId":"835","endLine":37,"endColumn":20},{"ruleId":"832","severity":1,"message":"938","line":39,"column":12,"nodeType":"834","messageId":"835","endLine":39,"endColumn":25},{"ruleId":"832","severity":1,"message":"940","line":125,"column":11,"nodeType":"834","messageId":"835","endLine":125,"endColumn":28},{"ruleId":"828","replacedBy":"967"},{"ruleId":"830","replacedBy":"968"},{"ruleId":"832","severity":1,"message":"833","line":7,"column":3,"nodeType":"834","messageId":"835","endLine":7,"endColumn":11},{"ruleId":"832","severity":1,"message":"836","line":26,"column":11,"nodeType":"834","messageId":"835","endLine":26,"endColumn":15},{"ruleId":"832","severity":1,"message":"837","line":3,"column":10,"nodeType":"834","messageId":"835","endLine":3,"endColumn":20},{"ruleId":"832","severity":1,"message":"941","line":5,"column":5,"nodeType":"834","messageId":"835","endLine":5,"endColumn":17},{"ruleId":"832","severity":1,"message":"838","line":5,"column":61,"nodeType":"834","messageId":"835","endLine":5,"endColumn":76},{"ruleId":"832","severity":1,"message":"839","line":6,"column":5,"nodeType":"834","messageId":"835","endLine":6,"endColumn":25},{"ruleId":"832","severity":1,"message":"840","line":15,"column":9,"nodeType":"834","messageId":"835","endLine":15,"endColumn":15},{"ruleId":"832","severity":1,"message":"941","line":3,"column":10,"nodeType":"834","messageId":"835","endLine":3,"endColumn":22},{"ruleId":"832","severity":1,"message":"841","line":3,"column":24,"nodeType":"834","messageId":"835","endLine":3,"endColumn":36},{"ruleId":"832","severity":1,"message":"842","line":3,"column":52,"nodeType":"834","messageId":"835","endLine":3,"endColumn":64},{"ruleId":"832","severity":1,"message":"838","line":3,"column":66,"nodeType":"834","messageId":"835","endLine":3,"endColumn":81},{"ruleId":"832","severity":1,"message":"969","line":5,"column":8,"nodeType":"834","messageId":"835","endLine":5,"endColumn":15},{"ruleId":"832","severity":1,"message":"843","line":6,"column":10,"nodeType":"834","messageId":"835","endLine":6,"endColumn":14},{"ruleId":"832","severity":1,"message":"844","line":7,"column":9,"nodeType":"834","messageId":"835","endLine":7,"endColumn":16},{"ruleId":"832","severity":1,"message":"840","line":8,"column":9,"nodeType":"834","messageId":"835","endLine":8,"endColumn":15},{"ruleId":"832","severity":1,"message":"851","line":7,"column":8,"nodeType":"834","messageId":"835","endLine":7,"endColumn":13},{"ruleId":"845","severity":1,"message":"846","line":99,"column":21,"nodeType":"847","endLine":99,"endColumn":57},{"ruleId":"832","severity":1,"message":"848","line":1,"column":17,"nodeType":"834","messageId":"835","endLine":1,"endColumn":27},{"ruleId":"832","severity":1,"message":"849","line":4,"column":10,"nodeType":"834","messageId":"835","endLine":4,"endColumn":21},{"ruleId":"832","severity":1,"message":"850","line":62,"column":27,"nodeType":"834","messageId":"835","endLine":62,"endColumn":35},{"ruleId":"852","severity":1,"message":"853","line":41,"column":8,"nodeType":"854","endLine":41,"endColumn":10,"suggestions":"970"},{"ruleId":"832","severity":1,"message":"877","line":1,"column":27,"nodeType":"834","messageId":"835","endLine":1,"endColumn":33},{"ruleId":"832","severity":1,"message":"878","line":6,"column":10,"nodeType":"834","messageId":"835","endLine":6,"endColumn":18},{"ruleId":"832","severity":1,"message":"879","line":9,"column":8,"nodeType":"834","messageId":"835","endLine":9,"endColumn":14},{"ruleId":"832","severity":1,"message":"880","line":16,"column":5,"nodeType":"834","messageId":"835","endLine":16,"endColumn":11},{"ruleId":"832","severity":1,"message":"881","line":21,"column":5,"nodeType":"834","messageId":"835","endLine":21,"endColumn":13},{"ruleId":"832","severity":1,"message":"971","line":26,"column":5,"nodeType":"834","messageId":"835","endLine":26,"endColumn":8},{"ruleId":"832","severity":1,"message":"972","line":27,"column":5,"nodeType":"834","messageId":"835","endLine":27,"endColumn":8},{"ruleId":"832","severity":1,"message":"882","line":30,"column":9,"nodeType":"834","messageId":"835","endLine":30,"endColumn":14},{"ruleId":"832","severity":1,"message":"883","line":31,"column":9,"nodeType":"834","messageId":"835","endLine":31,"endColumn":13},{"ruleId":"832","severity":1,"message":"973","line":37,"column":12,"nodeType":"834","messageId":"835","endLine":37,"endColumn":16},{"ruleId":"832","severity":1,"message":"884","line":42,"column":12,"nodeType":"834","messageId":"835","endLine":42,"endColumn":16},{"ruleId":"832","severity":1,"message":"867","line":54,"column":11,"nodeType":"834","messageId":"835","endLine":54,"endColumn":19},{"ruleId":"852","severity":1,"message":"974","line":174,"column":8,"nodeType":"854","endLine":174,"endColumn":10,"suggestions":"975"},{"ruleId":"852","severity":1,"message":"976","line":229,"column":8,"nodeType":"854","endLine":229,"endColumn":10,"suggestions":"977"},{"ruleId":"832","severity":1,"message":"888","line":277,"column":11,"nodeType":"834","messageId":"835","endLine":277,"endColumn":19},{"ruleId":"845","severity":1,"message":"846","line":417,"column":33,"nodeType":"847","endLine":417,"endColumn":45},{"ruleId":"845","severity":1,"message":"889","line":477,"column":37,"nodeType":"847","endLine":482,"endColumn":38},{"ruleId":"832","severity":1,"message":"837","line":11,"column":8,"nodeType":"834","messageId":"835","endLine":11,"endColumn":18},{"ruleId":"852","severity":1,"message":"890","line":54,"column":6,"nodeType":"854","endLine":54,"endColumn":10,"suggestions":"978"},{"ruleId":"832","severity":1,"message":"843","line":5,"column":10,"nodeType":"834","messageId":"835","endLine":5,"endColumn":14},{"ruleId":"832","severity":1,"message":"856","line":7,"column":10,"nodeType":"834","messageId":"835","endLine":7,"endColumn":21},{"ruleId":"832","severity":1,"message":"857","line":13,"column":5,"nodeType":"834","messageId":"835","endLine":13,"endColumn":13},{"ruleId":"832","severity":1,"message":"858","line":17,"column":5,"nodeType":"834","messageId":"835","endLine":17,"endColumn":16},{"ruleId":"832","severity":1,"message":"859","line":18,"column":5,"nodeType":"834","messageId":"835","endLine":18,"endColumn":13},{"ruleId":"832","severity":1,"message":"860","line":19,"column":5,"nodeType":"834","messageId":"835","endLine":19,"endColumn":11},{"ruleId":"832","severity":1,"message":"861","line":20,"column":5,"nodeType":"834","messageId":"835","endLine":20,"endColumn":15},{"ruleId":"832","severity":1,"message":"862","line":29,"column":5,"nodeType":"834","messageId":"835","endLine":29,"endColumn":11},{"ruleId":"832","severity":1,"message":"863","line":33,"column":8,"nodeType":"834","messageId":"835","endLine":33,"endColumn":19},{"ruleId":"832","severity":1,"message":"840","line":37,"column":9,"nodeType":"834","messageId":"835","endLine":37,"endColumn":15},{"ruleId":"832","severity":1,"message":"864","line":37,"column":26,"nodeType":"834","messageId":"835","endLine":37,"endColumn":31},{"ruleId":"832","severity":1,"message":"865","line":48,"column":11,"nodeType":"834","messageId":"835","endLine":48,"endColumn":18},{"ruleId":"832","severity":1,"message":"866","line":51,"column":22,"nodeType":"834","messageId":"835","endLine":51,"endColumn":33},{"ruleId":"832","severity":1,"message":"867","line":57,"column":11,"nodeType":"834","messageId":"835","endLine":57,"endColumn":19},{"ruleId":"852","severity":1,"message":"868","line":92,"column":8,"nodeType":"854","endLine":92,"endColumn":17,"suggestions":"979"},{"ruleId":"832","severity":1,"message":"870","line":133,"column":11,"nodeType":"834","messageId":"835","endLine":133,"endColumn":34},{"ruleId":"832","severity":1,"message":"871","line":144,"column":19,"nodeType":"834","messageId":"835","endLine":144,"endColumn":37},{"ruleId":"845","severity":1,"message":"846","line":186,"column":40,"nodeType":"847","endLine":186,"endColumn":51},{"ruleId":"845","severity":1,"message":"846","line":189,"column":40,"nodeType":"847","endLine":189,"endColumn":51},{"ruleId":"832","severity":1,"message":"892","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":13},{"ruleId":"832","severity":1,"message":"893","line":7,"column":8,"nodeType":"834","messageId":"835","endLine":7,"endColumn":15},{"ruleId":"832","severity":1,"message":"894","line":11,"column":11,"nodeType":"834","messageId":"835","endLine":11,"endColumn":18},{"ruleId":"872","severity":1,"message":"873","line":30,"column":21,"nodeType":"834","messageId":"874","endLine":30,"endColumn":28},{"ruleId":"852","severity":1,"message":"875","line":30,"column":31,"nodeType":"876","endLine":30,"endColumn":33},{"ruleId":"832","severity":1,"message":"895","line":2,"column":30,"nodeType":"834","messageId":"835","endLine":2,"endColumn":35},{"ruleId":"832","severity":1,"message":"896","line":2,"column":73,"nodeType":"834","messageId":"835","endLine":2,"endColumn":80},{"ruleId":"832","severity":1,"message":"892","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":13},{"ruleId":"832","severity":1,"message":"897","line":5,"column":8,"nodeType":"834","messageId":"835","endLine":5,"endColumn":14},{"ruleId":"832","severity":1,"message":"894","line":23,"column":9,"nodeType":"834","messageId":"835","endLine":23,"endColumn":16},{"ruleId":"832","severity":1,"message":"898","line":26,"column":10,"nodeType":"834","messageId":"835","endLine":26,"endColumn":20},{"ruleId":"832","severity":1,"message":"899","line":27,"column":10,"nodeType":"834","messageId":"835","endLine":27,"endColumn":17},{"ruleId":"832","severity":1,"message":"900","line":29,"column":10,"nodeType":"834","messageId":"835","endLine":29,"endColumn":25},{"ruleId":"832","severity":1,"message":"901","line":30,"column":10,"nodeType":"834","messageId":"835","endLine":30,"endColumn":16},{"ruleId":"832","severity":1,"message":"902","line":34,"column":10,"nodeType":"834","messageId":"835","endLine":34,"endColumn":18},{"ruleId":"832","severity":1,"message":"921","line":7,"column":10,"nodeType":"834","messageId":"835","endLine":7,"endColumn":18},{"ruleId":"832","severity":1,"message":"922","line":8,"column":10,"nodeType":"834","messageId":"835","endLine":8,"endColumn":24},{"ruleId":"832","severity":1,"message":"923","line":8,"column":26,"nodeType":"834","messageId":"835","endLine":8,"endColumn":38},{"ruleId":"832","severity":1,"message":"924","line":10,"column":8,"nodeType":"834","messageId":"835","endLine":10,"endColumn":22},{"ruleId":"832","severity":1,"message":"925","line":15,"column":5,"nodeType":"834","messageId":"835","endLine":15,"endColumn":8},{"ruleId":"832","severity":1,"message":"926","line":16,"column":5,"nodeType":"834","messageId":"835","endLine":16,"endColumn":16},{"ruleId":"832","severity":1,"message":"927","line":17,"column":5,"nodeType":"834","messageId":"835","endLine":17,"endColumn":19},{"ruleId":"832","severity":1,"message":"928","line":18,"column":5,"nodeType":"834","messageId":"835","endLine":18,"endColumn":12},{"ruleId":"832","severity":1,"message":"929","line":20,"column":10,"nodeType":"834","messageId":"835","endLine":20,"endColumn":17},{"ruleId":"832","severity":1,"message":"930","line":21,"column":54,"nodeType":"834","messageId":"835","endLine":21,"endColumn":59},{"ruleId":"832","severity":1,"message":"931","line":21,"column":61,"nodeType":"834","messageId":"835","endLine":21,"endColumn":67},{"ruleId":"832","severity":1,"message":"932","line":22,"column":9,"nodeType":"834","messageId":"835","endLine":22,"endColumn":15},{"ruleId":"832","severity":1,"message":"933","line":23,"column":9,"nodeType":"834","messageId":"835","endLine":23,"endColumn":14},{"ruleId":"832","severity":1,"message":"934","line":24,"column":7,"nodeType":"834","messageId":"835","endLine":24,"endColumn":16},{"ruleId":"832","severity":1,"message":"980","line":35,"column":12,"nodeType":"834","messageId":"835","endLine":35,"endColumn":28},{"ruleId":"832","severity":1,"message":"912","line":39,"column":12,"nodeType":"834","messageId":"835","endLine":39,"endColumn":20},{"ruleId":"832","severity":1,"message":"935","line":43,"column":12,"nodeType":"834","messageId":"835","endLine":43,"endColumn":26},{"ruleId":"832","severity":1,"message":"936","line":43,"column":28,"nodeType":"834","messageId":"835","endLine":43,"endColumn":45},{"ruleId":"832","severity":1,"message":"937","line":44,"column":25,"nodeType":"834","messageId":"835","endLine":44,"endColumn":39},{"ruleId":"832","severity":1,"message":"907","line":82,"column":12,"nodeType":"834","messageId":"835","endLine":82,"endColumn":21},{"ruleId":"832","severity":1,"message":"908","line":82,"column":23,"nodeType":"834","messageId":"835","endLine":82,"endColumn":35},{"ruleId":"832","severity":1,"message":"914","line":84,"column":12,"nodeType":"834","messageId":"835","endLine":84,"endColumn":24},{"ruleId":"832","severity":1,"message":"938","line":86,"column":12,"nodeType":"834","messageId":"835","endLine":86,"endColumn":25},{"ruleId":"832","severity":1,"message":"939","line":88,"column":11,"nodeType":"834","messageId":"835","endLine":88,"endColumn":19},{"ruleId":"832","severity":1,"message":"940","line":116,"column":11,"nodeType":"834","messageId":"835","endLine":116,"endColumn":28},{"ruleId":"832","severity":1,"message":"861","line":5,"column":5,"nodeType":"834","messageId":"835","endLine":5,"endColumn":15},{"ruleId":"832","severity":1,"message":"981","line":6,"column":5,"nodeType":"834","messageId":"835","endLine":6,"endColumn":15},{"ruleId":"832","severity":1,"message":"982","line":7,"column":5,"nodeType":"834","messageId":"835","endLine":7,"endColumn":10},{"ruleId":"832","severity":1,"message":"941","line":9,"column":10,"nodeType":"834","messageId":"835","endLine":9,"endColumn":22},{"ruleId":"832","severity":1,"message":"932","line":16,"column":9,"nodeType":"834","messageId":"835","endLine":16,"endColumn":15},{"ruleId":"832","severity":1,"message":"907","line":25,"column":12,"nodeType":"834","messageId":"835","endLine":25,"endColumn":21},{"ruleId":"832","severity":1,"message":"908","line":25,"column":23,"nodeType":"834","messageId":"835","endLine":25,"endColumn":35},{"ruleId":"832","severity":1,"message":"983","line":27,"column":11,"nodeType":"834","messageId":"835","endLine":27,"endColumn":17},{"ruleId":"832","severity":1,"message":"903","line":18,"column":5,"nodeType":"834","messageId":"835","endLine":18,"endColumn":9},{"ruleId":"832","severity":1,"message":"904","line":19,"column":5,"nodeType":"834","messageId":"835","endLine":19,"endColumn":16},{"ruleId":"832","severity":1,"message":"905","line":20,"column":5,"nodeType":"834","messageId":"835","endLine":20,"endColumn":16},{"ruleId":"832","severity":1,"message":"863","line":26,"column":8,"nodeType":"834","messageId":"835","endLine":26,"endColumn":19},{"ruleId":"832","severity":1,"message":"857","line":34,"column":5,"nodeType":"834","messageId":"835","endLine":34,"endColumn":13},{"ruleId":"832","severity":1,"message":"906","line":35,"column":5,"nodeType":"834","messageId":"835","endLine":35,"endColumn":15},{"ruleId":"832","severity":1,"message":"858","line":38,"column":5,"nodeType":"834","messageId":"835","endLine":38,"endColumn":16},{"ruleId":"832","severity":1,"message":"859","line":39,"column":5,"nodeType":"834","messageId":"835","endLine":39,"endColumn":13},{"ruleId":"832","severity":1,"message":"861","line":41,"column":5,"nodeType":"834","messageId":"835","endLine":41,"endColumn":15},{"ruleId":"832","severity":1,"message":"982","line":45,"column":5,"nodeType":"834","messageId":"835","endLine":45,"endColumn":10},{"ruleId":"832","severity":1,"message":"907","line":67,"column":12,"nodeType":"834","messageId":"835","endLine":67,"endColumn":21},{"ruleId":"832","severity":1,"message":"908","line":67,"column":23,"nodeType":"834","messageId":"835","endLine":67,"endColumn":35},{"ruleId":"832","severity":1,"message":"909","line":68,"column":12,"nodeType":"834","messageId":"835","endLine":68,"endColumn":24},{"ruleId":"832","severity":1,"message":"910","line":68,"column":26,"nodeType":"834","messageId":"835","endLine":68,"endColumn":41},{"ruleId":"832","severity":1,"message":"911","line":71,"column":12,"nodeType":"834","messageId":"835","endLine":71,"endColumn":20},{"ruleId":"832","severity":1,"message":"912","line":74,"column":12,"nodeType":"834","messageId":"835","endLine":74,"endColumn":20},{"ruleId":"832","severity":1,"message":"913","line":77,"column":12,"nodeType":"834","messageId":"835","endLine":77,"endColumn":21},{"ruleId":"832","severity":1,"message":"914","line":78,"column":12,"nodeType":"834","messageId":"835","endLine":78,"endColumn":24},{"ruleId":"832","severity":1,"message":"915","line":80,"column":12,"nodeType":"834","messageId":"835","endLine":80,"endColumn":16},{"ruleId":"832","severity":1,"message":"867","line":112,"column":11,"nodeType":"834","messageId":"835","endLine":112,"endColumn":19},{"ruleId":"832","severity":1,"message":"850","line":200,"column":19,"nodeType":"834","messageId":"835","endLine":200,"endColumn":27},{"ruleId":"832","severity":1,"message":"916","line":235,"column":19,"nodeType":"834","messageId":"835","endLine":235,"endColumn":29},{"ruleId":"832","severity":1,"message":"917","line":252,"column":11,"nodeType":"834","messageId":"835","endLine":252,"endColumn":27},{"ruleId":"832","severity":1,"message":"918","line":257,"column":17,"nodeType":"834","messageId":"835","endLine":257,"endColumn":20},{"ruleId":"832","severity":1,"message":"916","line":258,"column":19,"nodeType":"834","messageId":"835","endLine":258,"endColumn":29},{"ruleId":"832","severity":1,"message":"984","line":274,"column":11,"nodeType":"834","messageId":"835","endLine":274,"endColumn":28},{"ruleId":"852","severity":1,"message":"919","line":314,"column":8,"nodeType":"854","endLine":314,"endColumn":10,"suggestions":"985"},{"ruleId":"832","severity":1,"message":"921","line":4,"column":10,"nodeType":"834","messageId":"835","endLine":4,"endColumn":18},{"ruleId":"832","severity":1,"message":"942","line":8,"column":8,"nodeType":"834","messageId":"835","endLine":8,"endColumn":22},{"ruleId":"832","severity":1,"message":"896","line":13,"column":54,"nodeType":"834","messageId":"835","endLine":13,"endColumn":61},{"ruleId":"832","severity":1,"message":"903","line":23,"column":5,"nodeType":"834","messageId":"835","endLine":23,"endColumn":9},{"ruleId":"832","severity":1,"message":"904","line":24,"column":5,"nodeType":"834","messageId":"835","endLine":24,"endColumn":16},{"ruleId":"832","severity":1,"message":"905","line":25,"column":5,"nodeType":"834","messageId":"835","endLine":25,"endColumn":16},{"ruleId":"832","severity":1,"message":"986","line":40,"column":12,"nodeType":"834","messageId":"835","endLine":40,"endColumn":18},{"ruleId":"832","severity":1,"message":"987","line":40,"column":20,"nodeType":"834","messageId":"835","endLine":40,"endColumn":29},{"ruleId":"832","severity":1,"message":"907","line":50,"column":12,"nodeType":"834","messageId":"835","endLine":50,"endColumn":21},{"ruleId":"832","severity":1,"message":"908","line":50,"column":23,"nodeType":"834","messageId":"835","endLine":50,"endColumn":35},{"ruleId":"832","severity":1,"message":"909","line":51,"column":12,"nodeType":"834","messageId":"835","endLine":51,"endColumn":24},{"ruleId":"832","severity":1,"message":"910","line":51,"column":26,"nodeType":"834","messageId":"835","endLine":51,"endColumn":41},{"ruleId":"832","severity":1,"message":"913","line":54,"column":12,"nodeType":"834","messageId":"835","endLine":54,"endColumn":21},{"ruleId":"832","severity":1,"message":"952","line":55,"column":21,"nodeType":"834","messageId":"835","endLine":55,"endColumn":31},{"ruleId":"832","severity":1,"message":"944","line":57,"column":12,"nodeType":"834","messageId":"835","endLine":57,"endColumn":29},{"ruleId":"832","severity":1,"message":"988","line":58,"column":12,"nodeType":"834","messageId":"835","endLine":58,"endColumn":16},{"ruleId":"832","severity":1,"message":"983","line":60,"column":11,"nodeType":"834","messageId":"835","endLine":60,"endColumn":17},{"ruleId":"832","severity":1,"message":"867","line":71,"column":11,"nodeType":"834","messageId":"835","endLine":71,"endColumn":19},{"ruleId":"832","severity":1,"message":"850","line":129,"column":19,"nodeType":"834","messageId":"835","endLine":129,"endColumn":27},{"ruleId":"832","severity":1,"message":"989","line":201,"column":11,"nodeType":"834","messageId":"835","endLine":201,"endColumn":21},{"ruleId":"852","severity":1,"message":"945","line":225,"column":8,"nodeType":"854","endLine":225,"endColumn":10,"suggestions":"990"},{"ruleId":"832","severity":1,"message":"921","line":7,"column":10,"nodeType":"834","messageId":"835","endLine":7,"endColumn":18},{"ruleId":"832","severity":1,"message":"922","line":8,"column":10,"nodeType":"834","messageId":"835","endLine":8,"endColumn":24},{"ruleId":"832","severity":1,"message":"925","line":13,"column":5,"nodeType":"834","messageId":"835","endLine":13,"endColumn":8},{"ruleId":"832","severity":1,"message":"926","line":14,"column":5,"nodeType":"834","messageId":"835","endLine":14,"endColumn":16},{"ruleId":"832","severity":1,"message":"927","line":15,"column":5,"nodeType":"834","messageId":"835","endLine":15,"endColumn":19},{"ruleId":"832","severity":1,"message":"928","line":16,"column":5,"nodeType":"834","messageId":"835","endLine":16,"endColumn":12},{"ruleId":"832","severity":1,"message":"895","line":20,"column":37,"nodeType":"834","messageId":"835","endLine":20,"endColumn":42},{"ruleId":"832","severity":1,"message":"932","line":21,"column":9,"nodeType":"834","messageId":"835","endLine":21,"endColumn":15},{"ruleId":"832","severity":1,"message":"933","line":22,"column":9,"nodeType":"834","messageId":"835","endLine":22,"endColumn":14},{"ruleId":"832","severity":1,"message":"966","line":37,"column":12,"nodeType":"834","messageId":"835","endLine":37,"endColumn":20},{"ruleId":"832","severity":1,"message":"938","line":39,"column":12,"nodeType":"834","messageId":"835","endLine":39,"endColumn":25},{"ruleId":"832","severity":1,"message":"940","line":125,"column":11,"nodeType":"834","messageId":"835","endLine":125,"endColumn":28},{"ruleId":"832","severity":1,"message":"921","line":4,"column":10,"nodeType":"834","messageId":"835","endLine":4,"endColumn":18},{"ruleId":"832","severity":1,"message":"897","line":6,"column":8,"nodeType":"834","messageId":"835","endLine":6,"endColumn":14},{"ruleId":"832","severity":1,"message":"942","line":11,"column":8,"nodeType":"834","messageId":"835","endLine":11,"endColumn":22},{"ruleId":"832","severity":1,"message":"947","line":22,"column":29,"nodeType":"834","messageId":"835","endLine":22,"endColumn":47},{"ruleId":"832","severity":1,"message":"948","line":23,"column":12,"nodeType":"834","messageId":"835","endLine":23,"endColumn":27},{"ruleId":"832","severity":1,"message":"898","line":25,"column":12,"nodeType":"834","messageId":"835","endLine":25,"endColumn":22},{"ruleId":"832","severity":1,"message":"949","line":114,"column":11,"nodeType":"834","messageId":"835","endLine":114,"endColumn":25},{"ruleId":"832","severity":1,"message":"892","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":13},{"ruleId":"832","severity":1,"message":"921","line":4,"column":10,"nodeType":"834","messageId":"835","endLine":4,"endColumn":18},{"ruleId":"832","severity":1,"message":"897","line":6,"column":8,"nodeType":"834","messageId":"835","endLine":6,"endColumn":14},{"ruleId":"832","severity":1,"message":"958","line":8,"column":18,"nodeType":"834","messageId":"835","endLine":8,"endColumn":22},{"ruleId":"832","severity":1,"message":"959","line":10,"column":8,"nodeType":"834","messageId":"835","endLine":10,"endColumn":22},{"ruleId":"832","severity":1,"message":"942","line":11,"column":8,"nodeType":"834","messageId":"835","endLine":11,"endColumn":22},{"ruleId":"832","severity":1,"message":"932","line":17,"column":9,"nodeType":"834","messageId":"835","endLine":17,"endColumn":15},{"ruleId":"832","severity":1,"message":"894","line":22,"column":11,"nodeType":"834","messageId":"835","endLine":22,"endColumn":18},{"ruleId":"832","severity":1,"message":"948","line":26,"column":12,"nodeType":"834","messageId":"835","endLine":26,"endColumn":27},{"ruleId":"832","severity":1,"message":"960","line":26,"column":29,"nodeType":"834","messageId":"835","endLine":26,"endColumn":47},{"ruleId":"832","severity":1,"message":"961","line":27,"column":12,"nodeType":"834","messageId":"835","endLine":27,"endColumn":22},{"ruleId":"832","severity":1,"message":"962","line":27,"column":24,"nodeType":"834","messageId":"835","endLine":27,"endColumn":37},{"ruleId":"832","severity":1,"message":"898","line":28,"column":12,"nodeType":"834","messageId":"835","endLine":28,"endColumn":22},{"ruleId":"832","severity":1,"message":"963","line":28,"column":24,"nodeType":"834","messageId":"835","endLine":28,"endColumn":37},{"ruleId":"852","severity":1,"message":"964","line":55,"column":8,"nodeType":"854","endLine":55,"endColumn":10,"suggestions":"991"},{"ruleId":"832","severity":1,"message":"921","line":7,"column":10,"nodeType":"834","messageId":"835","endLine":7,"endColumn":18},{"ruleId":"832","severity":1,"message":"922","line":8,"column":10,"nodeType":"834","messageId":"835","endLine":8,"endColumn":24},{"ruleId":"832","severity":1,"message":"925","line":13,"column":5,"nodeType":"834","messageId":"835","endLine":13,"endColumn":8},{"ruleId":"832","severity":1,"message":"926","line":14,"column":5,"nodeType":"834","messageId":"835","endLine":14,"endColumn":16},{"ruleId":"832","severity":1,"message":"927","line":15,"column":5,"nodeType":"834","messageId":"835","endLine":15,"endColumn":19},{"ruleId":"832","severity":1,"message":"928","line":16,"column":5,"nodeType":"834","messageId":"835","endLine":16,"endColumn":12},{"ruleId":"832","severity":1,"message":"895","line":20,"column":37,"nodeType":"834","messageId":"835","endLine":20,"endColumn":42},{"ruleId":"832","severity":1,"message":"932","line":21,"column":9,"nodeType":"834","messageId":"835","endLine":21,"endColumn":15},{"ruleId":"832","severity":1,"message":"933","line":22,"column":9,"nodeType":"834","messageId":"835","endLine":22,"endColumn":14},{"ruleId":"832","severity":1,"message":"966","line":37,"column":12,"nodeType":"834","messageId":"835","endLine":37,"endColumn":20},{"ruleId":"832","severity":1,"message":"938","line":39,"column":12,"nodeType":"834","messageId":"835","endLine":39,"endColumn":25},{"ruleId":"832","severity":1,"message":"940","line":125,"column":11,"nodeType":"834","messageId":"835","endLine":125,"endColumn":28},{"ruleId":"832","severity":1,"message":"950","line":1,"column":17,"nodeType":"834","messageId":"835","endLine":1,"endColumn":26},{"ruleId":"832","severity":1,"message":"892","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":13},{"ruleId":"832","severity":1,"message":"951","line":9,"column":20,"nodeType":"834","messageId":"835","endLine":9,"endColumn":31},{"ruleId":"832","severity":1,"message":"952","line":10,"column":19,"nodeType":"834","messageId":"835","endLine":10,"endColumn":29},{"ruleId":"832","severity":1,"message":"894","line":13,"column":9,"nodeType":"834","messageId":"835","endLine":13,"endColumn":16},{"ruleId":"832","severity":1,"message":"955","line":4,"column":8,"nodeType":"834","messageId":"835","endLine":4,"endColumn":15},{"ruleId":"832","severity":1,"message":"953","line":2,"column":41,"nodeType":"834","messageId":"835","endLine":2,"endColumn":56},{"ruleId":"832","severity":1,"message":"954","line":3,"column":10,"nodeType":"834","messageId":"835","endLine":3,"endColumn":22},{"ruleId":"832","severity":1,"message":"956","line":1,"column":8,"nodeType":"834","messageId":"835","endLine":1,"endColumn":16},{"ruleId":"832","severity":1,"message":"893","line":2,"column":8,"nodeType":"834","messageId":"835","endLine":2,"endColumn":15},{"ruleId":"832","severity":1,"message":"957","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":15},{"ruleId":"832","severity":1,"message":"956","line":1,"column":8,"nodeType":"834","messageId":"835","endLine":1,"endColumn":16},{"ruleId":"832","severity":1,"message":"893","line":2,"column":8,"nodeType":"834","messageId":"835","endLine":2,"endColumn":15},{"ruleId":"832","severity":1,"message":"894","line":4,"column":7,"nodeType":"834","messageId":"835","endLine":4,"endColumn":14},{"ruleId":"832","severity":1,"message":"956","line":1,"column":8,"nodeType":"834","messageId":"835","endLine":1,"endColumn":16},{"ruleId":"832","severity":1,"message":"957","line":3,"column":8,"nodeType":"834","messageId":"835","endLine":3,"endColumn":15},{"ruleId":"832","severity":1,"message":"894","line":3,"column":7,"nodeType":"834","messageId":"835","endLine":3,"endColumn":14},{"ruleId":"832","severity":1,"message":"894","line":2,"column":7,"nodeType":"834","messageId":"835","endLine":2,"endColumn":14},"no-native-reassign",["992"],"no-negated-in-lhs",["993"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'Breadcrumb' is defined but never used.","'UserAddOutlined' is defined but never used.","'NotificationOutlined' is defined but never used.","'Header' is assigned a value but never used.","'BookOutlined' is defined but never used.","'TeamOutlined' is defined but never used.","'Link' is defined but never used.","'SubMenu' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useContext' is defined but never used.","'AuthContext' is defined but never used.","'response' is assigned a value but never used.","'Stats' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'imageListRef'. Either include it or remove the dependency array.","ArrayExpression",["994"],"'FaArrowLeft' is defined but never used.","'Cascader' is defined but never used.","'InputNumber' is defined but never used.","'Mentions' is defined but never used.","'Select' is defined but never used.","'TreeSelect' is defined but never used.","'Switch' is defined but never used.","'getUrlImage' is defined but never used.","'Sider' is assigned a value but never used.","'history' is assigned a value but never used.","'setEllipsis' is assigned a value but never used.","'handleOk' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'category'. Either include it or remove the dependency array.",["995"],"'handleUpdateTransaction' is assigned a value but never used.","'activeTransactions' is assigned a value but never used.","no-const-assign","'keyword' is constant.","const","Assignments to the 'keyword' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'useRef' is defined but never used.","'FaSearch' is defined but never used.","'Navbar' is defined but never used.","'Avatar' is defined but never used.","'Skeleton' is defined but never used.","'Panel' is assigned a value but never used.","'Text' is assigned a value but never used.","'list' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'user.user._id' and 'user.user.isAdmin'. Either include them or remove the dependency array.",["996"],["997"],"'onChange' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'API_URL'. Either include it or remove the dependency array.",["998"],"'axios' is defined but never used.","'BookApi' is defined but never used.","'API_URL' is assigned a value but never used.","'Table' is defined but never used.","'message' is defined but never used.","'moment' is defined but never used.","'borrowerId' is assigned a value but never used.","'bookIds' is assigned a value but never used.","'transactionType' is assigned a value but never used.","'toDate' is assigned a value but never used.","'fromDate' is assigned a value but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'CardActions' is defined but never used.","'DatePicker' is defined but never used.","'openModal' is assigned a value but never used.","'setOpenModal' is assigned a value but never used.","'activeBookID' is assigned a value but never used.","'setActiveBookID' is assigned a value but never used.","'bookName' is assigned a value but never used.","'language' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'categoryName' is assigned a value but never used.","'book' is assigned a value but never used.","'deletebook' is assigned a value but never used.","'handledeleteBook' is assigned a value but never used.","'xoa' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchBooks'. Either include it or remove the dependency array.",["999"],"'Dropdown' is defined but never used.","'UploadOutlined' is defined but never used.","'PlusOutlined' is defined but never used.","'bookController' is defined but never used.","'ref' is defined but never used.","'uploadBytes' is defined but never used.","'getDownloadURL' is defined but never used.","'listAll' is defined but never used.","'storage' is defined but never used.","'Modal' is defined but never used.","'Upload' is defined but never used.","'Option' is assigned a value but never used.","'Title' is assigned a value but never used.","'getBase64' is assigned a value but never used.","'alternateTitle' is assigned a value but never used.","'setAlternateTitle' is assigned a value but never used.","'setImageUpload' is assigned a value but never used.","'selectedImage' is assigned a value but never used.","'onFinish' is assigned a value but never used.","'handleImageUpload' is assigned a value but never used.","'UserOutlined' is defined but never used.","'BookController' is defined but never used.","'Typography' is defined but never used.","'isModalOpenDelete' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'memberDetails._id'. Either include it or remove the dependency array.",["1000"],"'setAllTransactions' is assigned a value but never used.","'ExecutionStatus' is assigned a value but never used.","'convertToIssue' is assigned a value but never used.","'useEffect' is defined but never used.","'setListbook' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'listItemClasses' is defined but never used.","'NavigateNext' is defined but never used.","'logoImg' is defined but never used.","'TransApi' is defined but never used.","'UserApi' is defined but never used.","'Form' is defined but never used.","'UserController' is defined but never used.","'setExecutionStatus' is assigned a value but never used.","'allMembers' is assigned a value but never used.","'setAllMembers' is assigned a value but never used.","'setBorrowerId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user.user._id'. Either include it or remove the dependency array.",["1001"],"'userType' is assigned a value but never used.",["992"],["993"],"'Profile' is defined but never used.",["1002"],"'Row' is defined but never used.","'Col' is defined but never used.","'form' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'countNotify', 'user._id', and 'user.isAdmin'. Either include them or remove the dependency array.",["1003"],"React Hook useEffect has missing dependencies: 'user._id' and 'user.isAdmin'. Either include them or remove the dependency array.",["1004"],["1005"],["1006"],"'recentAddedBooks' is assigned a value but never used.","'Popconfirm' is defined but never used.","'Image' is defined but never used.","'socket' is assigned a value but never used.","'handleBorrowClick' is assigned a value but never used.",["1007"],"'member' is assigned a value but never used.","'setMember' is assigned a value but never used.","'file' is assigned a value but never used.","'fetchBooks' is assigned a value but never used.",["1008"],["1009"],"no-global-assign","no-unsafe-negation",{"desc":"1010","fix":"1011"},{"desc":"1012","fix":"1013"},{"desc":"1014","fix":"1015"},{"desc":"1014","fix":"1016"},{"desc":"1017","fix":"1018"},{"desc":"1019","fix":"1020"},{"desc":"1021","fix":"1022"},{"desc":"1023","fix":"1024"},{"desc":"1010","fix":"1025"},{"desc":"1026","fix":"1027"},{"desc":"1028","fix":"1029"},{"desc":"1017","fix":"1030"},{"desc":"1012","fix":"1031"},{"desc":"1019","fix":"1032"},{"desc":"1021","fix":"1033"},{"desc":"1023","fix":"1034"},"Update the dependencies array to be: [imageListRef]",{"range":"1035","text":"1036"},"Update the dependencies array to be: [API_URL, category]",{"range":"1037","text":"1038"},"Update the dependencies array to be: [user.user._id, user.user.isAdmin]",{"range":"1039","text":"1040"},{"range":"1041","text":"1040"},"Update the dependencies array to be: [API_URL, id]",{"range":"1042","text":"1043"},"Update the dependencies array to be: [fetchBooks]",{"range":"1044","text":"1045"},"Update the dependencies array to be: [memberDetails._id]",{"range":"1046","text":"1047"},"Update the dependencies array to be: [user.user._id]",{"range":"1048","text":"1049"},{"range":"1050","text":"1036"},"Update the dependencies array to be: [countNotify, user._id, user.isAdmin]",{"range":"1051","text":"1052"},"Update the dependencies array to be: [user._id, user.isAdmin]",{"range":"1053","text":"1054"},{"range":"1055","text":"1043"},{"range":"1056","text":"1038"},{"range":"1057","text":"1045"},{"range":"1058","text":"1047"},{"range":"1059","text":"1049"},[1203,1205],"[imageListRef]",[2582,2591],"[API_URL, category]",[2596,2598],"[user.user._id, user.user.isAdmin]",[3891,3893],[1709,1713],"[API_URL, id]",[10980,10982],"[fetchBooks]",[2824,2826],"[memberDetails._id]",[2616,2618],"[user.user._id]",[1203,1205],[6415,6417],"[countNotify, user._id, user.isAdmin]",[8528,8530],"[user._id, user.isAdmin]",[1709,1713],[2662,2671],[11518,11520],[8933,8935],[2616,2618]]