{"ast":null,"code":"import TransApi from \"../callAPI/trans.js\";\nimport BookApi from \"../callAPI/BookApi.js\";\nimport UserApi from \"../callAPI/user.js\";\nconst TransController = {\n  getAllTrans: async () => {\n    try {\n      // Lấy tất cả các giao dịch\n      const allTransactions = await TransApi.getAllTrans();\n      console.log(\"thanh1e\", allTransactions);\n\n      // Tạo một mảng các promise để thực hiện các cuộc gọi không đồng bộ một cách song song\n      const promises = allTransactions.map(async transaction => {\n        // Kiểm tra xem transaction có tồn tại không\n        if (!transaction) {\n          console.warn(\"Transaction is null or undefined\");\n          return null;\n        }\n        const userId = transaction.borrowerId;\n        const bookId = transaction.books;\n\n        // Kiểm tra xem userId và bookIds có tồn tại không\n        if (!userId || !bookId || bookId.length === 0) {\n          console.warn(`Transaction ${transaction._id} is missing userId or bookIds`);\n          return null; // Trả về null nếu dữ liệu không đủ để xử lý\n        }\n\n        try {\n          // Lấy thông tin của user dựa trên userId\n          const user = await UserApi.getUserbyID(userId);\n\n          // Lấy thông tin của các sách dựa trên các bookId\n          const bookPromises = BookApi.getBookbyID(bookId);\n          const books = await Promise.all(bookPromises);\n\n          // Xử lý ngày\n          const toDate = new Date(transaction.toDate).toLocaleDateString('en-GB');\n          const fromDate = new Date(transaction.fromDate).toLocaleDateString('en-GB');\n          const currentDate = new Date();\n          let differenceInDays = 0;\n\n          // Tính toán số ngày chênh lệch giữa hai ngày\n          if (transaction.transactionStatus === \"True\") {\n            const toDateObj = new Date(transaction.toDate);\n            differenceInDays = Math.ceil((currentDate - toDateObj) / (1000 * 60 * 60 * 24));\n          } else if (transaction.transactionStatus === \"False\") {\n            const returnDateObj = new Date(transaction.returnDate);\n            const toDateObj = new Date(transaction.toDate);\n            differenceInDays = Math.ceil((returnDateObj - toDateObj) / (1000 * 60 * 60 * 24));\n            if (differenceInDays < 0) {\n              differenceInDays = 0;\n            }\n          }\n\n          // Trả về thông tin user và sách cho giao dịch này\n          return {\n            userName: user.userFullName,\n            books: books.bookName,\n            _id: transaction._id,\n            fromDate: fromDate,\n            toDate: toDate,\n            returnDate: transaction.returnDate,\n            createdAt: transaction.createdAt,\n            transactionStatus: transaction.transactionStatus,\n            overdue: differenceInDays\n          };\n        } catch (error) {\n          console.error(`Error processing transaction ${transaction._id}:`, error);\n          return null; // Trả về null nếu có lỗi xảy ra trong quá trình xử lý\n        }\n      });\n\n      // Chờ cho tất cả các promise hoàn thành và loại bỏ các phần tử null\n      const transactionDetails = await Promise.all(promises);\n      console.log(\"thanh1fdge\", transactionDetails);\n      return transactionDetails.filter(transaction => transaction !== null);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      throw error; // Throw lỗi để xử lý ở phía gọi hàm nếu cần\n    }\n  },\n\n  getTransByUser: async UserId => {\n    try {\n      // Lấy tất cả các giao dịch\n      const allTransactions = await TransApi.getTransbyUser(UserId);\n      console.log(\"thanh1e\", allTransactions);\n      // Tạo một mảng các promise để thực hiện các cuộc gọi không đồng bộ một cách song song\n      const promises = allTransactions.map(async transaction => {\n        const userId = transaction.borrowerId;\n        const bookId = transaction.books;\n        // Kiểm tra xem userId và bookIds có tồn tại không\n        if (!userId || !bookId || bookId.length === 0) {\n          console.warn(`Transaction ${transaction._id} is missing userId or bookIds`);\n          return null; // Trả về null nếu dữ liệu không đủ để xử lý\n        }\n\n        // Lấy thông tin của user dựa trên userId\n        const userPromise = UserApi.getUserbyID(userId);\n\n        // // Lấy thông tin của các sách dựa trên các bookId\n        const bookPromises = BookApi.getBookbyID(bookId);\n\n        // Chờ cho tất cả các cuộc gọi không đồng bộ hoàn thành\n        const user = await userPromise;\n        const book = await bookPromises;\n        // console.log(\"hoo\", book)\n        // Trả về thông tin user và sách cho giao dịch này\n        const toDate = new Date(transaction.toDate).toLocaleDateString('en-GB');\n        const fromday = new Date(transaction.fromDate).toLocaleDateString('en-GB');\n        return {\n          userName: user.userFullName,\n          books: book.bookName,\n          _id: transaction._id,\n          fromDate: fromday,\n          toDate: toDate,\n          returnDate: transaction.returnDate,\n          createdAt: transaction.createdAt,\n          transactionStatus: transaction.transactionStatus\n        };\n      });\n\n      // Chờ cho tất cả các promise hoàn thành và loại bỏ các phần tử null\n      const transactionDetails = await Promise.all(promises);\n      console.log(\"thanh1fdge\", transactionDetails);\n\n      // return transactionDetails.filter(transaction => transaction !== null);\n      return transactionDetails;\n    } catch (error) {\n      console.error(\"Error:\", error);\n      throw error; // Throw lỗi để xử lý ở phía gọi hàm nếu cần\n    }\n  },\n\n  addTransaction: async transactionData => {\n    try {\n      const addedTransaction = await TransApi.addTrans(transactionData);\n      return addedTransaction;\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n      throw error;\n    }\n  },\n  updateTransaction: async (transactionId, data) => {\n    try {\n      const updatedTransaction = await TransApi.updateTrans(transactionId, data);\n      return updatedTransaction;\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n      throw error;\n    }\n  }\n  // Các hàm controller khác có thể được thêm ở đây\n};\n\nexport default TransController;","map":{"version":3,"names":["TransApi","BookApi","UserApi","TransController","getAllTrans","allTransactions","console","log","promises","map","transaction","warn","userId","borrowerId","bookId","books","length","_id","user","getUserbyID","bookPromises","getBookbyID","Promise","all","toDate","Date","toLocaleDateString","fromDate","currentDate","differenceInDays","transactionStatus","toDateObj","Math","ceil","returnDateObj","returnDate","userName","userFullName","bookName","createdAt","overdue","error","transactionDetails","filter","getTransByUser","UserId","getTransbyUser","userPromise","book","fromday","addTransaction","transactionData","addedTransaction","addTrans","updateTransaction","transactionId","data","updatedTransaction","updateTrans"],"sources":["C:/Users/Thanh/Desktop/code/hệ thống phân tán/web-thu-vien-mern-stack-main/front-end/src/Controller/TransactionController.js"],"sourcesContent":["import TransApi from \"../callAPI/trans.js\"\r\nimport BookApi from \"../callAPI/BookApi.js\";\r\nimport UserApi from \"../callAPI/user.js\";\r\nconst TransController = {\r\n    getAllTrans: async () => {\r\n        try {\r\n            // Lấy tất cả các giao dịch\r\n            const allTransactions = await TransApi.getAllTrans();\r\n            console.log(\"thanh1e\", allTransactions)\r\n\r\n            // Tạo một mảng các promise để thực hiện các cuộc gọi không đồng bộ một cách song song\r\n            const promises = allTransactions.map(async transaction => {\r\n                // Kiểm tra xem transaction có tồn tại không\r\n                if (!transaction) {\r\n                    console.warn(\"Transaction is null or undefined\");\r\n                    return null;\r\n                }\r\n\r\n                const userId = transaction.borrowerId;\r\n                const bookId = transaction.books;\r\n\r\n                // Kiểm tra xem userId và bookIds có tồn tại không\r\n                if (!userId || !bookId || bookId.length === 0) {\r\n                    console.warn(`Transaction ${transaction._id} is missing userId or bookIds`);\r\n                    return null; // Trả về null nếu dữ liệu không đủ để xử lý\r\n                }\r\n\r\n                try {\r\n                    // Lấy thông tin của user dựa trên userId\r\n                    const user = await UserApi.getUserbyID(userId);\r\n\r\n                    // Lấy thông tin của các sách dựa trên các bookId\r\n                    const bookPromises = BookApi.getBookbyID(bookId);\r\n                    const books = await Promise.all(bookPromises);\r\n\r\n                    // Xử lý ngày\r\n                    const toDate = new Date(transaction.toDate).toLocaleDateString('en-GB');\r\n                    const fromDate = new Date(transaction.fromDate).toLocaleDateString('en-GB');\r\n                    const currentDate = new Date();\r\n                    let differenceInDays = 0;\r\n\r\n                    // Tính toán số ngày chênh lệch giữa hai ngày\r\n                    if (transaction.transactionStatus === \"True\") {\r\n                        const toDateObj = new Date(transaction.toDate);\r\n                        differenceInDays = Math.ceil((currentDate - toDateObj) / (1000 * 60 * 60 * 24));\r\n                    } else if (transaction.transactionStatus === \"False\") {\r\n                        const returnDateObj = new Date(transaction.returnDate);\r\n                        const toDateObj = new Date(transaction.toDate);\r\n                        differenceInDays = Math.ceil((returnDateObj - toDateObj) / (1000 * 60 * 60 * 24));\r\n                        if (differenceInDays < 0) {\r\n                            differenceInDays = 0;\r\n                        }\r\n                    }\r\n\r\n                    // Trả về thông tin user và sách cho giao dịch này\r\n                    return {\r\n                        userName: user.userFullName,\r\n                        books: books.bookName,\r\n                        _id: transaction._id,\r\n                        fromDate: fromDate,\r\n                        toDate: toDate,\r\n                        returnDate: transaction.returnDate,\r\n                        createdAt: transaction.createdAt,\r\n                        transactionStatus: transaction.transactionStatus,\r\n                        overdue: differenceInDays\r\n                    };\r\n                } catch (error) {\r\n                    console.error(`Error processing transaction ${transaction._id}:`, error);\r\n                    return null; // Trả về null nếu có lỗi xảy ra trong quá trình xử lý\r\n                }\r\n            });\r\n\r\n            // Chờ cho tất cả các promise hoàn thành và loại bỏ các phần tử null\r\n            const transactionDetails = await Promise.all(promises);\r\n            console.log(\"thanh1fdge\", transactionDetails)\r\n\r\n            return transactionDetails.filter(transaction => transaction !== null);\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n            throw error; // Throw lỗi để xử lý ở phía gọi hàm nếu cần\r\n        }\r\n    }\r\n    ,\r\n    getTransByUser: async (UserId) => {\r\n        try {\r\n            // Lấy tất cả các giao dịch\r\n            const allTransactions = await TransApi.getTransbyUser(UserId);\r\n            console.log(\"thanh1e\", allTransactions)\r\n            // Tạo một mảng các promise để thực hiện các cuộc gọi không đồng bộ một cách song song\r\n            const promises = allTransactions.map(async transaction => {\r\n                const userId = transaction.borrowerId;\r\n                const bookId = transaction.books;\r\n                // Kiểm tra xem userId và bookIds có tồn tại không\r\n                if (!userId || !bookId || bookId.length === 0) {\r\n                    console.warn(`Transaction ${transaction._id} is missing userId or bookIds`);\r\n                    return null; // Trả về null nếu dữ liệu không đủ để xử lý\r\n                }\r\n\r\n                // Lấy thông tin của user dựa trên userId\r\n                const userPromise = UserApi.getUserbyID(userId);\r\n\r\n                // // Lấy thông tin của các sách dựa trên các bookId\r\n                const bookPromises = BookApi.getBookbyID(bookId);\r\n\r\n                // Chờ cho tất cả các cuộc gọi không đồng bộ hoàn thành\r\n                const user = await userPromise;\r\n                const book = await bookPromises;\r\n                // console.log(\"hoo\", book)\r\n                // Trả về thông tin user và sách cho giao dịch này\r\n                const toDate = new Date(transaction.toDate).toLocaleDateString('en-GB');\r\n                const fromday = new Date(transaction.fromDate).toLocaleDateString('en-GB');\r\n\r\n                return {\r\n                    userName: user.userFullName,\r\n                    books: book.bookName,\r\n                    _id: transaction._id,\r\n                    fromDate: fromday,\r\n                    toDate: toDate,\r\n                    returnDate: transaction.returnDate,\r\n                    createdAt: transaction.createdAt,\r\n                    transactionStatus: transaction.transactionStatus\r\n                };\r\n            });\r\n\r\n            // Chờ cho tất cả các promise hoàn thành và loại bỏ các phần tử null\r\n            const transactionDetails = await Promise.all(promises);\r\n            console.log(\"thanh1fdge\", transactionDetails)\r\n\r\n            // return transactionDetails.filter(transaction => transaction !== null);\r\n            return transactionDetails\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n            throw error; // Throw lỗi để xử lý ở phía gọi hàm nếu cần\r\n        }\r\n    },\r\n    addTransaction: async (transactionData) => {\r\n        try {\r\n            const addedTransaction = await TransApi.addTrans(transactionData);\r\n            return addedTransaction;\r\n        } catch (error) {\r\n            console.error('Error adding transaction:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    updateTransaction: async (transactionId, data) => {\r\n        try {\r\n            const updatedTransaction = await TransApi.updateTrans(transactionId, data);\r\n            return updatedTransaction;\r\n        } catch (error) {\r\n            console.error('Error updating transaction:', error);\r\n            throw error;\r\n        }\r\n    }\r\n    // Các hàm controller khác có thể được thêm ở đây\r\n};\r\nexport default TransController;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}