{"ast":null,"code":"// import React, { useContext, useEffect, useState } from 'react'\n// import '../AdminDashboard.css'\n// import axios from 'axios'\n// import { AuthContext } from '../../../../Context/AuthContext'\n// import { Dropdown } from 'semantic-ui-react'\n// import DatePicker from 'react-datepicker'\n// import 'react-datepicker/dist/react-datepicker.css'\n// import moment from 'moment'\n// import Loading from \"../../../../Components/Loader/Loader\";\n\n// function AddTransaction() {\n//   const API_URL = process.env.REACT_APP_API_URL\n//   const [isLoading, setIsLoading] = useState(false)\n//   const { user } = useContext(AuthContext)\n//   const [borrowerId, setBorrowerId] = useState([])\n//   const [borrowerDetails, setBorrowerDetails] = useState([])\n//   const [bookId, setBookId] = useState(\"\")\n//   const [recentTransactions, setRecentTransactions] = useState([])\n//   const [allMembers, setAllMembers] = useState([])\n//   const [allBooks, setAllBooks] = useState([])\n\n//   const [fromDate, setFromDate] = useState(null)\n//   const [fromDateString, setFromDateString] = useState(null)\n\n//   const [toDate, setToDate] = useState(null)\n//   const [toDateString, setToDateString] = useState(null)\n\n//   const [bookIds, setBookIds] = useState([]);\n\n//   // H√†m x·ª≠ l√Ω khi c√≥ s·ª± thay ƒë·ªïi trong vi·ªác ch·ªçn s√°ch\n//   const handleBookSelection = (event, data) => {\n//     setBookIds(data.value);\n//   }\n\n//   const transactionTypes = [\n//     { value: 'Reserved', text: 'ƒê·∫∑t tr∆∞·ªõc' },\n//     { value: 'Issued', text: 'M∆∞·ª£n lu√¥n' },\n//   ]\n\n//   const [transactionType, setTransactionType] = useState('')\n\n//   /* Adding a Transaction */\n//   const addTransaction = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n\n//     if (\n//       bookIds.length > 0 &&\n//       borrowerId !== '' &&\n//       transactionType !== '' &&\n//       fromDate !== null &&\n//       toDate !== null\n//     ) {\n//       const borrower_details = await axios.get(\n//         API_URL + 'api/users/getuser/' + borrowerId\n//       );\n\n//       const Books = [];\n//       for (const id of bookIds) {\n//         const book_details = await axios.get(\n//           API_URL + 'api/books/getbook/' + id\n//         );\n\n//         if (\n//           (book_details.data.bookCountAvailable > 0 &&\n//             (transactionType === 'Issued' || transactionType === 'Reserved')) ||\n//           (book_details.data.bookCountAvailable === 0 &&\n//             transactionType === 'Reserved')\n//         ) {\n//           Books.push(id);\n//         } else {\n//           alert('Cu·ªën s√°ch ƒë√£ h·∫øt ho·∫∑c kh√¥ng th·ªÉ m∆∞·ª£n.');\n//           setIsLoading(false);\n//           return;\n//         }\n//       }\n\n//       const transactionData = {\n//         books: Books,\n//         transactionStatus: \"Active\",\n//         borrowerId: borrowerId,\n//         transactionType: transactionType,\n//         fromDate: fromDate,\n//         toDate: toDate,\n//       };\n\n//       try {\n//         const response = await axios.post(\n//           API_URL + 'api/transactions/add-transaction',\n//           transactionData\n//         );\n\n//         if (recentTransactions.length >= 5) {\n//           recentTransactions.splice(-1);\n//         }\n//         setRecentTransactions([response.data, ...recentTransactions]);\n\n//         // await axios.put(\n//         //   API_URL + `api/users/${response.data._id}/move-to-activetransactions`,\n//         //   {\n//         //     userId: borrowerId,\n//         //     isAdmin: user.isAdmin,\n//         //   }\n//         // );\n\n//         setBorrowerId('');\n//         setBookIds([]);\n//         setTransactionType('');\n//         setFromDate(null);\n//         setToDate(null);\n\n//         alert('T·∫°o phi·∫øu m∆∞·ª£n th√†nh c√¥ng üéâ');\n//       } catch (err) {\n//         console.log(err);\n//         alert('ƒê√£ x·∫£y ra l·ªói khi t·∫°o phi·∫øu m∆∞·ª£n.');\n//       }\n//     } else {\n//       alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');\n//     }\n//     setIsLoading(false);\n//   };\n\n//   //  l·∫•y danh sachs cu·ªën sach ƒë√£ ch·ªçn \n\n//   /* Fetch Transactions */\n//   useEffect(() => {\n//     const getTransactions = async () => {\n//       try {\n//         const response = await axios.get(\n//           API_URL + 'api/transactions/all-transactions',\n//         )\n//         setRecentTransactions(response.data.slice(0, 5))\n//       } catch (err) {\n//         console.log('Error in fetching transactions')\n//       }\n//     }\n//     getTransactions()\n//   }, [API_URL])\n\n//   /* Fetching borrower details */\n//   useEffect(() => {\n//     const getBorrowerDetails = async () => {\n//       try {\n//         if (borrowerId !== '') {\n//           const response = await axios.get(\n//             API_URL + 'api/users/getuser/' + borrowerId,\n//           )\n//           setBorrowerDetails(response.data)\n//           console.log(response.data);\n//         }\n//       } catch (err) {\n//         console.log('Error in getting borrower details')\n//       }\n//     }\n//     getBorrowerDetails()\n//   }, [API_URL, borrowerId])\n\n//   /* Fetching members */\n//   useEffect(() => {\n//     const getMembers = async () => {\n//       try {\n//         const response = await axios.get(API_URL + 'api/users/allmembers')\n//         const all_members = await response.data.map((member) => ({\n//           value: `${member?._id}`,\n//           text: `${member?.userType === 'Student'\n//             ? `${member?.userFullName}[${member?.admissionId}]`\n//             : `${member?.userFullName}[${member?.employeeId}]`\n//             }`,\n//         }))\n//         setAllMembers(all_members)\n//       } catch (err) {\n//         console.log(err)\n//       }\n//     }\n//     getMembers()\n//   }, [API_URL])\n\n//   const [listBook, setListbook] = useState([])\n\n//   /* Fetching books */\n//   useEffect(() => {\n//     setIsLoading(true);\n\n//     const getallBooks = async () => {\n//       const response = await axios.get(API_URL + 'api/books/allbooks')\n//       const allbooks = await response.data.map((book) => ({\n//         value: `${book._id}`,\n//         text: `${book.bookName}`,\n//       }))\n//       const listbook = response.data\n//       setListbook(listbook)\n\n//       setAllBooks(allbooks)\n\n//     }\n//     getallBooks()\n\n//     setIsLoading(false);\n\n//   }, [API_URL])\n\n//   const [currentBook, setCurrentBook] = useState([])\n\n//   useEffect(() => {\n//     if (bookId !== '') {\n//       console.log(\"kiet \", bookId)\n//       const data = listBook.filter((m) => m._id === bookId)\n//       if (data.length > 0) setCurrentBook(data)\n//     }\n//   }, [bookId, listBook])\n//   const [selectedBooks, setSelectedBooks] = useState([]);\n\n//   // X·ª≠ l√Ω s·ª± thay ƒë·ªïi trong danh s√°ch c√°c cu·ªën s√°ch ƒë√£ ch·ªçn\n//   useEffect(() => {\n//     if (listBook.length > 0) {\n//       // L·ªçc ra c√°c cu·ªën s√°ch ƒë√£ ch·ªçn t·ª´ listBook\n//       const selectedBooksData = listBook.filter(book => bookIds.includes(book._id));\n//       // C·∫≠p nh·∫≠t danh s√°ch c√°c cu·ªën s√°ch ƒë√£ ch·ªçn\n//       setSelectedBooks(selectedBooksData);\n//     }\n//   }, [bookIds, listBook]);\n\n//   if (isLoading) return <Loading />;\n\n//   return (\n//     <div>\n//       <p className=\"dashboard-option-title\">T·∫°o phi·∫øu m∆∞·ª£n s√°ch</p>\n//       <div className=\"dashboard-title-line\"></div>\n//       <form className=\"transaction-form\" onSubmit={addTransaction}>\n//         <label className=\"transaction-form-label\" htmlFor=\"borrowerId\">\n//           ƒê·ªôc gi·∫£<span className=\"required-field\">*</span>\n//         </label>\n//         <br />\n//         <div className=\"semanticdropdown\">\n//           <Dropdown\n//             placeholder=\"Ch·ªçn ƒë·ªôc gi·∫£\"\n//             fluid\n//             search\n//             selection\n//             value={borrowerId}\n//             options={allMembers}\n//             onChange={(event, data) => setBorrowerId(data.value)}\n//           />\n//         </div>\n//         {/* b·∫£ng th·ªëng k√™ m∆∞·ª£n c·ªßa ƒë·ªôc gi·∫£ */}\n//         <table\n//           className=\"admindashboard-table shortinfo-table\"\n//           style={borrowerId === '' ? { display: 'none' } : {}}\n//         >\n//           <tr>\n//             <th>ƒê·ªôc gi·∫£</th>\n//             <th>ƒê√£ m∆∞·ª£n</th>\n//             <th>ƒêang m∆∞·ª£n</th>\n//             <th>ƒêi·ªÉm</th>\n//           </tr>\n//           <tr>\n//             <td>{borrowerDetails.userFullName}</td>\n//             <td>\n//               {\n//                 borrowerDetails.activeTransactions?.filter((data) => {\n//                   return (\n//                     data.transactionType === 'Issued' &&\n//                     data.transactionStatus === 'Active'\n//                   )\n//                 }).length\n//               }\n//             </td>\n//             <td>\n//               {\n//                 borrowerDetails.activeTransactions?.filter((data) => {\n//                   return (\n//                     data.transactionType === 'Reserved' &&\n//                     data.transactionStatus === 'Active'\n//                   )\n//                 }).length\n//               }\n//             </td>\n//             <td>{borrowerDetails.points}</td>\n//           </tr>\n//         </table>\n//         <table\n//           className=\"admindashboard-table shortinfo-table\"\n//           style={borrowerId === '' ? { display: 'none' } : {}}\n//         >\n//           <tr>\n//             <th>T√™n s√°ch</th>\n//             <th>Lo·∫°i m∆∞·ª£n</th>\n//             <th>\n//               T·ª´ ng√†y\n//               <br />\n//               <span style={{ fontSize: '10px' }}>[MM/DD/YYYY]</span>\n//             </th>\n//             <th>\n//               ƒê·∫øn ng√†y\n//               <br />\n//               <span style={{ fontSize: '10px' }}>[MM/DD/YYYY]</span>\n//             </th>\n//             <th>Qu√° h·∫°n</th>\n//           </tr>\n//           {borrowerDetails.activeTransactions\n//             ?.filter((data) => {\n//               return data.transactionStatus === 'Active'\n//             })\n//             .map((data, index) => {\n//               console.log(\"kiet =>\", data);\n//               return (\n//                 <tr key={index}>\n//                   <td>{data.bookName}</td>\n//                   <td>{data.transactionType === \"Issued\" ? \"ƒêang m∆∞·ª£n\" : \"ƒêang ch·ªù x·ª≠ l√Ω\"}</td>\n//                   <td>{data.fromDate}</td>\n//                   <td>{data.toDate}</td>\n//                   <td>\n//                     {Math.floor(\n//                       (Date.parse(moment(new Date()).format('MM/DD/YYYY')) -\n//                         Date.parse(data.toDate)) /\n//                       86400000,\n//                     ) <= 0\n//                       ? 0\n//                       : Math.floor(\n//                         (Date.parse(moment(new Date()).format('MM/DD/YYYY')) -\n//                           Date.parse(data.toDate)) /\n//                         86400000,\n//                       ) * 10}\n//                   </td>\n//                 </tr>\n//               )\n//             })}\n//         </table>\n\n//         <label className=\"transaction-form-label\" htmlFor=\"bookName\">\n//           T√™n s√°ch<span className=\"required-field\">*</span>\n//         </label>\n//         <br />\n//         <div className=\"semanticdropdown\">\n//           <Dropdown\n//             placeholder=\"Ch·ªçn s√°ch\"\n//             fluid\n//             multiple             // ƒê·∫∑t thu·ªôc t√≠nh multiple th√†nh true\n//             search\n//             selection\n//             options={allBooks}\n//             value={bookIds}\n//             onChange={handleBookSelection}\n//           // placeholder=\"Ch·ªçn s√°ch\"\n//           // fluid\n//           // search\n//           // selection\n//           // options={allBooks}\n//           // value={bookId}\n//           // onChange={(event, data) => {\n//           //   setBookId(data.value);\n//           // }\n//           // }\n//           />\n//         </div>\n//         {/* <table\n//           className=\"admindashboard-table shortinfo-table\"\n//           style={bookId === '' ? { display: 'none' } : {}}\n//         >\n//           <tr>\n//             <th>·∫¢nh b√¨a</th>\n//             <th>T√™n s√°ch</th>\n//             <th>S·ªë s√°ch s·∫µn c√≥</th>\n//             <th>ƒê√£ ƒë·∫∑t tr∆∞·ªõc</th>\n//           </tr>\n\n//           {currentBook.map((data, index) => {\n//             return (\n//               <tr>\n\n//                 <td><img src={\"/imageBook/\" + data.image_url} alt=\"\" href={`/book/${data._id}`} ></img></td>\n//                 <td>{data.bookName}</td>\n//                 <td>{data.bookCountAvailable}</td>\n//                 <td>{data.transactions}</td>\n//               </tr>\n//             )\n//           })}\n//         </table> */}\n//         <table className=\"admindashboard-table shortinfo-table\">\n//           <thead>\n//             <tr>\n//               <th>·∫¢nh b√¨a</th>\n//               <th>T√™n s√°ch</th>\n//               <th>S·ªë s√°ch s·∫µn c√≥</th>\n//               <th>ƒê√£ ƒë·∫∑t tr∆∞·ªõc</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {selectedBooks.map((data, index) => (\n//               <tr key={index}>\n//                 <td><img src={`/imageBook/${data.image_url}`} alt=\"\" /></td>\n//                 <td>{data.bookName}</td>\n//                 <td>{data.bookCountAvailable}</td>\n//                 <td>{data.transactions}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n\n//         <label className=\"transaction-form-label\" htmlFor=\"transactionType\">\n//           Lo·∫°i m∆∞·ª£n<span className=\"required-field\">*</span>\n//         </label>\n//         <br />\n//         <div className=\"semanticdropdown\">\n//           <Dropdown\n//             placeholder=\"Ch·ªçn lo·∫°i giao d·ªãch\"\n//             fluid\n//             selection\n//             value={transactionType}\n//             options={transactionTypes}\n//             onChange={(event, data) => setTransactionType(data.value)}\n//           />\n//         </div>\n//         <br />\n\n//         <label className=\"transaction-form-label\" htmlFor=\"from-date\">\n//           T·ª´ ng√†y<span className=\"required-field\">*</span>\n//         </label>\n//         <br />\n//         <DatePicker\n//           className=\"date-picker\"\n//           placeholderText=\"MM/DD/YYYY\"\n//           selected={fromDate}\n//           onChange={(date) => {\n//             setFromDate(date)\n//             setFromDateString(moment(date).format('MM/DD/YYYY'))\n//           }}\n//           minDate={new Date()}\n//           dateFormat=\"MM/dd/yyyy\"\n//         />\n\n//         <label className=\"transaction-form-label\" htmlFor=\"to-date\">\n//           ƒê·∫øn ng√†y<span className=\"required-field\">*</span>\n//         </label>\n//         <br />\n//         <DatePicker\n//           className=\"date-picker\"\n//           placeholderText=\"MM/DD/YYYY\"\n//           selected={toDate}\n//           onChange={(date) => {\n//             setToDate(date)\n//             setToDateString(moment(date).format('MM/DD/YYYY'))\n//           }}\n//           minDate={new Date()}\n//           dateFormat=\"MM/dd/yyyy\"\n//         />\n\n//         <input\n//           className=\"transaction-form-submit\"\n//           type=\"submit\"\n//           value=\"SUBMIT\"\n//           disabled={isLoading}\n//         ></input>\n//       </form>\n//       <p className=\"dashboard-option-title\">M∆∞·ª£n tr·∫£ g·∫ßn ƒë√¢y</p>\n//       <div className=\"dashboard-title-line\"></div>\n//       <table className=\"admindashboard-table\">\n//         <tr>\n//           <th>STT</th>\n//           <th>T√™n s√°ch</th>\n//           <th>Ng∆∞·ªùi m∆∞·ª£n</th>\n//           <th>Ng√†y m∆∞·ª£n</th>\n//         </tr>\n//         {recentTransactions.map((transaction, index) => {\n//           console.log(\"kiet => \", transaction);\n//           return (\n//             <tr key={index}>\n//               <td>{index + 1}</td>\n//               <td>{transaction.bookName}</td>\n//               <td>{transaction.borrowerId}</td>\n//               <td>{transaction.updatedAt}</td>\n//             </tr>\n//           )\n//         })}\n//       </table>\n//     </div>\n//   )\n// }\n\n// export default AddTransaction","map":{"version":3,"names":[],"sources":["C:/Users/Thanh/Desktop/code/h·ªá th·ªëng ph√¢n t√°n/web-thu-vien-mern-stack-main/front-end/src/Pages/Dashboard/Admin/Components/AddTransaction.js"],"sourcesContent":["// import React, { useContext, useEffect, useState } from 'react'\n// import '../AdminDashboard.css'\n// import axios from 'axios'\n// import { AuthContext } from '../../../../Context/AuthContext'\n// import { Dropdown } from 'semantic-ui-react'\n// import DatePicker from 'react-datepicker'\n// import 'react-datepicker/dist/react-datepicker.css'\n// import moment from 'moment'\n// import Loading from \"../../../../Components/Loader/Loader\";\n\n// function AddTransaction() {\n//   const API_URL = process.env.REACT_APP_API_URL\n//   const [isLoading, setIsLoading] = useState(false)\n//   const { user } = useContext(AuthContext)\n//   const [borrowerId, setBorrowerId] = useState([])\n//   const [borrowerDetails, setBorrowerDetails] = useState([])\n//   const [bookId, setBookId] = useState(\"\")\n//   const [recentTransactions, setRecentTransactions] = useState([])\n//   const [allMembers, setAllMembers] = useState([])\n//   const [allBooks, setAllBooks] = useState([])\n\n//   const [fromDate, setFromDate] = useState(null)\n//   const [fromDateString, setFromDateString] = useState(null)\n\n//   const [toDate, setToDate] = useState(null)\n//   const [toDateString, setToDateString] = useState(null)\n\n//   const [bookIds, setBookIds] = useState([]);\n\n//   // H√†m x·ª≠ l√Ω khi c√≥ s·ª± thay ƒë·ªïi trong vi·ªác ch·ªçn s√°ch\n//   const handleBookSelection = (event, data) => {\n//     setBookIds(data.value);\n//   }\n\n\n//   const transactionTypes = [\n//     { value: 'Reserved', text: 'ƒê·∫∑t tr∆∞·ªõc' },\n//     { value: 'Issued', text: 'M∆∞·ª£n lu√¥n' },\n//   ]\n\n//   const [transactionType, setTransactionType] = useState('')\n\n//   /* Adding a Transaction */\n//   const addTransaction = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n  \n//     if (\n//       bookIds.length > 0 &&\n//       borrowerId !== '' &&\n//       transactionType !== '' &&\n//       fromDate !== null &&\n//       toDate !== null\n//     ) {\n//       const borrower_details = await axios.get(\n//         API_URL + 'api/users/getuser/' + borrowerId\n//       );\n  \n//       const Books = [];\n//       for (const id of bookIds) {\n//         const book_details = await axios.get(\n//           API_URL + 'api/books/getbook/' + id\n//         );\n  \n//         if (\n//           (book_details.data.bookCountAvailable > 0 &&\n//             (transactionType === 'Issued' || transactionType === 'Reserved')) ||\n//           (book_details.data.bookCountAvailable === 0 &&\n//             transactionType === 'Reserved')\n//         ) {\n//           Books.push(id);\n//         } else {\n//           alert('Cu·ªën s√°ch ƒë√£ h·∫øt ho·∫∑c kh√¥ng th·ªÉ m∆∞·ª£n.');\n//           setIsLoading(false);\n//           return;\n//         }\n//       }\n  \n//       const transactionData = {\n//         books: Books,\n//         transactionStatus: \"Active\",\n//         borrowerId: borrowerId,\n//         transactionType: transactionType,\n//         fromDate: fromDate,\n//         toDate: toDate,\n//       };\n  \n//       try {\n//         const response = await axios.post(\n//           API_URL + 'api/transactions/add-transaction',\n//           transactionData\n//         );\n  \n//         if (recentTransactions.length >= 5) {\n//           recentTransactions.splice(-1);\n//         }\n//         setRecentTransactions([response.data, ...recentTransactions]);\n  \n//         // await axios.put(\n//         //   API_URL + `api/users/${response.data._id}/move-to-activetransactions`,\n//         //   {\n//         //     userId: borrowerId,\n//         //     isAdmin: user.isAdmin,\n//         //   }\n//         // );\n  \n//         setBorrowerId('');\n//         setBookIds([]);\n//         setTransactionType('');\n//         setFromDate(null);\n//         setToDate(null);\n  \n//         alert('T·∫°o phi·∫øu m∆∞·ª£n th√†nh c√¥ng üéâ');\n//       } catch (err) {\n//         console.log(err);\n//         alert('ƒê√£ x·∫£y ra l·ªói khi t·∫°o phi·∫øu m∆∞·ª£n.');\n//       }\n//     } else {\n//       alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');\n//     }\n//     setIsLoading(false);\n//   };\n  \n//   //  l·∫•y danh sachs cu·ªën sach ƒë√£ ch·ªçn \n\n\n//   /* Fetch Transactions */\n//   useEffect(() => {\n//     const getTransactions = async () => {\n//       try {\n//         const response = await axios.get(\n//           API_URL + 'api/transactions/all-transactions',\n//         )\n//         setRecentTransactions(response.data.slice(0, 5))\n//       } catch (err) {\n//         console.log('Error in fetching transactions')\n//       }\n//     }\n//     getTransactions()\n//   }, [API_URL])\n\n//   /* Fetching borrower details */\n//   useEffect(() => {\n//     const getBorrowerDetails = async () => {\n//       try {\n//         if (borrowerId !== '') {\n//           const response = await axios.get(\n//             API_URL + 'api/users/getuser/' + borrowerId,\n//           )\n//           setBorrowerDetails(response.data)\n//           console.log(response.data);\n//         }\n//       } catch (err) {\n//         console.log('Error in getting borrower details')\n//       }\n//     }\n//     getBorrowerDetails()\n//   }, [API_URL, borrowerId])\n\n//   /* Fetching members */\n//   useEffect(() => {\n//     const getMembers = async () => {\n//       try {\n//         const response = await axios.get(API_URL + 'api/users/allmembers')\n//         const all_members = await response.data.map((member) => ({\n//           value: `${member?._id}`,\n//           text: `${member?.userType === 'Student'\n//             ? `${member?.userFullName}[${member?.admissionId}]`\n//             : `${member?.userFullName}[${member?.employeeId}]`\n//             }`,\n//         }))\n//         setAllMembers(all_members)\n//       } catch (err) {\n//         console.log(err)\n//       }\n//     }\n//     getMembers()\n//   }, [API_URL])\n\n//   const [listBook, setListbook] = useState([])\n\n//   /* Fetching books */\n//   useEffect(() => {\n//     setIsLoading(true);\n\n//     const getallBooks = async () => {\n//       const response = await axios.get(API_URL + 'api/books/allbooks')\n//       const allbooks = await response.data.map((book) => ({\n//         value: `${book._id}`,\n//         text: `${book.bookName}`,\n//       }))\n//       const listbook = response.data\n//       setListbook(listbook)\n\n//       setAllBooks(allbooks)\n\n//     }\n//     getallBooks()\n\n//     setIsLoading(false);\n\n//   }, [API_URL])\n\n//   const [currentBook, setCurrentBook] = useState([])\n\n//   useEffect(() => {\n//     if (bookId !== '') {\n//       console.log(\"kiet \", bookId)\n//       const data = listBook.filter((m) => m._id === bookId)\n//       if (data.length > 0) setCurrentBook(data)\n//     }\n//   }, [bookId, listBook])\n//   const [selectedBooks, setSelectedBooks] = useState([]);\n\n//   // X·ª≠ l√Ω s·ª± thay ƒë·ªïi trong danh s√°ch c√°c cu·ªën s√°ch ƒë√£ ch·ªçn\n//   useEffect(() => {\n//     if (listBook.length > 0) {\n//       // L·ªçc ra c√°c cu·ªën s√°ch ƒë√£ ch·ªçn t·ª´ listBook\n//       const selectedBooksData = listBook.filter(book => bookIds.includes(book._id));\n//       // C·∫≠p nh·∫≠t danh s√°ch c√°c cu·ªën s√°ch ƒë√£ ch·ªçn\n//       setSelectedBooks(selectedBooksData);\n//     }\n//   }, [bookIds, listBook]);\n\n//   if (isLoading) return <Loading />;\n\n//   return (\n//     <div>\n//       <p className=\"dashboard-option-title\">T·∫°o phi·∫øu m∆∞·ª£n s√°ch</p>\n//       <div className=\"dashboard-title-line\"></div>\n//       <form className=\"transaction-form\" onSubmit={addTransaction}>\n//         <label className=\"transaction-form-label\" htmlFor=\"borrowerId\">\n//           ƒê·ªôc gi·∫£<span className=\"required-field\">*</span>\n//         </label>\n//         <br />\n//         <div className=\"semanticdropdown\">\n//           <Dropdown\n//             placeholder=\"Ch·ªçn ƒë·ªôc gi·∫£\"\n//             fluid\n//             search\n//             selection\n//             value={borrowerId}\n//             options={allMembers}\n//             onChange={(event, data) => setBorrowerId(data.value)}\n//           />\n//         </div>\n//         {/* b·∫£ng th·ªëng k√™ m∆∞·ª£n c·ªßa ƒë·ªôc gi·∫£ */}\n//         <table\n//           className=\"admindashboard-table shortinfo-table\"\n//           style={borrowerId === '' ? { display: 'none' } : {}}\n//         >\n//           <tr>\n//             <th>ƒê·ªôc gi·∫£</th>\n//             <th>ƒê√£ m∆∞·ª£n</th>\n//             <th>ƒêang m∆∞·ª£n</th>\n//             <th>ƒêi·ªÉm</th>\n//           </tr>\n//           <tr>\n//             <td>{borrowerDetails.userFullName}</td>\n//             <td>\n//               {\n//                 borrowerDetails.activeTransactions?.filter((data) => {\n//                   return (\n//                     data.transactionType === 'Issued' &&\n//                     data.transactionStatus === 'Active'\n//                   )\n//                 }).length\n//               }\n//             </td>\n//             <td>\n//               {\n//                 borrowerDetails.activeTransactions?.filter((data) => {\n//                   return (\n//                     data.transactionType === 'Reserved' &&\n//                     data.transactionStatus === 'Active'\n//                   )\n//                 }).length\n//               }\n//             </td>\n//             <td>{borrowerDetails.points}</td>\n//           </tr>\n//         </table>\n//         <table\n//           className=\"admindashboard-table shortinfo-table\"\n//           style={borrowerId === '' ? { display: 'none' } : {}}\n//         >\n//           <tr>\n//             <th>T√™n s√°ch</th>\n//             <th>Lo·∫°i m∆∞·ª£n</th>\n//             <th>\n//               T·ª´ ng√†y\n//               <br />\n//               <span style={{ fontSize: '10px' }}>[MM/DD/YYYY]</span>\n//             </th>\n//             <th>\n//               ƒê·∫øn ng√†y\n//               <br />\n//               <span style={{ fontSize: '10px' }}>[MM/DD/YYYY]</span>\n//             </th>\n//             <th>Qu√° h·∫°n</th>\n//           </tr>\n//           {borrowerDetails.activeTransactions\n//             ?.filter((data) => {\n//               return data.transactionStatus === 'Active'\n//             })\n//             .map((data, index) => {\n//               console.log(\"kiet =>\", data);\n//               return (\n//                 <tr key={index}>\n//                   <td>{data.bookName}</td>\n//                   <td>{data.transactionType === \"Issued\" ? \"ƒêang m∆∞·ª£n\" : \"ƒêang ch·ªù x·ª≠ l√Ω\"}</td>\n//                   <td>{data.fromDate}</td>\n//                   <td>{data.toDate}</td>\n//                   <td>\n//                     {Math.floor(\n//                       (Date.parse(moment(new Date()).format('MM/DD/YYYY')) -\n//                         Date.parse(data.toDate)) /\n//                       86400000,\n//                     ) <= 0\n//                       ? 0\n//                       : Math.floor(\n//                         (Date.parse(moment(new Date()).format('MM/DD/YYYY')) -\n//                           Date.parse(data.toDate)) /\n//                         86400000,\n//                       ) * 10}\n//                   </td>\n//                 </tr>\n//               )\n//             })}\n//         </table>\n\n//         <label className=\"transaction-form-label\" htmlFor=\"bookName\">\n//           T√™n s√°ch<span className=\"required-field\">*</span>\n//         </label>\n//         <br />\n//         <div className=\"semanticdropdown\">\n//           <Dropdown\n//             placeholder=\"Ch·ªçn s√°ch\"\n//             fluid\n//             multiple             // ƒê·∫∑t thu·ªôc t√≠nh multiple th√†nh true\n//             search\n//             selection\n//             options={allBooks}\n//             value={bookIds}\n//             onChange={handleBookSelection}\n//           // placeholder=\"Ch·ªçn s√°ch\"\n//           // fluid\n//           // search\n//           // selection\n//           // options={allBooks}\n//           // value={bookId}\n//           // onChange={(event, data) => {\n//           //   setBookId(data.value);\n//           // }\n//           // }\n//           />\n//         </div>\n//         {/* <table\n//           className=\"admindashboard-table shortinfo-table\"\n//           style={bookId === '' ? { display: 'none' } : {}}\n//         >\n//           <tr>\n//             <th>·∫¢nh b√¨a</th>\n//             <th>T√™n s√°ch</th>\n//             <th>S·ªë s√°ch s·∫µn c√≥</th>\n//             <th>ƒê√£ ƒë·∫∑t tr∆∞·ªõc</th>\n//           </tr>\n\n//           {currentBook.map((data, index) => {\n//             return (\n//               <tr>\n\n//                 <td><img src={\"/imageBook/\" + data.image_url} alt=\"\" href={`/book/${data._id}`} ></img></td>\n//                 <td>{data.bookName}</td>\n//                 <td>{data.bookCountAvailable}</td>\n//                 <td>{data.transactions}</td>\n//               </tr>\n//             )\n//           })}\n//         </table> */}\n//         <table className=\"admindashboard-table shortinfo-table\">\n//           <thead>\n//             <tr>\n//               <th>·∫¢nh b√¨a</th>\n//               <th>T√™n s√°ch</th>\n//               <th>S·ªë s√°ch s·∫µn c√≥</th>\n//               <th>ƒê√£ ƒë·∫∑t tr∆∞·ªõc</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {selectedBooks.map((data, index) => (\n//               <tr key={index}>\n//                 <td><img src={`/imageBook/${data.image_url}`} alt=\"\" /></td>\n//                 <td>{data.bookName}</td>\n//                 <td>{data.bookCountAvailable}</td>\n//                 <td>{data.transactions}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n\n//         <label className=\"transaction-form-label\" htmlFor=\"transactionType\">\n//           Lo·∫°i m∆∞·ª£n<span className=\"required-field\">*</span>\n//         </label>\n//         <br />\n//         <div className=\"semanticdropdown\">\n//           <Dropdown\n//             placeholder=\"Ch·ªçn lo·∫°i giao d·ªãch\"\n//             fluid\n//             selection\n//             value={transactionType}\n//             options={transactionTypes}\n//             onChange={(event, data) => setTransactionType(data.value)}\n//           />\n//         </div>\n//         <br />\n\n//         <label className=\"transaction-form-label\" htmlFor=\"from-date\">\n//           T·ª´ ng√†y<span className=\"required-field\">*</span>\n//         </label>\n//         <br />\n//         <DatePicker\n//           className=\"date-picker\"\n//           placeholderText=\"MM/DD/YYYY\"\n//           selected={fromDate}\n//           onChange={(date) => {\n//             setFromDate(date)\n//             setFromDateString(moment(date).format('MM/DD/YYYY'))\n//           }}\n//           minDate={new Date()}\n//           dateFormat=\"MM/dd/yyyy\"\n//         />\n\n//         <label className=\"transaction-form-label\" htmlFor=\"to-date\">\n//           ƒê·∫øn ng√†y<span className=\"required-field\">*</span>\n//         </label>\n//         <br />\n//         <DatePicker\n//           className=\"date-picker\"\n//           placeholderText=\"MM/DD/YYYY\"\n//           selected={toDate}\n//           onChange={(date) => {\n//             setToDate(date)\n//             setToDateString(moment(date).format('MM/DD/YYYY'))\n//           }}\n//           minDate={new Date()}\n//           dateFormat=\"MM/dd/yyyy\"\n//         />\n\n//         <input\n//           className=\"transaction-form-submit\"\n//           type=\"submit\"\n//           value=\"SUBMIT\"\n//           disabled={isLoading}\n//         ></input>\n//       </form>\n//       <p className=\"dashboard-option-title\">M∆∞·ª£n tr·∫£ g·∫ßn ƒë√¢y</p>\n//       <div className=\"dashboard-title-line\"></div>\n//       <table className=\"admindashboard-table\">\n//         <tr>\n//           <th>STT</th>\n//           <th>T√™n s√°ch</th>\n//           <th>Ng∆∞·ªùi m∆∞·ª£n</th>\n//           <th>Ng√†y m∆∞·ª£n</th>\n//         </tr>\n//         {recentTransactions.map((transaction, index) => {\n//           console.log(\"kiet => \", transaction);\n//           return (\n//             <tr key={index}>\n//               <td>{index + 1}</td>\n//               <td>{transaction.bookName}</td>\n//               <td>{transaction.borrowerId}</td>\n//               <td>{transaction.updatedAt}</td>\n//             </tr>\n//           )\n//         })}\n//       </table>\n//     </div>\n//   )\n// }\n\n// export default AddTransaction\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}