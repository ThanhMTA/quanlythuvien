{"ast":null,"code":"import TransApi from \"../callAPI/trans.js\";\nimport BookApi from \"../callAPI/BookApi.js\";\nimport UserApi from \"../callAPI/user.js\";\nconst TransController = {\n  getAllTrans: async () => {\n    try {\n      // Lấy tất cả các giao dịch\n      const allTransactions = await TransApi.getAllTrans();\n      console.log(\"thanh1e\", allTransactions);\n      // Tạo một mảng các promise để thực hiện các cuộc gọi không đồng bộ một cách song song\n      const promises = allTransactions.map(async transaction => {\n        const userId = transaction.borrowerId;\n        const bookId = transaction.books;\n\n        // Kiểm tra xem userId và bookIds có tồn tại không\n        if (!userId || !bookId || bookId.length === 0) {\n          console.warn(`Transaction ${transaction._id} is missing userId or bookIds`);\n          return null; // Trả về null nếu dữ liệu không đủ để xử lý\n        }\n\n        // Lấy thông tin của user dựa trên userId\n        const userPromise = UserApi.getUserbyID(userId);\n\n        // // Lấy thông tin của các sách dựa trên các bookId\n        const bookPromises = BookApi.getBookbyID(bookId);\n\n        // Chờ cho tất cả các cuộc gọi không đồng bộ hoàn thành\n        const user = await userPromise;\n        const book = await bookPromises;\n        // console.log(\"hoo\", book)\n        // Trả về thông tin user và sách cho giao dịch này\n        const toDate = new Date(transaction.toDate).toLocaleDateString('en-GB');\n        const fromday = new Date(transaction.fromDate).toLocaleDateString('en-GB');\n        return {\n          userName: user.userFullName,\n          books: book.bookName,\n          _id: transaction._id,\n          fromDate: fromday,\n          toDate: toDate,\n          returnDate: transaction.returnDate,\n          createdAt: transaction.createdAt,\n          transactionStatus: transaction.transactionStatus\n        };\n      });\n\n      // Chờ cho tất cả các promise hoàn thành và loại bỏ các phần tử null\n      const transactionDetails = await Promise.all(promises);\n      console.log(\"thanh1e\", allTransactions);\n\n      // return transactionDetails.filter(transaction => transaction !== null);\n      return transactionDetails;\n    } catch (error) {\n      console.error(\"Error:\", error);\n      throw error; // Throw lỗi để xử lý ở phía gọi hàm nếu cần\n    }\n  },\n\n  addTransaction: async transactionData => {\n    try {\n      const addedTransaction = await TransApi.addTrans(transactionData);\n      return addedTransaction;\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n      throw error;\n    }\n  }\n\n  // Các hàm controller khác có thể được thêm ở đây\n};\n\nexport default TransController;","map":{"version":3,"names":["TransApi","BookApi","UserApi","TransController","getAllTrans","allTransactions","console","log","promises","map","transaction","userId","borrowerId","bookId","books","length","warn","_id","userPromise","getUserbyID","bookPromises","getBookbyID","user","book","toDate","Date","toLocaleDateString","fromday","fromDate","userName","userFullName","bookName","returnDate","createdAt","transactionStatus","transactionDetails","Promise","all","error","addTransaction","transactionData","addedTransaction","addTrans"],"sources":["C:/Users/Thanh/Desktop/code/hệ thống phân tán/web-thu-vien-mern-stack-main/front-end/src/Controller/TransactionController.js"],"sourcesContent":["import TransApi from \"../callAPI/trans.js\"\r\nimport BookApi from \"../callAPI/BookApi.js\";\r\nimport UserApi from \"../callAPI/user.js\";\r\nconst TransController = {\r\n    getAllTrans: async () => {\r\n        try {\r\n            // Lấy tất cả các giao dịch\r\n            const allTransactions = await TransApi.getAllTrans();\r\n            console.log(\"thanh1e\", allTransactions)\r\n            // Tạo một mảng các promise để thực hiện các cuộc gọi không đồng bộ một cách song song\r\n            const promises = allTransactions.map(async transaction => {\r\n                const userId = transaction.borrowerId;\r\n                const bookId = transaction.books;\r\n\r\n                // Kiểm tra xem userId và bookIds có tồn tại không\r\n                if (!userId || !bookId || bookId.length === 0) {\r\n                    console.warn(`Transaction ${transaction._id} is missing userId or bookIds`);\r\n                    return null; // Trả về null nếu dữ liệu không đủ để xử lý\r\n                }\r\n\r\n                // Lấy thông tin của user dựa trên userId\r\n                const userPromise = UserApi.getUserbyID(userId);\r\n\r\n                // // Lấy thông tin của các sách dựa trên các bookId\r\n                const bookPromises = BookApi.getBookbyID(bookId);\r\n\r\n                // Chờ cho tất cả các cuộc gọi không đồng bộ hoàn thành\r\n                const user = await userPromise;\r\n                const book = await bookPromises;\r\n                // console.log(\"hoo\", book)\r\n                // Trả về thông tin user và sách cho giao dịch này\r\n                const toDate = new Date(transaction.toDate).toLocaleDateString('en-GB');\r\n                const fromday = new Date(transaction.fromDate).toLocaleDateString('en-GB');\r\n\r\n                return {\r\n                    userName: user.userFullName,\r\n                    books: book.bookName,\r\n                    _id: transaction._id,\r\n                    fromDate: fromday,\r\n                    toDate: toDate,\r\n                    returnDate: transaction.returnDate,\r\n                    createdAt: transaction.createdAt,\r\n                    transactionStatus: transaction.transactionStatus\r\n                };\r\n            });\r\n\r\n            // Chờ cho tất cả các promise hoàn thành và loại bỏ các phần tử null\r\n            const transactionDetails = await Promise.all(promises);\r\n            console.log(\"thanh1e\", allTransactions)\r\n\r\n            // return transactionDetails.filter(transaction => transaction !== null);\r\n            return transactionDetails\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n            throw error; // Throw lỗi để xử lý ở phía gọi hàm nếu cần\r\n        }\r\n    },\r\n    addTransaction: async (transactionData) => {\r\n        try {\r\n            const addedTransaction = await TransApi.addTrans(transactionData);\r\n            return addedTransaction;\r\n        } catch (error) {\r\n            console.error('Error adding transaction:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    // Các hàm controller khác có thể được thêm ở đây\r\n};\r\nexport default TransController;\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,OAAO,MAAM,oBAAoB;AACxC,MAAMC,eAAe,GAAG;EACpBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACA;MACA,MAAMC,eAAe,GAAG,MAAML,QAAQ,CAACI,WAAW,CAAC,CAAC;MACpDE,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,eAAe,CAAC;MACvC;MACA,MAAMG,QAAQ,GAAGH,eAAe,CAACI,GAAG,CAAC,MAAMC,WAAW,IAAI;QACtD,MAAMC,MAAM,GAAGD,WAAW,CAACE,UAAU;QACrC,MAAMC,MAAM,GAAGH,WAAW,CAACI,KAAK;;QAEhC;QACA,IAAI,CAACH,MAAM,IAAI,CAACE,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;UAC3CT,OAAO,CAACU,IAAI,CAAE,eAAcN,WAAW,CAACO,GAAI,+BAA8B,CAAC;UAC3E,OAAO,IAAI,CAAC,CAAC;QACjB;;QAEA;QACA,MAAMC,WAAW,GAAGhB,OAAO,CAACiB,WAAW,CAACR,MAAM,CAAC;;QAE/C;QACA,MAAMS,YAAY,GAAGnB,OAAO,CAACoB,WAAW,CAACR,MAAM,CAAC;;QAEhD;QACA,MAAMS,IAAI,GAAG,MAAMJ,WAAW;QAC9B,MAAMK,IAAI,GAAG,MAAMH,YAAY;QAC/B;QACA;QACA,MAAMI,MAAM,GAAG,IAAIC,IAAI,CAACf,WAAW,CAACc,MAAM,CAAC,CAACE,kBAAkB,CAAC,OAAO,CAAC;QACvE,MAAMC,OAAO,GAAG,IAAIF,IAAI,CAACf,WAAW,CAACkB,QAAQ,CAAC,CAACF,kBAAkB,CAAC,OAAO,CAAC;QAE1E,OAAO;UACHG,QAAQ,EAAEP,IAAI,CAACQ,YAAY;UAC3BhB,KAAK,EAAES,IAAI,CAACQ,QAAQ;UACpBd,GAAG,EAAEP,WAAW,CAACO,GAAG;UACpBW,QAAQ,EAAED,OAAO;UACjBH,MAAM,EAAEA,MAAM;UACdQ,UAAU,EAAEtB,WAAW,CAACsB,UAAU;UAClCC,SAAS,EAAEvB,WAAW,CAACuB,SAAS;UAChCC,iBAAiB,EAAExB,WAAW,CAACwB;QACnC,CAAC;MACL,CAAC,CAAC;;MAEF;MACA,MAAMC,kBAAkB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC7B,QAAQ,CAAC;MACtDF,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,eAAe,CAAC;;MAEvC;MACA,OAAO8B,kBAAkB;IAC7B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZhC,OAAO,CAACgC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ,CAAC;;EACDC,cAAc,EAAE,MAAOC,eAAe,IAAK;IACvC,IAAI;MACA,MAAMC,gBAAgB,GAAG,MAAMzC,QAAQ,CAAC0C,QAAQ,CAACF,eAAe,CAAC;MACjE,OAAOC,gBAAgB;IAC3B,CAAC,CAAC,OAAOH,KAAK,EAAE;MACZhC,OAAO,CAACgC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACf;EACJ;;EAGA;AACJ,CAAC;;AACD,eAAenC,eAAe"},"metadata":{},"sourceType":"module"}